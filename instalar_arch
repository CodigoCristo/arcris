#!/bin/bash

tituloInicio="| Visita Nuestra Comunidad - https://t.me/ArchLinuxCristo - by: Arcris v2.0 |"

titulo="| Instalación de ArchLinux en Español - https://t.me/ArchLinuxCristo |"



if ping -c 3 www.google.com &> /dev/null; then

clear
ping -c 5 www.google.com
echo ""
echo ""
echo ""
echo " ██████╗ ██████╗ ███╗   ██╗███████╗██╗  ██╗██╗ ██████╗ ███╗   ██╗";
echo "██╔════╝██╔═══██╗████╗  ██║██╔════╝╚██╗██╔╝██║██╔═══██╗████╗  ██║";
echo "██║     ██║   ██║██╔██╗ ██║█████╗   ╚███╔╝ ██║██║   ██║██╔██╗ ██║";
echo "██║     ██║   ██║██║╚██╗██║██╔══╝   ██╔██╗ ██║██║   ██║██║╚██╗██║";
echo "╚██████╗╚██████╔╝██║ ╚████║███████╗██╔╝ ██╗██║╚██████╔╝██║ ╚████║";
echo " ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝";
echo "                                                                 ";

echo "███████╗██╗  ██╗██╗████████╗ ██████╗ ███████╗ █████╗ ";
echo "██╔════╝╚██╗██╔╝██║╚══██╔══╝██╔═══██╗██╔════╝██╔══██╗";
echo "█████╗   ╚███╔╝ ██║   ██║   ██║   ██║███████╗███████║";
echo "██╔══╝   ██╔██╗ ██║   ██║   ██║   ██║╚════██║██╔══██║";
echo "███████╗██╔╝ ██╗██║   ██║   ╚██████╔╝███████║██║  ██║";
echo "╚══════╝╚═╝  ╚═╝╚═╝   ╚═╝    ╚═════╝ ╚══════╝╚═╝  ╚═╝";
echo "                                                     ";
echo ""
echo ""
echo "Cargando..."
sleep 5
#echo "Presiona ENTER para continuar..."
#read line

#Variable para zona horaria
clear
zonahorariaok=$(curl https://ipapi.co/timezone)
echo ""
echo "Cargando..."
clear


else
clear
echo ""
echo ""
echo ""
echo "██╗      █████╗      ██████╗ ██████╗ ███╗   ██╗███████╗██╗  ██╗██╗ ██████╗ ███╗   ██╗";
echo "██║     ██╔══██╗    ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚██╗██╔╝██║██╔═══██╗████╗  ██║";
echo "██║     ███████║    ██║     ██║   ██║██╔██╗ ██║█████╗   ╚███╔╝ ██║██║   ██║██╔██╗ ██║";
echo "██║     ██╔══██║    ██║     ██║   ██║██║╚██╗██║██╔══╝   ██╔██╗ ██║██║   ██║██║╚██╗██║";
echo "███████╗██║  ██║    ╚██████╗╚██████╔╝██║ ╚████║███████╗██╔╝ ██╗██║╚██████╔╝██║ ╚████║";
echo "╚══════╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝";
echo "                                                                                     ";


echo "███████╗ █████╗ ██╗     ██╗      ██████╗ ";
echo "██╔════╝██╔══██╗██║     ██║     ██╔═══██╗";
echo "█████╗  ███████║██║     ██║     ██║   ██║";
echo "██╔══╝  ██╔══██║██║     ██║     ██║   ██║";
echo "██║     ██║  ██║███████╗███████╗╚██████╔╝";
echo "╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝ ╚═════╝ ";
echo "                                         ";
echo ""
echo ""
echo "Intenta conectarte a internet para continuar"
echo ""
sleep 5
#echo "Presiona ENTER para intentar nuevamente..."
#read line
exit

clear
fi



main () {

while true; do
choice=$(dialog --keep-tite --backtitle "$tituloInicio" --title "-| Arcris |-" \
--ok-label '*Seleccionar*' --nocancel --column-separator "|" --no-tags \
--menu "\nSeleccione una opción a continuación utilizando las teclas\n[FLECHA ARRIBA] / [FLECHA ABAJO] y [ESPACIO] o [ENTER]\
\nLas teclas alternativas también se pueden usar: [+], [-] y [TAB]. \n " 22 70 11 \
1 "1 USERS | Establecer Datos Personales" \
2 "2 TIMEZONE | Establecer la zona horaria del sistema" \
3 "3 LANGUAGE | Establecer el idioma del sistema" \
4 "4 SHELL | Establece la shell del sistema" \
5 "5 DISK | Particionar la unidad de instalación" \
6 "6 KERNEL | Establecer el kernel del sistema" \
7 "7 DRIVER VIDEO | Establecer el driver de video del sistema" \
8 "8 (DE) or (WM) | Establecer un Escritorio o Gestor de Ventanas" \
9 "9 EXTRA PROGRAMS | Selecciona programas extras - [ OPCIONAL ]" \
10 "> INSTALL | Instalar Arch Linux" \
11 "> EXIT | Salir del Script ArcriS" 3>&1 1>&2 2>&3)

case "$choice" in
"1")
##INICIO DE HOSTNAME



dialog --backtitle "$titulo" \
--title "| ALERTA |" \
--msgbox "\n> No se permite caracteres especiales\
\n> Ni letras con tilde\n> Por ejemplo: è, ü, ñ, etc...\
\n> Ni otros caracteres especiales\n> ~!@#$%^&*_-+=|\(){}[]:;<;>;,.?/ \
\n\n     >>  Ya que pueden causar errores  <<" 13 50


bucledat=0
hostname=""
username=""
userpasswd=""
rootpasswd=""

bucledatos () {

while [ $bucledat == 0 ]; do
choicedatos=$(dialog --keep-tite --backtitle "$titulo" --column-separator "|" --no-tags --title "| DATOS |" --ok-label 'Seleccionar' --nocancel --menu "\n              Información Personal\n " 13 53 11 \
1 'User  || Nombre y clave Usuario' \
2 'Hostname || Nombre de host' \
3 'Passwd ROOT || Contraseña de Administrador' \
4 'Save data || Guardar Datos' 3>&1 1>&2 2>&3)

case "$choicedatos" in

"1")

  while true; do

    username=$(dialog --title "Crea una cuenta de usuario" \
     --nocancel --inputbox "\nIntroduzca un nombre de usuario para el nuevo Usuario \
\n\nEl nombre de usuario debe comenzar con una letra minúscula,\nque puede ir \
seguida de cualquier combinación de números,\nletras más minúsculas o el símbolo de guión. [ - ] \
\n\nNombre de usuario de su cuenta:" 14 65 3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
    #El nombre de usuario debe comenzar con una letra minúscula. 
    #Puede contener minúsculas alfanuméricas y guiones.
      if printf "%s" "$username" | grep -Eoq "^[a-z][a-z0-9-]*$" \
        && [ "${#username}" -lt 33 ]; then
        # El archivo de nombre de usuario reservado contiene nombres de usuario que deben evitarse
        if grep -Fxq "$username" reserved_usernames ; then
          dialog --title "ERROR: Nombre de usuario reservado" \
            --msgbox "El nombre de usuario que ingresaste ($username) está reservado \
para uso del sistema. Seleccione uno diferente." 6 70
        else 
          inputs_match=false
          while ! $inputs_match; do
            input=$(dialog --title "Establecer la contraseña para $username" --clear \
              --stdout --nocancel --insecure --passwordbox "\n\nElija una contraseña para el nuevo usuario:" 08 60)
            confirm_input=$(dialog --title "Establecer la contraseña para $username" \
              --clear --stdout --insecure \
              --passwordbox "Vuelva a ingresar la contraseña para verificar:" 8 55)

            if [ -z "$input" ]; then
              dialog --title "ERROR: contraseña vacía" \
                --msgbox "No se le permite tener una contraseña vacía." 5 55
            elif [ "$input" != "$confirm_input" ]; then
              dialog --title "ERROR: Las contraseñas no coinciden" \
                --msgbox "Las dos contraseñas que ha introducido no coinciden." 5 55
            else
              userpasswd="$input"
              inputs_match=true
            fi
          done
          break
        fi
      else
        dialog --title "ERROR: Formato de nombre de usuario no válido" \
          --msgbox "Ingresaste un nombre de usuario no válido.\n\nEl nombre de usuario debe comenzar con una letra minúscula, que puede ir seguida de cualquier combinación de números, más letras minúsculas o el símbolo de guión, y no debe tener más de 32 caracteres." 9 80
      fi
    fi
  done

user=$(echo "$username" | sed -n 1p)
user=$(echo $user | tr '[:upper:]' '[:lower:]')

;;

"2") # HOSTNAME
while true; do
    hostname=$(dialog --backtitle "$titulo" --nocancel \
      --inputbox "El hostname \
es una sola palabra que identifica su sistema en la red.\n\nPor favor ingrese el nombre de host para este sistema:" \
12 80 "ArcriS" 3>&1 1>&2 2>&3)


    # Hostname must be alpha-numeric and may contain a dash only in between
    if printf "%s" "$hostname" | grep -Eoq "^[a-zA-Z0-9-]{1,63}$" \
      && [ "${hostname:0:1}" != "-" ] \
      && [ "${hostname: -1}" != "-" ]; then
      break
    else
      dialog --backtitle "$titulo"  --title "| ERROR: Formato de nombre no válido |" \
        --msgbox "\nIngresó un nombre de host no válido. \n\nUn nombre de host válido puede \
contienen solo los números 0-9, letras mayúsculas y minúsculas (A-Z y a-z), y \
el signo menos.\n\nDebe tener como máximo 63 caracteres y no puede comenzar \
o terminar con un signo menos." 12 75
    fi

  done
#FIN HOSTANAME
;;

"3") 
inputs_match=false
  while ! $inputs_match; do
    input=$(dialog --title "Establecer la contraseña de root" --clear --stdout --nocancel \
      --insecure --passwordbox "Introduzca una contraseña para 'root',\nla cuenta de administrador del sistema. \
\n\nContraseña de root:" 10 50)
    confirm_input=$(dialog --title "Establecer la contraseña de root" --clear --stdout \
      --insecure --passwordbox "Vuelva a ingresar la contraseña para verificar:" 8 55)
        

    if [ -z "$input" ]; then
      dialog --title "ERROR: contraseña vacía" \
        --msgbox "No se le permite tener una contraseña vacía." 5 55
    elif [ "$input" != "$confirm_input" ]; then
      dialog --title "ERROR: las contraseñas no coinciden" \
        --msgbox "Las dos contraseñas que ha introducido no coinciden." 5 55
    else
      rootpasswd="$input"
      inputs_match=true
    fi
  done
;;



"4")
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
echo -e "\t\t\t| Datos Ingresados |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
echo ""

echo Hostname:          $hostname
echo Passwd ROOT:       $rootpasswd
echo ""
echo Nombre de Usuario:   $user
echo Clave de Usuario :   $userpasswd
echo -e ""
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
echo PRESIONA ENTER PARA CONFIRMAR...
read line
echo ""
bucledat=1
;;
    esac
done

}

bucledatos


;;



"2")
## INICIO DE TIMEZONE
### ZONA HORARIA
dialog --backtitle "$titulo" --title "| ZONA HORARIA |" --defaultno --yesno "\n       >>> $zonahorariaok <<<\n\n       ¿Deseas modificarlo?" 8 40 

if [ "$?" = "0" ]; then

selected=0 
timezonedir=/usr/share/zoneinfo
while [ "$selected" = "0" ] 
do

  clear
  check=$(ls -l $timezonedir | grep -v .tab | awk '/drwx/' | awk -F " " '{print $9}' | awk '{if (NR!=1) {print}}' | head -1)
  if [[ $check != America ]]; then 
    echo "../ UP" >timezones 
  fi

  ls -l $timezonedir | grep -v .tab | awk '/drwx/' | awk -F " " '{print $9}' | awk '{print $0"/"}' | awk '$fs=$fs" Time"' | awk '{if (NR!=1) {print}}'>>timezones 
  
  ls -l $timezonedir | grep -v .tab | awk '/-rw-/' | awk -F " " '{print $9}' | awk '$fs=$fs" Time"' | awk '{if (NR!=1) {print}}'>>timezones
  timezones=$(cat timezones) 
  rm timezones 
  timezone=$(dialog --backtitle "| Instalación de ArchLinux |" --clear --title "Tu Zona Horaria es $(cat timezone): " \
      --menu "Ingresa la zona horaria" 20 0 20 ${timezones} 2>&1 >/dev/tty) 
  clear
  if [ "$?" = "0" ] 
  then
    if [[ $timezone == *"/"* ]]; then 
      timezonedir=$timezonedir/$timezone
    else 
      zonadefaultNo=true
      selected=1
    fi
  fi
done

else
#zone="$(cat timezone)"
zonadefaultYes=true
fi
## FIN DE TIMEZONE
;;



"3")
## INICIO DE LANGUAGE 

keyboard=""
loadkeys=""
keymap="" 
locales=""
locale=""


cmd=(dialog --backtitle "$titulo" --title "-| Distribución del teclado |-" --keep-tite --menu "\n" 10 50 10)

options=(la-latin1  "LatinoAmericano"
         es     "Español"
         us     "Ingles"
         otros    "(+)Teclados")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        es)
            loadkeys es
      keyboard="es"
      loadkeys=$keyboard 
      keymap=$keyboard  
            ;;
            
        la-latin1)
            loadkeys la-latin1
      keyboard="la-latin1"
      loadkeys=$keyboard 
      keymap=$keyboard 
            ;;
            
        us)
            loadkeys us
      keyboard="us"
      loadkeys=$keyboard 
      keymap=$keyboard  
            ;;
            
        otros)
            selected=0 
      while [ $selected == "0" ];do 
        locales="$(localectl list-keymaps | awk '$locales=$locales" Keyboard"')" && locales=$(echo "$locales") 
        keyboard=$(dialog --backtitle "$titulo" --clear --title "-| Distribución del teclado: |-" --menu "\n" 15 50 15   ${locales} 2>&1 > /dev/tty) 
        if [ $? == 0 ];then 
          loadkeys $keyboard 
          keymap=$keyboard 
          selected=1 
        else 
          dialog --backtitle "$titulo" --title "-| ERROR |-" --stdout --ok-label 'Siguiente' --msgbox "Ingrese una distribución del teclado para continuar" 5 55 
        fi
      done
            ;;
    esac
done


### IDIOMA DEL SISTEMA
sed -i '199d' /etc/locale.gen
sed -i "199i #es_ES.UTF-8 UTF-8" /etc/locale.gen

locales="$(cat /etc/locale.gen | grep '.UTF-8 UTF-8' | sed '1,4d' | sed 's/\(.\{1\}\)//')"
locale=$(dialog --backtitle "$titulo" --clear --title "| Selecciona tu país |" \
--menu "\nEjemplos:\nes_PE = Perú\nes_AR = Argentina\nes_MX = Mexico" 25 0 20 ${locales} 2>&1 > /dev/tty)

;;
## FIN DE LANGUAGE



"4") #SH
SH=""
cmd=(dialog --no-collapse --cr-wrap --title "-| SHELL del Sistema |-" --backtitle "$titulo" \
--no-tags --ok-label '< Siguiente >' --nocancel --menu "\nSeleccione\n " 15 70 20)
options=(1 "zsh"   
         2 "bash"
         3 "dash"
         4 "fish"
         5 "mksh"
         6 "tcsh")
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            SH="zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions"
            ;;

        2)
            SH="bash bash-completion"
            ;;
        3)
            SH="dash";;
            
        4)
            SH="fish";;
            
        5)
            SH="mksh";;
            
        6)
            SH="tcsh";;
                                                
    esac
done
#FIN_SH
;;




"5")
## INICIO DE DISK 

#Desmontamos todo disco y swapoff
swapdisco=$( fdisk -l | grep "/dev/\|swap" | grep swap | awk -F ' ' '{print $1}' )
umount -R /mnt
swapoff ${swapdisco}
swapoff -a
swapon -a

rm /mnt/etc/fstab 

dialog --backtitle "$titulo" --title "-| Mensaje |-" --msgbox "\n> UEFI trabaja con discos en GPT \n\n> UEFI su partición boot es formateada en FAT32 \n\n> BIOS LEGACY trabaja con discos en DOS/MBR\n\n> BIOS LEGACY su partición boot es formateada en EXT4\n( La partición boot en linux es opcional )" 13 60




dialog --backtitle "$titulo" --title "-| Particionado de Disco |-" --yesno "\n    ¿ Desea particionar su disco de manera automatica ?\n \nPresione Si - Automatico (Borrado y creado automatico)\nPresione No - Manera Manual" 9 62
case $? in
   0) #Inicio de automatico
part="$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}' | sed '/sr/d')" 
disk=$(dialog --backtitle "$titulo" --clear  --ok-label 'Seleccionar' --no-cancel --menu "Selecciona el disco para Linux" 10 50 0 ${part} 2>&1 >/dev/tty)


uefi=$( ls /sys/firmware/efi/ | grep -ic efivars )

#swapsize=$( free -m | grep "Mem" | awk '{ print $2 }' )
#swapsize=$(( ( swapsize / 2000 ) + 1 ))

if [ $uefi == 1 ]
then
    
#DIALOG PARA YES Y NO CASOS
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Memoria SWAP |-" --yesno "\n ¿ Deseas agregar RAM Virtual ?" 7 35

case $? in
   0) mem_total=$(free --giga | awk '/^Mem:/{print $2}')
swapsize=$(dialog --no-cancel --backtitle "$titulo" --title "-| Memoria SWAP |-" \
--form "\nIngresa la cantidad de Memoria Virtual\n\nGigabytes (G) - Megabytes (M) - Kibibyte (K)\n\n> No dejar espacios al inicio\n> No olvidar su etiqueta al final del número\n> [Tabulador] para cambiar opciones\n" 0 0 0 \
" Memoria SWAP:" 1 1 "${mem_total}G" 1 17 25 30 2>&1 > /dev/tty)
        
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - UEFI |-" --stdout --ok-label "Siguiente" \
--prgbox "sgdisk --zap-all ${disk} && parted ${disk} mklabel gpt && \
sgdisk ${disk} -n=1:0:+1G -t=1:ef00 && \
sgdisk ${disk} -n=2:0:+${swapsize} -t=2:8200 && \
sgdisk ${disk} -n=3:0:0 && \
fdisk -l ${disk} > /tmp/partitions && \
cat /tmp/partitions" 13 100


partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"

echo $partitions | awk -F ' ' '{print $1}' >  boot-efi
echo $partitions | awk -F ' ' '{print $2}' >  swap-efi
echo $partitions | awk -F ' ' '{print $3}' >  root-efi

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - UEFI |-" --stdout --ok-label "Siguiente" \
--prgbox "mkfs.ext4 $(cat root-efi) && \
mount $(cat root-efi) /mnt && \
mkfs.fat -F 32 $(cat boot-efi) && \
mkdir -p /mnt/efi && \
mount $(cat boot-efi) /mnt/efi && \
mkswap $(cat swap-efi) && \
swapon $(cat swap-efi)" 20 150
;;


   1) dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - UEFI |-" --stdout --ok-label "Siguiente" \
--prgbox "sgdisk --zap-all ${disk} && parted ${disk} mklabel gpt && \
sgdisk ${disk} -n=1:0:+1G -t=1:ef00 && \
sgdisk ${disk} -n=2:0:0 && \
fdisk -l ${disk} > /tmp/partitions && \
cat /tmp/partitions" 13 100


partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"

echo $partitions | awk -F ' ' '{print $1}' >  boot-efi
echo $partitions | awk -F ' ' '{print $2}' >  root-efi

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - UEFI |-" --stdout --ok-label "Siguiente" \
--prgbox "mkfs.ext4 $(cat root-efi) && \
mount $(cat root-efi) /mnt && \
mkfs.fat -F 32 $(cat boot-efi) && \
mkdir -p /mnt/efi && \
mount $(cat boot-efi) /mnt/efi" 20 150
;;


   255) echo "[ESC] Salir."
        exit
        ;;
esac


else

#DIALOG PARA YES Y NO CASOS
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Memoria SWAP |-" --yesno "\n ¿ Deseas agregar RAM Virtual ?" 7 35

case $? in
   0) mem_total=$(free --giga | awk '/^Mem:/{print $2}')
swapsize=$(dialog --no-cancel --backtitle "$titulo" --title "-| Memoria SWAP |-" \
--form "\nIngresa la cantidad de Memoria Virtual\n\nGigabytes (G) - Megabytes (M) - Kibibyte (K)\n\n> No dejar espacios al inicio\n> No olvidar su etiqueta al final del número\n> [Tabulador] para cambiar opciones\n" 0 0 0 \
" Memoria SWAP:" 1 1 "${mem_total}G" 1 17 25 30 2>&1 > /dev/tty)
        
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - BIOS LEGACY |-" --stdout --ok-label "Siguiente" \
--prgbox "sgdisk --zap-all ${disk} && \
(echo o; echo n; echo p; echo 1; echo ""; echo +250M; echo n; echo p; echo 2; echo ""; echo +${swapsize}; echo n; echo p; echo 3; echo ""; echo ""; echo t; echo 2; echo 82; echo a; echo 1; echo w; echo q) | fdisk ${disk} && \
fdisk -l ${disk} > /tmp/partitions && \
cat /tmp/partitions" 13 100


partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"

echo $partitions | awk -F ' ' '{print $1}' >  boot-boot
echo $partitions | awk -F ' ' '{print $2}' >  swap-boot
echo $partitions | awk -F ' ' '{print $3}' >  root-boot

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - BIOS LEGACY |-" --stdout --ok-label "Siguiente" \
--prgbox "mkfs.ext4 $(cat root-boot) && \
mount $(cat root-boot) /mnt && \
mkfs.ext4 $(cat boot-boot) && \
mkdir -p /mnt/boot && \
mount $(cat boot-boot) /mnt/boot && \
mkswap $(cat swap-boot) && \
swapon $(cat swap-boot)" 20 150
;;


   1) dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - BIOS LEGACY |-" --stdout --ok-label "Siguiente" \
--prgbox "sgdisk --zap-all ${disk} && \
(echo o; echo n; echo p; echo 1; echo ""; echo +250M; echo n; echo p; echo 2; echo ""; echo ""; echo a; echo 1; echo w; echo q) | fdisk ${disk} && \
fdisk -l ${disk} > /tmp/partitions && \
cat /tmp/partitions" 13 100


partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"

echo $partitions | awk -F ' ' '{print $1}' >  boot-boot
echo $partitions | awk -F ' ' '{print $2}' >  root-boot

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - BIOS LEGACY |-" --stdout --ok-label "Siguiente" \
--prgbox "mkfs.ext4 $(cat root-boot) && \
mount $(cat root-boot) /mnt && \
mkfs.ext4 $(cat boot-boot) && \
mkdir -p /mnt/boot && \
mount $(cat boot-boot) /mnt/boot" 20 150
;;


   255) echo "[ESC] Salir."
        exit
        ;;
esac


fi
;;
    
   1) #--title "| Selección de Disco |"
part="$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}' | sed '/sr/d')" 
disk=$(dialog --backtitle "$titulo" --clear  --ok-label 'Seleccionar' --no-cancel --menu "Selecciona el disco para Linux" 10 50 0 ${part} 2>&1 >/dev/tty)

fdisk -l $disk > /tmp/partitions


#SISTEMA UEFI O BIOS
uefi=$( parted $disk print | grep -ic gpt )

if [ $uefi == 1 ] && [ -d /sys/firmware/efi ]
then
dialog --backtitle "|  SISTEMA UEFI Y DISCO GPT  |" --title "-|  SISTEMA UEFI |-"  --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && cat /tmp/partitions | grep gpt && echo "Su disco SI es compatible para continuar" && echo "" && cat /tmp/partitions | grep /dev/ )" 12 150


elif [ $uefi == 0 ] && [ -d /sys/firmware/efi ]
then
dialog --backtitle "| SISTEMA UEFI Y DISCO DOS MBR |" --title "|  UEFI TRABAJA CON GPT |" \
--yesno "\nUsted inicio la USB en sistema UEFI y su disco es DOS MBR\nConvertir su disco DOS/MBR a GPT\n\nAl convertir su disco perderá toda su información \
\nSi tiene otras particiones en el Disco\nNo realice la conversión \n\n¿Desea convertir su disco DOS/MBR a GPT?" 13 65
case $? in 
  0)dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "| Convertir Disco |" --stdout --ok-label "Siguiente" \
  --prgbox "echo '' && echo '' && echo '' && sgdisk --zap-all $disk && parted $disk mklabel gpt" 10 80;;
  
  1)exit
esac

elif [ $uefi == 0 ]
then
dialog --backtitle "|  SISTEMA BIOS LEGACY Y DISCO DOS MBR  |" --title "| SISTEMA BIOS LEGACY |"  --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && cat /tmp/partitions | grep dos && echo "Su disco SI es compatible para continuar" && echo "" && cat /tmp/partitions | grep /dev/ )" 12 150

else  
dialog --backtitle "| SISTEMA BIOS LEGACY Y DISCO GPT |" --title "|  BIOS LEGACY TRABAJA CON DOS MBR |" \
--yesno "\nUsted inicio la USB en sistema UEFI y su disco es DOS MBR\nConvertir su disco GPT a DOS/MBR\n\nAl convertir su disco perderá toda su información \
\nSi tiene otras particiones en el Disco\nNo realice la conversión \n\n¿Desea convertir su disco DOS/MBR a GPT?" 13 65
case $? in 
  0)dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "| Convertir Disco |" --stdout --ok-label "Siguiente" \
  --prgbox "echo '' && echo '' && echo '' && sgdisk --zap-all $disk && parted $disk mklabel msdos" 10 80;;
  1)exit
esac
fi

#FIN DE CONVERSION DE DISCO

partitioner=$(dialog --backtitle "$titulo" --clear --title "-| Particionado de Disco |-" --ok-label 'Seleccionar' --no-cancel --menu ">\n> Crear particiones correctamente\n>" 9 0 0\
    "cfdisk" "Un particionador casi grafico" \
    "fdisk" "Un particionador de linea de comandos" \
    "parted" "Un particionador de linea de comandos" 2>&1 > /dev/tty)
$partitioner $disk

fdisk -l "$disk" > /tmp/partitions

partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1,$5}')"
p="$(echo "$partitions")"
#--title "| Elige la partición de Administrador |"
part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear \
  --menu "Selecciona la partición para Root: [ / ]" 15 60 0 ${p} 2>&1 > /dev/tty)
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Verificando estado de Disco |-" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
rootfs=$part


p=$(echo "$p" | grep -v $part)



partitioning(){
  fs="$(ls /bin/* | grep mkfs | awk '{if (NR!=1) {print}}' | sed 's/^.\{10\}//g' | awk '{print substr($0, 0, length($0)-0)}' | awk '$fs=$fs" Type"' |  awk '{if (NR!=1) {print}}' | grep -v cramfs | grep -v hfsplus | grep -v  bfs | grep -v msdos | grep -v minix)"
  format=$(dialog --backtitle "$titulo" --clear --title '-| FORMATO DE PARTICIÓN |-' \
          --ok-label 'Seleccionar' --cancel-label 'No formatear' --menu "\nElige el tipo de sistema de archivos\n\nEXT4 >> Para Linux\nFAT >> Para FAT32 para la partición UEFI\nNTFS >> Para Windows\n\n$(fdisk -l $disk | grep dos || fdisk -l $disk | grep gpt)" 15 50 0 ${fs} 2>&1 > /dev/tty)      

  case $format in
    ext2) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT2 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext2 -F $part" 20 80;;
      ext3) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT3 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext3 -F $part" 20 80;;
      ext4) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT4 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext4 -F $part" 20 80;;
      reiserfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en ReiserFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.reiserfs -f -f $part" 20 80;;
      vfat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en FAT 32 | Uso General para particiones UEFI... |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.vfat -F32 $part" 7 80;;
      fat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en FAT 32 | Uso General para particiones UEFI... |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.fat -F32 $part" 7 80;;
      exfat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en ExFAT |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.exfat $part" 20 80;;
      ntfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en NTFS - Windows |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ntfs -Q $part" 20 80;;
      f2fs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en F2FS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && modprobe f2fs && mkfs.f2fs $part" 20 80;;
      jfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en JFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.jfs -q $part" 20 80;;
      xfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en XFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.xfs -f $part" 20 80;;
      nilfs2) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en NilFS2 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.nilfs2 -f $part" 20 80;;
      udf) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en UDF |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.udf -F $part" 20 80;;
      btrfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en BTRFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.btrfs -f $part" 20 80;;
  esac
}

partitioning
mount "$rootfs" /mnt

cmd=(dialog --backtitle "$titulo" --separate-output --ok-label 'Montar y formatear selección' --cancel-label 'No tengo más particiones' \--checklist "Selecciona otros puntos de montajes:\n\
[SPACE] para marcar * \n\
[ENTER] para continuar." 10 80 0)
options=("/boot" "Archivos estáticos del cargador de arranque" off   
  "/efi" "Archivos EFI del cargador de arranque" off
  "/home" "Archivos de usuario" off
  "/tmp" "Archivos temporales" off
  "/usr" "Datos estáticos" off
  "/var" "Datos de variables" off
  "/srv" "Datos de los servicios prestados por este sistema" off
  "/opt" "Aplicaciones de terceros o privativos" off
  "swap" "Memoria virtual RAM" off
  )
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
  case $choice in
    "/boot")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: boot |" 0 55 0 ${p} 2>&1 > /dev/tty )
      bootfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      bootdir="boot"
      mkdir -p /mnt/boot
      mount "$bootfs" /mnt/boot
      p=$(echo "$p" | grep -v "$part")
      ;;
      
    "/efi")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: efi |" 0 55 0 ${p} 2>&1 > /dev/tty )
      efifs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      efidir="efi"
      mkdir -p /mnt/efi
      mount "$efifs" /mnt/efi
      p=$(echo "$p" | grep -v "$part")
      ;;
        
    "/home")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: home |" 0 55 0 ${p} 2>&1 > /dev/tty )
      homefs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      homedir="home"
      mkdir -p /mnt/home
      mount "$homefs" /mnt/home
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/tmp")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: tmp |" 0 55 0 ${p} 2>&1 > /dev/tty )
      tmpfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      tmpdir="tmp"
      mkdir -p /mnt/tmp
      mount "$tmpfs" /mnt/tmp
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/usr")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: usr |" 0 55 0 ${p} 2>&1 > /dev/tty )
      usrfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      usrdir="usr"
      mkdir -p /mnt/usr
      mount "$usrfs" /mnt/usr
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/var")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: var |" 0 55 0 ${p} 2>&1 > /dev/tty )
      varfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      vardir="var"
      mkdir -p /mnt/var
      mount "$varfs" /mnt/var
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/srv")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: srv |" 0 55 0 ${p} 2>&1 > /dev/tty )
      srvfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      srvdir="srv"
      mkdir -p /mnt/srv
      mount "$srvfs" /mnt/srv
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/opt")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: opt |" 0 55 0 ${p} 2>&1 > /dev/tty )
      optfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      optdir="opt"
      mkdir -p /mnt/opt
      mount "$optfs" /mnt/opt
      p=$(echo "$p" | grep -v "$part")
      ;;
    "swap")
#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: swap |" 0 55 0 ${p} 2>&1 > /dev/tty)
      dialog --title "| Formateando Swap Linux |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkswap $part && swapon $part" 10 100
      swap="$part"
      p=$(echo "$p" | grep -v "$part")
  esac
done
#PARTICIONADO MANUAL
    ;;
esac    

clear
partprobe
clear
;;
## FIN DE DISK



"6")
## INICIO DE KERNEL 
### KERNEL 
selecLinuxStable=false
selecLinuxHard=false
selecLinuxLts=false
selecLinuxZen=false

microdriverS=false
wifidriverS=false
wifidriverdmksS=false
touchdriverS=false
blutudriverS=false

selec8168=false
selec8168lts=false

kernel_var=0 
while [ "$kernel_var" = "0" ] ; do

  kernel_select=`dialog --title "| KERNEL LINUX |" --backtitle "$titulo" \
    --stdout --ok-label "Seleccionar" --no-cancel --menu "Elige que kernel necesitas: \nLinux Stable es la mejor opción para iniciar\nLas otras opciones tienen un estilo diferente para instalar Drivers\nLas otras modificaciones del kernel trabajan con Drivers Libres" 16 0 2000 linux-stable "Kernel en su versión estable y módulos de Vanilla Linux" linux-hardened "Kernel enfocado en Seguridad" linux-lts "Kernel con soporte de larga duración" linux-zen "Kernel del esfuerzo colaborativo de varios hackers"`

#####Stable  
  if [ $kernel_select == linux-stable ]; then
##################################################################################
    r8168=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'RTL8111/8168/8411' ")
    if [[ $r8168  = *RTL8111/8168/8411* || $r8168 = *Rtl8111/8168/8411* || $r8168 = *rtl8111/8168/8411* ]]
    then      
    selec8168=true
    install8169=r8168
    fi

cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --title "-| Extras Kernel |-" --checklist "Selecciona los modulos que necesitas\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 10)
options=(1 "Microcode del Procesador" on    # any option can be set to default to "on"
         2 "Driver para WiFi" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) microdriverS=true
        ;; 
        2) wifidriverS=true
        ;; 
        3) touchdriverS=true
        ;;
        4) blutudriverS=true
        ;;
    esac
done

  selecLinuxStable=true
  kernel_var=1


#####hardened
  elif [ $kernel_select == linux-hardened ]; then

cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --title "-| Extras Kernel |-" --checklist "Selecciona los modulos que necesitas\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 10)
options=(1 "Microcode del Procesador" on    # any option can be set to default to "on"
         2 "Driver para WiFi" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) microdriverS=true
        ;; 
        2) wifidriverdmksS=true
        ;; 
        3) touchdriverS=true
        ;;
        4) blutudriverS=true
        ;;
    esac
done

  selecLinuxHard=true
  kernel_var=1



######LTS
  elif [ $kernel_select == linux-lts ]; then
##################################################################################
    r8168=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'RTL8111/8168/8411' ")
    if [[ $r8168  = *RTL8111/8168/8411* || $r8168 = *Rtl8111/8168/8411* || $r8168 = *rtl8111/8168/8411* ]]
    then      
    selec8168lts=true
    install8169=r8168-lts
    fi
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --title "-| Extras Kernel |-" --checklist "Selecciona los modulos que necesitas\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 10)
options=(1 "Microcode del Procesador" on    # any option can be set to default to "on"
         2 "Driver para WiFi" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) microdriverS=true
        ;; 
        2) wifidriverdmksS=true
        ;; 
        3) touchdriverS=true
        ;;
        4) blutudriverS=true
        ;;
    esac
done
  
  selecLinuxLts=true
  kernel_var=1  


###### ZEN
  elif [ $kernel_select == linux-zen ]; then
##################################################################################

cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --title "-| Extras Kernel |-" --checklist "Selecciona los modulos que necesitas\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 10)
options=(1 "Microcode del Procesador" on    # any option can be set to default to "on"
         2 "Driver para WiFi" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) microdriverS=true
        ;; 
        2) wifidriverdmksS=true
        ;; 
        3) touchdriverS=true
        ;;
        4) blutudriverS=true
        ;;
    esac
done
   
  selecLinuxZen=true
  kernel_var=1
  
  
  fi
done

;;
### FIN KERNEL 



"7")
## INICIO DE DRIVER VIDEO
# MENSAJE 
dialog --backtitle "$titulo" \
--title "| Información |" \
--msgbox "\n> Si esta usando Maquina virtual la selección de Driver de Video es: \
\n  [Automatico] \n \
\n> Si esta usando Hardware real tiene dos opciones para seleccionar: \
\n  [Automatico] o [Manual] \n" 11 75

#Inicio de Video
virt=""
GPU=""
VM=false
VMbox=false
VMqemu=false

infovideo () {
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "_"
echo -e ""
echo -e "\t\t\t         | Info Hardware de Video |          "
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
lspci -v | grep "VGA compatible controller" -A 9
echo ""
echo "Presiona [ENTER] para confirmar..."
read line
}


    ####################################################################
      
    case $(systemd-detect-virt) in
        oracle)
            virt="vbox"
            VM=true
        ;;
        vmware)
            virt="vmware"
            VM=true
        ;;
        qemu)
            virt="qemu"
            VM=true
        ;;
        kvm)
            virt="kvm"
            VM=true
        ;;
        microsoft)
            virt="hyper-v"
            VM=true
        ;;
        xen)
            virt="xen"
            VM=true
        ;;
    esac
    
    ####################################################################

VMbox=false
if [ "$VM" == "true" ]; then
    
            infovideo
            case "$virt" in
                
                vbox)   dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado Virtual Box" 8 80
                        VMbox=true
                        
                ;;
                
                vmware) GPU="xf86-video-vmware xf86-input-vmmouse open-vm-tools net-tools gtkmm mesa mesa-libgl"
                        dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VMware\nInstalar: $GPU" 8 80
                ;;
                
                
                hyper-v) GPU="xf86-video-fbdev mesa-libgl"
                         dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado hyper-v\nInstalar: $GPU" 8 80                         
                ;;
                
                
                qemu) GPU="xf86-video-fbdev mesa mesa-libgl qemu-guest-agent"
                      GPUvirt="qemu-guest-agent"
                      echo $GPUvirt > GPUvirt
                      VMqemu=true
                      dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado Qemu\nInstalar: $GPU" 8 80                   
                ;;

                kvm)  GPU="xf86-video-fbdev mesa mesa-libgl qemu-guest-agent"
                      GPUvirt="qemu-guest-agent"
                      echo $GPUvirt > GPUvirt
                      VMqemu=true
                      dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado Qemu\nInstalar: $GPU" 8 80                   
                ;;
                
                
                *)    GPU="xf86-video-fbdev mesa-libgl"
                      dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado MESA\nInstalar: $GPU" 8 80 
                ;;
                
            esac

            
else

dialog --title "-| Driver de Vídeo |-" --yesno "\n¿ Desea instalar de manera automatica su driver de vídeo ? \nPresione Si - Automatico \nPresione No - Manera Manual" 9 62
case $? in
   0) infovideo

if (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
    
GPU="xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver \
lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd \
lib32-ocl-icd opencl-headers"

dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            

        elif (lspci | grep VGA | grep "Radeon R\|R2/R3/R4/R5" &>/dev/null); then
            
GPU="xf86-video-amdgpu mesa lib32-mesa vulkan-radeon \
lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau \
lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80

        elif (lspci | grep VGA | grep "ATI\|AMD/ATI" &>/dev/null); then
                    
GPU="xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver \
lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80

        elif (lspci | grep VGA | grep "Intel" &>/dev/null); then
            
GPU="xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver \
libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
                
        else
            
GPU="xf86-video-vesa mesa lib32-mesa"
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            
        fi
;;
   1) infovideo

GPUHYBR=false

cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Driver de Vídeo |-"  --column-separator "|" --no-tags --ok-label "< Seleccionar >" \
    --nocancel --menu "Seleciona el driver correcto:" 20 76 16)

options=(1 "Nvidia 440xx|(Linux Stable)"
         2 "Nvidia 390xx|(Linux Stable)"
         3 "Nvidia 340xx|(Linux Stable)"
         4 "Nvidia 440xx|(Linux Stable + Intel)"
         5 "Nvidia 390xx|(Linux Stable + Intel) No hybrid"
         6 "Nvidia 440xx|(Linux LTS)"
         7 "Nvidia 390xx|(Linux LTS)"
         8 "Nvidia 440xx|(Linux Hardened - Zen)"
         9 "Nvidia 390xx|(Linux Hardened - Zen)"
         10 "Nvidia|(Open Source)"
         11 "AMD - Radeon|(Open Source)"
         12 "AMD - ATI|(Open Source)"
         13 "Intel|(Open Source)")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1)
            GPU="nvidia nvidia-settings nvidia-utils lib32-nvidia-utils libva-utils \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
            
        2)
            GPU="nvidia-390xx nvidia-390xx-utils \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            #libxnvctrl-390xx
            #nvidia-390xx-settings
            ;;
        
        3)
            GPU="nvidia-340xx nvidia-340xx-utils \
            lib32-nvidia-340xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-340xx lib32-opencl-nvidia-340xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            #libxnvctrl-340xx
            #nvidia-340xx-settings
            ;;
        
        4)
            GPU="nvidia nvidia-settings nvidia-utils lib32-nvidia-utils libva-utils xf86-video-intel optimus-manager bbswitch optimus-manager-qt \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            GPUHYBR=true
            ;;
            
        5)
            GPU="nvidia-390xx nvidia-390xx-utils xf86-video-intel optimus-manager bbswitch optimus-manager-qt \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            GPUHYBR=true
            ;;
        
        6)
            GPU="nvidia-lts nvidia-settings nvidia-utils lib32-nvidia-utils libva-utils \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        
        7)
            GPU="nvidia-390xx-lts nvidia-390xx-utils \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        
        
        8)
            GPU="nvidia-dkms nvidia-utils lib32-nvidia-utils libva-utils \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        
        9)
            GPU="nvidia-390xx-dkms nvidia-390xx-utils \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;        
            
        10)
            GPU="xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver \
            lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
            libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        11)
            GPU="xf86-video-amdgpu mesa lib32-mesa vulkan-radeon \
            lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau \
            lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
            opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        12)
            GPU="xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver \
            lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
            libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
            
        13)
            GPU="xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver \
            libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
            intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
    esac
done
;;



   255) echo "Presiono la tecla [ESC]"
;;
esac

    
fi
;;
## FIN DE DRIVER VIDEO


"8")
## INICIO DE (DE) or (WM)

DE=""
DM=""
WM=""
seleccionDE=false
seleccionWM=false
seleccionXORG=false
finalInstall=false
gnomebeta=false

cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Selecciona tu (DE) o (WM) a instalar" 12 50 12)

options=(1 "Entorno de escritorio | (DE)"
         2 "Gestor de ventanas | (WM)"
         3 "Solo Servidor X | Xorg"
         4 "Emulador de Terminal")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1) #INICIO (DE)    

seleccionDE=true

cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --column-separator "|" --no-tags --ok-label '< Seleccionar >' --menu "Selecciona tu escritorio a instalar - (DE)" 22 60 19)

options=(1 " > | xfce4 | Xfce desktop| <"
         2 " > | plasma | KDE Plasma desktop| <"
         3 " > | deepin | Deepin desktop| <"
         4 " > | gnome | GNOME Classic desktop| <"
         5 " > | gnome-flashback | GNOME 2 desktop| <"
         6 " > | cinnamon | Cinnamon desktop| <"
         7 " > | budgie-desktop | Descarga: 415MB - Budgie desktop| <"
         8 " > | enlightenment | Enlightenment desktop| <"
         9 " > | lxde-gtk3| The Lightweight X11 desktop| <"
         10 " > | lxde | The Lightweight X11 GTK2| <"
         11 " > | lxqt | LXDE-Qt y Razor-qt projects| <"
         12 " > | mate | Mate GTK3 desktop| <"
         13 " > | ukui | En Prueba| <"
         14 " > | liri | AUR - Compilación| <"
         15 " > | lumina | AUR - Compilación| <")
         #16 " > | Pantheon | Desktop| <")  GTK and Qt

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        
###########SELECCION (DE)
        1) #XFCE4

#cp -rf xfce4/.config/* /root/.config/
#chmod +777 xfce4
#chown -hR $nombre_usuario:users /home/$nombre_usuario/.config

#zip -r xfce4.zip .config

xfce4tema=false

cmd=(dialog --keep-tite --backtitle "$titulo" \
--no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Decide en instalar o personalizar las opciones\n\n\
Selecciona una opción para XFCE4 \n" 12 60 19)

options=(1 "Xfce4 ArcriS || Con tema Personalizado"
         2 "Xfce4 || Sistema Completo"
         3 "Xfce4 || Minimalista")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in

        1)  DE="xfce4 xfce4-goodies network-manager-applet alacarte papirus-icon-theme deepin-icon-theme sierra-gtk-theme-git gnu-free-fonts gnome-font-viewer tumbler ffmpegthumbs ffmpegthumbnailer freetype2 poppler-glib libgsf raw-thumbnailer mugshot"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo lightdm > DMservice
            xfce4tema=true
            ;;
            
        2)  DE="xfce4 xfce4-goodies network-manager-applet alacarte ttf-hack ttf-inconsolata gnome-font-viewer tumbler ffmpegthumbs ffmpegthumbnailer freetype2 poppler-glib libgsf raw-thumbnailer"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo lightdm > DMservice
            ;;
            
        3)  DE="xfce4 network-manager-applet"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo lightdm > DMservice
            ;;
    esac
done
######FINAL XFCE4
            ;;

        2)  #KDE
            cmd=(dialog --keep-tite --backtitle "$titulo" \
--no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "          Selecciona una opción para Plasma KDE \n" 10 60 19)

options=(1 "KDE Plasma || Tema ArcriS"
         2 "KDE Plasma || Completo de Apps"
         3 "KDE Plasma || Minimalista")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        
        1)  DE="plasma dolphin kate kdialog kfind khelpcenter konqueror kwrite vlc konsole flameshot appmenu-gtk-module libdbusmenu-glib libdbusmenu-gtk3 libdbusmenu-gtk2 deepin-icon-theme discover packagekit-qt5 colord-kde kscreen powerdevil kdegraphics-thumbnailers ffmpegthumbs ffmpegthumbnailer freetype2 poppler-glib libgsf raw-thumbnailer user-manager kdeconnect"
            DM="sddm libxcb qt5-virtualkeyboard"
            clear
            echo ""
            echo " > Detalles de programas a instalar en DE: "
            echo ""
            echo $DE
            echo ""
            echo " > Detalles de programas a instalar en DM: "
            echo ""
            echo $DM
            echo ""
            echo "Presiona ENTER para Continuar..."
            read line
            echo sddm > DMservice
            plasmatema=true
            ;;
            
        
        2)  DE="plasma kde-applications konsole konqueror dolphin discover latte-dock bluedevil kate kdialog keditbookmarks kwrite appmenu-gtk-module libdbusmenu-glib libdbusmenu-gtk3 libdbusmenu-gtk2 kfind khelpcenter kscreen powerdevil kdeconnect kdegraphics-thumbnailers ffmpegthumbs ffmpegthumbnailer raw-thumbnailer freetype2 libgsf"
            DM="sddm libxcb qt5-virtualkeyboard"
            clear
            echo ""
            echo " > Detalles de programas a instalar en DE: "
            echo ""
            echo $DE
            echo ""
            echo " > Detalles de programas a instalar en DM: "
            echo ""
            echo $DM
            echo ""
            echo "Presiona ENTER para Continuar..."
            read line
            echo sddm > DMservice
            ;;

        3)  DE="plasma dolphin konsole discover"
            DM="sddm libxcb qt5-virtualkeyboard"
            clear
            echo ""
            echo " > Detalles de programas a instalar en DE: "
            echo ""
            echo $DE
            echo ""
            echo " > Detalles de programas a instalar en DM: ".
            echo ""
            echo $DM
            echo ""
            echo "Presiona ENTER para Continuar..."
            read line

            echo sddm > DMservice
            ;;

    esac
done
######FINAL KDE PLASMA
           ;;


        3) #DEEPIN
            DE="deepin deepin-extra gnu-free-fonts ttf-hack ttf-inconsolata gnome-font-viewer ffmpegthumbs ffmpegthumbnailer freetype2 poppler-glib libgsf raw-thumbnailer"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo lightdm > DMservice            
            ;;
      ######FINAL DEEPIN

        4)  #INICIO GNOME
            cmd=(dialog --keep-tite --backtitle "$titulo" \
            --no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Selecciona una opción para GNOME \n\n" 10 60 19)

            options=(1 "Gnome || Completo de Apps"
                     2 "Gnome || Minimalista"
                     3 "Gnome || Gnome40 - BETA")

            choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

            for choice in $choices
            do
                case $choice in

                    1)  DE="gnome gnome-extra gnome-shell gnome-shell-extensions chrome-gnome-shell  webp-pixbuf-loader gnome-tweaks tumbler ffmpegthumbs ffmpegthumbnailer freetype2 poppler-glib libgsf raw-thumbnailer"
                        DM="gdm"
                        echo gdm > DMservice
                        ;;
                        
                    2)  DE="gnome-shell gdm gnome-control-center gnome-tweaks gnome-terminal"
                        DM="gdm"
                        echo gdm > DMservice
                        ;;
                    
                    3)  gnomebeta=true
                        ;;
                esac
            done
            ;;
        
        5)  #INICIO GNOME flashback
            #DE="gnome-flashback gnome-tweaks gnome-applets sensors-applet gnome-shell"
            DE="gnome-flashback gnome-shell gnome-terminal gnome-control-center gnome-tweaks"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo lightdm > DMservice
            ;;
            
        6) #INICIO cinnamon
            DE="cinnamon cinnamon-translations"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "exec cinnamon-session" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;

        7) #INICIO budgie-desktop
            DE="budgie-desktop gnome gnome-tweaks gnome-shell gnome-control-center dconf-editor"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "export XDG_CURRENT_DESKTOP=Budgie:GNOME\nexec budgie-desktop" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;

        8)  DE="enlightenment entrance-git terminology network-manager-applet eluminance-git stalonetray"
            echo -e "exec enlightenment_start" > /home/$nombre_usuario/.xinitrc
            echo entrance > DMservice
            ;;
            
        9) #INICIO lxde-gtk3
            DE="lxde-gtk3 lxde-common lxsession openbox lxmed"
            DM="lxdm-gtk3"
            echo -e "exec startlxde" > /home/$nombre_usuario/.xinitrc
            echo lxdm > DMservice
            ;;
            
        10) #INICIO lxde
            DE="lxde lxde-common lxsession openbox lxmed"
            DM="lxdm"
            echo -e "exec startlxde" > /home/$nombre_usuario/.xinitrc
            echo lxdm > DMservice
            ;;
            
        11) #INICIO lxqt
            DE="lxqt breeze-icons oxygen-icons lxqt-connman-applet slock xdg-utils-slock"
            DM="sddm sddm-config-editor-git qt5-virtualkeyboard libxcb"
            echo -e "exec startlxqt" > /home/$nombre_usuario/.xinitrc
            echo sddm > DMservice
            ;;
        
        12) #INICIO mate
            DE="mate mate-extra mate-media mate-menu brisk-menu marco mate-themes libcanberra-pulse mate-panel mate-session-manager mate-screensaver mate-applet-dock mate-applet-streamer mate-power-manager network-manager-applet system-config-printer eom engrampa"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "exec mate-session" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;
        
        13) #INICIO UKUI 
            DE="ukui cmake network-manager-applet"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo lightdm > DMservice
            ;;
        14) #INICIO Liri
            DE="cmake qt5-base liri-git-meta network-manager-applet"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "exec liri-session" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            lirisesion=true
            ;;
        15) #INICIO lumina
            DE="cmake qt5-base lumina-desktop network-manager-applet"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "exec start-lumina-desktop" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;
        16) #INICIO Pantheon
            DE="onboard orca cmake pantheon pantheon-files pantheon-terminal gnome-session gnome-control-center switchboard pantheon-applications-menu wingpanel-indicator-session wingpanel-indicator-datetime wingpanel gtk-theme-elementary contractor file-roller dconf-editor  "
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings  lightdm-pantheon-greeter light-locker accountsservice"
            echo -e "exec cerbere" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;

    esac
done
#FIN ESCRITORIO
            ;;
        2) #INICIO (WM)

i3tema=false
seleccionWM=true
qtile_config=false
bspwmtema=false
awesome_config=false

cmd=(dialog --keep-tite --backtitle "$titulo" \
--no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --menu "Selecciona tu gestor de ventana a instalar - (WM)" 20 55 16)

options=(1 "> i3wm | 150MB de RAM "
         2 "> qtile | Disponible <"
         3 "> dwm | Disponible <"
         4 "> Bspwm | Disponible <"
         5 "> sway | Disponible <"
         6 "> Awesome | Disponible <")
         #4 "> fluxbox | Aún no disponible <"
         #5 "> openbox | Aún no disponible <"
         #6 "> blackbox | Aún no disponible <"
         #7 "> Bspwm | Aún no disponible <"
         #8 "> awesome | Aún no disponible <"
         #9 "> cwm | Aún no disponible <"
         #10 "> catwm | Aún no disponible <"
         #11 "> 2bwm | Aún no disponible <"
         #12 "> xmonad | Aún no disponible <")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1)  # zip -r i3.zip .config

            cmd=(dialog --keep-tite --backtitle "$titulo" \
            --no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Cualquier elección trae por defecto:\n> i3-gaps i3blocks i3lock dmenu ly-git rxvt \n\nSelecciona una opción para i3wm \n" 14  73 19)

            options=(1 "Predeterminado || Con Tema || i3-gaps + i3status"
                     2 "Predeterminado || Con Tema || i3-gaps + bumblebee-status"
                     3 "Escritorio vacio || Sin Tema || Incluye todo lo minimo para i3wm")

            choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

            for choice in $choices
            do
                case $choice in
                    
                    1)  i3wm="i3-gaps i3blocks i3lock i3status dmenu rofi rxvt-unicode"
                        i3wm1="tumbler ffmpegthumbs ffmpegthumbnailer raw-thumbnailer freetype2"
                        i3wm2="network-manager-applet polkit-gnome gnome-keyring lxappearance"
                        i3wm3="ttf-hack gnu-free-fonts awesome-terminal-fonts"
                        i3wm4="papirus-icon-theme gnome-themes-extra"
                        i3wm5="thunar alacritty feh xclip maim"
                        i3wm6="tk compton-tryone-git i3lock-fancy-git"
                        WM="$i3wm $i3wm1 $i3wm2 $i3wm3 $i3wm4 $i3wm5 $i3wm6"
                        DM="ly-git"
                        echo ly > DMservice
                        i3tema1=true
                        # twmn deepin-screenshot-copy-patch xclip
                        ;;


                    2)  i3wm="i3-gaps i3blocks i3lock dmenu rofi rxvt-unicode"
                        i3wm1="tumbler ffmpegthumbs ffmpegthumbnailer raw-thumbnailer freetype2"
                        i3wm2="network-manager-applet polkit-gnome gnome-keyring lxappearance"
                        i3wm3="ttf-hack gnu-free-fonts awesome-terminal-fonts"
                        i3wm4="papirus-icon-theme gnome-themes-extra"
                        i3wm5="thunar alacritty feh xclip maim"
                        i3wm6="bumblebee-status tk compton-tryone-git i3lock-fancy-git"
                        WM="$i3wm $i3wm1 $i3wm2 $i3wm3 $i3wm4 $i3wm5 $i3wm6"
                        DM="ly-git"
                        echo ly > DMservice
                        i3tema2=true
                        # twmn deepin-screenshot-copy-patch xclip
                        ;;
                        
                        
                    3)  WM="i3-gaps i3blocks i3lock i3status dmenu ly-git rxvt-unicode gnome-themes-extra"
                        DM="ly-git"
                        echo ly > DMservice
                        ;;
                        
                esac
            done
            ;;

        2)
            WM="qtile python python2 thunar alacritty network-manager-applet polkit-gnome gnome-keyring lxappearance ly-git rxvt-unicode gnome-themes-extra"
            DM="ly-git"
            echo ly > DMservice
            qtile_config=true
            ;;
        3)
            WM="dwm-git dmenu st thunar network-manager-applet polkit-gnome gnome-keyring lxappearance ly-git rxvt-unicode gnome-themes-extra"
            DM="ly-git"
            echo ly > DMservice
            ;;
        4)  ## INICIO DE BSPWM
            cmd=(dialog --keep-tite --backtitle "$titulo" \
--no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "          Selecciona una opción para BSPWM \n" 09 60 19)

options=(1 "Bspwm || Tema by Darch"
         2 "Bspwm || Limpio")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        
        1)  WM="bspwm sxhkd feh htop rofi st-bydarch network-manager-applet polkit-gnome gnome-keyring rxvt-unicode gnome-themes-extra papirus-icon-theme alsa-plugins alsa-utils ttf-dejavu ttf-liberation ttf-bitstream-vera wmname rofi lxrandr polkit-gnome ueberzug slock fzf neofetch calcurse bc pcmanfm xarchiver lxappearance leafpad nitrogen pavucontrol sxiv blueberry ffmpeg maim xclip xdotool mpv unclutter dunst ranger ttf-joypixels adobe-source-han-sans-jp-fonts adobe-source-han-serif-jp-fonts awesome-terminal-fonts ttf-font-awesome gtk3-nocsd-git ttf-meslo-nerd-font-powerlevel10k picom-ibhagwan-git polybar-git fzf-extras"
            DM="ly-git"
            echo ly > DMservice
            bspwmtema=true
            clear
            echo ""
            echo " > Detalles de programas a instalar en WM: "
            echo ""
            echo $WM
            echo ""
            echo " > Detalles de programas a instalar en DM: "
            echo ""
            echo $DM
            echo ""
            echo "Presiona ENTER para Continuar..."
            read line
            ;;
            
        
        2)  WM="bspwm sxhkd rofi dmenu st thunar network-manager-applet polkit-gnome gnome-keyring lxappearance ly-git rxvt-unicode gnome-themes-extra"
            DM="ly-git"
            echo ly > DMservice
            clear
            echo ""
            echo " > Detalles de programas a instalar en WM: "
            echo ""
            echo $WM
            echo ""
            echo " > Detalles de programas a instalar en DM: "
            echo ""
            echo $DM
            echo ""
            echo "Presiona ENTER para Continuar..."
            read line
            ;;

    esac
done
## FINAL DE BSPWM
            ;;
            
        5)
            WM="rxvt-unicode sway i3status swaybar rofi st thunar network-manager-applet polkit-gnome gnome-keyring lxappearance ly-git rxvt-unicode gnome-themes-extra"
            DM="ly-git"
            echo ly > DMservice
            ;;

        6)
            WM="awesome rxvt-unicode rofi st thunar network-manager-applet polkit-gnome gnome-keyring lxappearance ly-git gnome-themes-extra"
            DM="ly-git"
            echo ly > DMservice
            awesome_config=true
            ;;

        7)
            echo "Fourth Option"
            ;;
    esac
done
#FINAL (WM)
            ;;
        3) 
          seleccionXORG=true
          XORG=$"xorg xorg-apps xorg-xinit xorg-twm xterm xf86-input-libinput"
          ;;
    esac
done

finalInstall=true

;;
## FIN DE (DE) or (WM)



"9")
## INICIO DE EXTRA PROGRAMS

        TERMI=""
        UTIL=""
        AUDIO=""
        WEB=""
        REPRO=""
        OFFICE=""
        AP=""
        RS=""
        AUR=""
        AUR_DELETE=""
        programasextrasSI=false
        programasextrasNO=false




dialog --title "-| Programas Extras |-" --yesno "\n¿ Deseas instalar Programas extras en su sistema ?\n\nEsto puede tomar un poco más de tiempo\nTodas las descargas son de repo oficiales y de AUR" 9 55
case $? in
   0) 

#TERMINALES
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "Terminal para tu sistema\n[ ESPACIO ] - Para marcar o desmarcar *" 17 70 20)
options=(1 "lxterminal" on    # any option can be set to default to "on"
         2 "tilix" off
         3 "xfce4-terminal" off
         4 "deepin-terminal" off
         5 "mate-terminal" off
         6 "terminator" off
         7 "sakura" off
         8 "alacritty" off
         9 "kitty" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            TERMI1="lxterminal"
            TERMINAL_condicion=true
            ;;
        2)
            TERMI2="tilix"
            TERMINAL_condicion=true
            ;;
        3)
            TERMI3="xfce4-terminal"
            TERMINAL_condicion=true
            ;;
        4)
            TERMI4="deepin-terminal"
            TERMINAL_condicion=true
            ;;
        
        5)
            TERMI5="mate-terminal"
            TERMINAL_condicion=true
            ;;

        6)
            TERMI6="terminator"
            TERMINAL_condicion=true
            ;;
               
        7)
            TERMI7="sakura"
            TERMINAL_condicion=true
            ;;   
        8)
            TERMI8="alacritty"
            TERMINAL_condicion=true
            ;;   
        9)
            TERMI9="kitty"
            TERMINAL_condicion=true
            ;;   
    esac
done
TERMI=" $TERMI1 $TERMI2 $TERMI3 $TERMI4 $TERMI5 $TERMI6 $TERMI7 $TERMI8 $TERMI9 "
#FINAL DE TERMINALES




#AUDIO
cmd=(dialog --no-collapse --cr-wrap --title "-| Audio del Sistema |-" --backtitle "$titulo"  \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "\nPulseAudio es para el usuario tradicional \
\nJack Audio es para Profesionales sin latencia \
\nAlsa Audio es para terminal sin Interfaz Gráfica\n \
\n[ ESPACIO ] - Para marcar o desmarcar *" 15 70 20)
options=(1 "Pulseaudio + Códecs de audio" on    # any option can be set to default to "on"
         2 "Jack2      + Códecs de audio" off
         3 "ALSA       + Códecs de audio" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            AUDIO1="pulseaudio pulseaudio-alsa pavucontrol pamixer \
            pulseaudio-equalizer lib32-alsa-plugins lib32-libpulse pulseaudio-equalizer-ladspa"
            #https://wiki.archlinux.org/index.php/PulseAudio
            #pulseeffects libcanberra-pulse libcanberra-gstreamer
            ;;
        2)
            AUDIO2="realtime-privileges jack2 lib32-jack2 a2jmidid libffado python-dbus waf pro-audio lv2-plugins ladspa-plugins dssi-plugins vst-plugins"
            #https://wiki.archlinux.org/index.php/Professional_audio
            ;;
        3)
            AUDIO3="alsa-utils alsa-plugins alsa-oss alsa-firmware pamixer"
            #https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture
            ;;
    esac
done
AUDIO=" $AUDIO1 $AUDIO2 $AUDIO3 "

#FIN_AUDIO



#UTILIDADES
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "Utilidades para tu sistema\n[ ESPACIO ] - Para marcar o desmarcar *" 18 70 20)
options=(1 "Lectura y formateo de discos incluido Android" on    # any option can be set to default to "on"
         2 "Compresión y Descompresión de archivos" on
         3 "Códecs de video, lectura de todos los formatos de vídeo" off
         4 "gufw - Firewall de red" off
         5 "hardinfo - Información del sistema y benchmark" off
         6 "gnome-disk-utility - Administrador de Discos" off
         7 "gparted - Administrador de Discos" off
         8 "bluez - Bluetooth" off
         9 "viewnior - Visor de Imagenes" off
         10 "gedit - Editor de Textos GTK" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
1)
UTIL1="android-file-transfer android-tools android-udev msmtp libmtp \
libcddb gvfs gvfs-afc gvfs-smb gvfs-gphoto2 gvfs-mtp gvfs-goa gvfs-nfs gvfs-google gst-libav \
dosfstools f2fs-tools exfat-utils ntfs-3g \
udftools nilfs-utils polkit gpart mtools cifs-utils"
;;
#   jfsutils btrfs-progs xfsprogs reiserfsprogs


2)
UTIL2="xarchiver unarchiver binutils gzip lha lrzip lzip lz4 p7zip tar xz \
bzip2 p7zip lbzip2 arj lzop cpio unrar unzip zstd zip lzip unarj zstd"
;;
3)
UTIL3="ffmpeg aom libde265 x265 x264 libmpeg2 xvidcore libtheora libvpx \
schroedinger sdl gstreamer gst-plugins-bad gst-plugins-base gst-plugins-base-libs \
gst-plugins-good gst-plugins-ugly xine-lib libdvdcss libdvdread dvd+rw-tools lame \
jasper libmng libraw libkdcraw vcdimager"
;;
4)
UTIL4="gufw"
;;

5)
UTIL5="hardinfo"
;;

6)
UTIL6="gnome-disk-utility"
;;

7)
UTIL7="gparted"
;;

8) blutudriverS=true
UTIL8="bluez bluez-utils pulseaudio-bluetooth"
;;

9)
UTIL9="viewnior"
;;   

10)
UTIL10="gedit"
;;   
    esac
done
UTIL="$UTIL1 $UTIL2 $UTIL3 $UTIL4 $UTIL5 $UTIL6 $UTIL7 $UTIL8 $UTIL9 $UTIL10 "

dialog --backtitle "$titulo" \
--title "-| Paquetes de Utilidades |-" --ok-label '*Confirmar*' --nocancel \
--msgbox "\n$UTIL" 15 73
#FINAL DE UTILIDADES




#REPRODUCTOR
sporitykey=false
REPRO_condicion=false
spotify_condicion=false

cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' \
--title "-| Reproductores Video y Audio |-" --checklist "\n[ ESPACIO ] - Para marcar o desmarcar *" 20 100 19)
options=(   1 "vlc" on
            2 "mpv" off
            3 "mplayer" off
            4 "nuclear-player-bin" off            
            5 "elisa" off
            6 "spotify" off
            7 "spotify-Sin-Anuncios-adblock" off
            8 "clementine" off
            9 "audacious" off
            10 "xplayer" off
            11 "rhythmbox" off
            12 "moc" off
            13 "cmus" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            REPRO1="vlc"
            REPRO_condicion=true
            ;;
        2)
            REPRO2="mpv"
            REPRO_condicion=true
            ;;
        3)
            REPRO3="mplayer"
            REPRO_condicion=true
            ;;
        4)
            REPRO4="nuclear-player-bin"
            REPRO_condicion=true
            ;;
        5)
            REPRO5="elisa"
            REPRO_condicion=true
            ;;
        6)
            REPRO6="spotify"
            REPRO_condicion=true
            spotify_condicion=true
            ;;
        7)
            REPRO7="spotify-adblock-linux"
            REPRO_condicion=true
            spotify_condicion=true
            ;;
        8)
            REPRO7="clementine"
            REPRO_condicion=true
            ;;
        9)
            REPRO8="audacious"
            REPRO_condicion=true
            ;;
        10)
            REPRO9="xplayer"
            REPRO_condicion=true
            ;;
        11)
            REPRO10="rhythmbox"
            REPRO_condicion=true
            ;;
        12)
            REPRO11="moc"
            REPRO_condicion=true
            ;;
        13)
            REPRO12="cmus"
            REPRO_condicion=true
            ;;
    esac
done
REPRO=" $REPRO1 $REPRO3 $REPRO4 $REPRO5 $REPRO6 $REPRO7 $REPRO8 $REPRO9 $REPRO10 $REPRO11 $REPRO12 $REPRO13 "
# FIN REPRODUCTOR




#NAVEGADORES
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "Seleeciona tu navegador web\n[ ESPACIO ] - Para marcar o desmarcar *" 15 100 19)
options=(1 "Firefox | Open source" on    # any option can be set to default to "on"
         2 "Chromium | Open source" off
         3 "Brave | AUR - Open source" off
         4 "Google Chrome | AUR - Proprietary browser" off         
         5 "Opera | Proprietary browser" off
         6 "Vivaldi | AUR - Proprietary browser" off
         7 "Tor-browser | AUR - Open source" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            WEB1="firefox"
            WEB_condicion=true
            ;;
        2)
            WEB2="chromium"
            WEB_condicion=true
            ;;
        3)
            WEB3="brave-bin"
            WEB_condicion=true
            ;;
        4)
            WEB4="google-chrome"
            WEB_condicion=true
            ;;
        5)
            WEB5="opera"
            WEB_condicion=true
            ;;
        6)
            WEB6="vivaldi"
            WEB_condicion=true
            ;;
        7)
            WEB7="tor-browser"
            WEB_condicion=true
            tor_condicion=true
            ;; 
    esac
done
WEB=" $WEB1 $WEB2 $WEB3 $WEB4 $WEB5 $WEB6 $WEB7 "
# FIN NAVEGADORES








#OFFICE
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "Suite de Ofimática\n[ ESPACIO ] - Para marcar o desmarcar *" 11 70 14)
options=(    1 "LibreOffice | libreoffice-fresh" on
             2 "WPS Office | AUR - wps-office" off
             3 "SoftMaker Office | AUR - freeoffice " off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            OFFICE1="libreoffice-fresh libreoffice-fresh-es hunspell hunspell-es_es hunspell-es_any hyphen hyphen-es mythes-es"
            OFFICE_condicion=true
            ;;
        2)
            OFFICE3="wps-office ttf-wps-fonts hunspell hunspell-es_es hunspell-es_any"
            OFFICE_condicion=true
            ;;
        3)
            OFFICE4="freeoffice hunspell hunspell-es_es hunspell-es_any hyphen hyphen-es mythes-es"
            OFFICE_condicion=true
            ;;
    esac
done
OFFICE=" $OFFICE1 $OFFICE2 $OFFICE3 "
# FIN OFFICE




#Administrador de Procesos
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  --title "-| Administrador de Procesos |-" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "\n[ ESPACIO ] - Para marcar o desmarcar *\n " 15 70 20)
options=(1 "gnome-system-monitor" on
         2 "htop" on
         3 "gotop - AUR" off
         4 "gtop" off
         5 "bashtop" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            AP1="gnome-system-monitor"
            AP_condicion=true
            ;;
        2)
            AP2="htop"
            AP_condicion=true
            ;;
        3)
            AP3="gotop"
            AP_condicion=true
            ;;
        4)
            AP4="gtop"
            AP_condicion=true
            ;;

        5)
            AP5="bashtop"
            AP_condicion=true
            ;;
            
            
    esac
done
AP=" $AP1 $AP2 $AP3 $AP4 $AP5 "
#FINAL DE Administrador de Procesos


#Redes Sociales
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  --title "-| Redes Sociales |-" \
--no-tags --ok-label '< Siguiente >' --column-separator "|" --cancel-label '< No deseo esto >' --checklist "\n[ ESPACIO ] - Para marcar o desmarcar *\n " 15 70 20)
options=(1 "Telegram | telegram-desktop" on
         2 "IGdm - AUR | App de chat de Instagram" off
         3 "Whatsapp - AUR | whatsapp-nativefier-dark" off
         4 "Facebook Messenger - AUR | caprine" off
         5 "Netflix - AUR | netflix-qdesktop" off
         6 "Skype - AUR | skypeforlinux-preview-bin" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            RS1="telegram-desktop aspell-es"
            RS_condicion=true
            ;;
        2)
            RS2="igdm-bin aspell-es"
            RS_condicion=true
            ;;
        3)
            RS3="whatsapp-nativefier-dark aspell-es"
            RS_condicion=true
            ;;
        4)
            RS4="caprine aspell-es"
            RS_condicion=true
            ;;    
        5)
            RS5="netflix-qdesktop aspell-es"
            RS_condicion=true
            ;;            
        6)
            RS6="skypeforlinux-preview-bin aspell-es"
            RS_condicion=true
            ;;
            
    esac
done
RS=" $RS1 $RS2 $RS3 $RS4 $RS5 $RS6 "
#FINAL DE Redes Sociales

#nombre_usuario=$(cat /etc/passwd | grep '/home' | cut -d: -f1)


aurherlp=false

dialog --title "-| AUR Helper |-" --backtitle "$titulo" --yesno "\n¿Desea un asistente para hacer descargas en Arch User Repository?" 7 70

case $? in
   0) #AUR
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  --title "-| AUR Helper |-" \
--no-tags --ok-label '< Siguiente >' --column-separator "|" --cancel-label '< No deseo esto >' --checklist "\n[ ESPACIO ] - Para marcar o desmarcar *\n " 20 80 20)
options=(1 "yay | Terminal" on
         2 "trizen | Terminal" off
         3 "pikaur | Terminal" off
         4 "aurman | Terminal" off
         5 "pakku | Terminal" off
         6 "Pamac | Graphical" off
         7 "Octopi | Graphical" off
         8 "Cylon | Graphical" off
         9 "Argon | Graphical" off
         10 "Pakku GUI | Graphical" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            AUR1="yay-bin"
            AUR_condicion=true
            ;;
        2)
            AUR2="trizen"
            AUR_condicion=true
            ;;
        3)
            AUR3="pikaur"
            AUR_condicion=true
            ;;
        4)
            AUR4="aurman"
            AUR_condicion=true
            ;;    
        5)
            AUR5="pakku"
            AUR_condicion=true
            ;;            
        6)
            AUR6="pamac-aur"
            AUR_condicion=true
            AUR_pamac=true
            ;;
        7)
            AUR7="octopi"
            AUR_condicion=true
            ;; 
        8)
            AUR8="cylon"
            AUR_condicion=true
            ;;
        9)
            AUR9="argon"
            AUR_condicion=true
            ;; 
        10)
            AUR10="pakku-gui"
            AUR_condicion=true
            ;; 

    esac
done
AUR=" $AUR1 $AUR2 $AUR3 $AUR4 $AUR5 $AUR6 $AUR7 $AUR8 $AUR9 $AUR10 "
#FINAL DE AUR
;;
   1) AUR_DELETE="yay-bin"
        aurherlp=true
        ;;

   255) echo "[ESC] key pressed.";;
esac

programasextrasSI=true

;;
#SELECCIONO QUERER PROGRAMAS
   1) 
        TERMI=""
        UTIL=""
        AUDIO=""
        SH=""
        WEB=""
        REPRO=""
        OFFICE=""
        AP=""
        RS=""
        AUR=""
        AUR_DELETE=""
        programasextrasNO=true
        ;;
#SELECCIONO NO QUERER PROGRAMAS

   255) echo "Presiono la tecla [ESC]";;
esac

clear
;;
## FIN DE EXTRA PROGRAMS



"10")
## INICIO DE INSTALL

if [ "$finalInstall" == "true" ]; then

# MENSAJE 
dialog --backtitle "$titulo" \
--title "| Información |" \
--msgbox "\n> Inicia con la descarga de [base] y [base-devel] \
\n> Actualiza la lista de MirrorList a [reflector] \
\n> Descarga el Kernel Seleccionado \
\n> Luego configura todo lo seleccionado\n \
\n> Arcris solo es un asistente para una instalación rápida \
\n> Arcris usa repositorios oficiales de Arch Linux y AUR \
\n> El tiempo de instalación depende de los paquetes seleccionado \
\n> Al terminar el equipo se reiniciara con su sistema instalado" 15 73

clear
echo ""
echo "Cargando..."
echo -e "\n\n\n\n\n\n\n\n\n\n\n"
echo ""
echo -e '\033[38;2;255;0;02m'
echo " █████╗ ██████╗  ██████╗██████╗ ██╗███████╗";
echo "██╔══██╗██╔══██╗██╔════╝██╔══██╗██║██╔════╝";
echo "███████║██████╔╝██║     ██████╔╝██║███████╗";
echo "██╔══██║██╔══██╗██║     ██╔══██╗██║╚════██║";
echo "██║  ██║██║  ██║╚██████╗██║  ██║██║███████║";
echo "╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚══════╝";
echo "                                           ";
echo -e '\033[m'
sleep 2



#echo -e "\t\t\t| Actualizando Hora Actual en LiveCD |"
#printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
#echo -e ""
#sleep 2
timedatectl set-timezone $zonahorariaok
#pacman -Sy ntp --noconfirm 
#clear
#echo ""
#echo ""
#echo "Si toma mucho tiempo en cargar..."
#echo "Presione CONTROL + C para Continuar..."
#echo ""
#ntpd -qg
#sleep 3
#hwclock --systohc
clear


clear && echo "" 
echo -e ""
echo -e "\t\t\t| Actualizando Hora Actual en LiveCD |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
sleep 2
timedatectl status
sleep 5
clear
clear && echo "" 
echo -e ""
echo -e "\t\t\t| Actualizando lista de Keys en LiveCD |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
sleep 2
pacman -Sy archlinux-keyring --noconfirm 
sleep 2
clear

clear && echo "" 
echo -e ""
echo -e "\t\t\t| Actualizando MirrorList en LiveCD |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
sleep 2
#cp pacman.conf /etc/pacman.conf
pacman -Sy reflector python3 rsync --noconfirm 
sleep 2
clear
echo -e "\t\t\t| Actualizando mejores listas de Mirrors |"
echo ""
reflector --verbose --latest 5 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
sleep 5
clear
cat /etc/pacman.d/mirrorlist
sleep 3
clear
#sed -i '199d' /etc/locale.gen
#sed -i "199i es_ES.UTF-8 UTF-8" /etc/locale.gen

#echo "${locale} UTF-8" > /etc/locale.gen
#locale-gen
#echo LANG=es_ES.UTF-8 > /etc/locale.conf
#export LANG=es_ES.UTF-8
#echo ""
#sleep 2

###########################################
############## CHROOT  ####################
###########################################

nombre_usuario=$user


XORG=$"xorg xorg-apps xorg-xinit xorg-twm xterm xf86-input-libinput"




###########################################
####### FUNCION DE BARRA ##################
###########################################

function barra_progreso {

clear    
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "_"
echo -e ""
echo -e "\t\t\t\t$titulo_progreso"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""

#INICIO PROGRESS BARR
function ProgressBar {
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*6)/10
    let _left=60-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")
# 1.2.1.1 Progreso : [########################################] 100%
printf "\r > Cargando : |${_fill// /▇}${_empty// /-}| ${_progress}%%"

}
# Variables
_start=1

_end=100

for number in $(seq ${_start} ${_end})
do
    sleep 0.065
    ProgressBar ${number} ${_end}
done
#FIN PROGRESS BARR
echo ""
echo ""
}


function mensaje_install {
echo ""
echo ""
echo -e '\033[38;2;255;0;02m'
echo " █████╗ ██████╗  ██████╗██████╗ ██╗███████╗";
echo "██╔══██╗██╔══██╗██╔════╝██╔══██╗██║██╔════╝";
echo "███████║██████╔╝██║     ██████╔╝██║███████╗";
echo "██╔══██║██╔══██╗██║     ██╔══██╗██║╚════██║";
echo "██║  ██║██║  ██║╚██████╗██║  ██║██║███████║";
echo "╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚══════╝";
echo "                                           ";
echo -e '\033[m'
echo ""
echo ""
sleep 3
}


## FUNCIONES PARA WIFI Y DEMAS COSAS 

microdriver (){

microcode=$(lspci -k | grep 'Host bridge: Intel')
lspci -k | grep 'Host bridge:'  > procesador
if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
then
clear    
echo ""
echo ""     
cat procesador
echo ""   
arch-chroot /mnt /bin/bash -c "pacman -S intel-ucode --noconfirm"

else
clear
echo ""
echo ""     
cat procesador
echo ""  
arch-chroot /mnt /bin/bash -c "pacman -S amd-ucode --noconfirm"
fi

}

wifidriver (){

broadcom=$(/bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
then            
arch-chroot /mnt /bin/bash -c "pacman -S broadcom-wl wireless-regdb wpa_supplicant wireless_tools --noconfirm"
arch-chroot /mnt /bin/bash -c 'modprobe wl' 
arch-chroot /mnt /bin/bash -c 'rmmod b43'
arch-chroot /mnt /bin/bash -c 'rmmod ssb' 
echo Listo
else  
arch-chroot /mnt /bin/bash -c "pacman -S iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm"
fi

}

wifidriverdmks (){

broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
then      
arch-chroot /mnt /bin/bash -c "pacman -S broadcom-wl-dkms wireless-regdb wpa_supplicant wireless_tools --noconfirm"
arch-chroot /mnt /bin/bash -c 'modprobe wl' 
arch-chroot /mnt /bin/bash -c 'rmmod b43' 
arch-chroot /mnt /bin/bash -c 'rmmod ssb' 
echo listo
else
arch-chroot /mnt /bin/bash -c "pacman -S iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm"
fi

}

touchdriver () {
arch-chroot /mnt /bin/bash -c "pacman -S xf86-input-synaptics xf86-input-libinput xorg-xinput --noconfirm"
}

blutudriver () {
arch-chroot /mnt /bin/bash -c "pacman -S bluez bluez-utils pulseaudio-bluetooth --noconfirm"
arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
}

## FINAL FUNCIONES PARA WIFI Y DEMAS COSAS 


###########################################
####### EJECUCION #########################
###########################################

titulo_progreso="| Instalando: Base y Base-devel |"
barra_progreso

pacstrap /mnt base base-devel reflector python3 rsync nano xdg-user-dirs
clear
echo -e "\t\t\t| Actualizando mejores listas de Mirrors del sistema instalado |"
arch-chroot /mnt /bin/bash -c "reflector --verbose --latest 6 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist"
#cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
clear
cat /mnt/etc/pacman.d/mirrorlist
sleep 3
clear
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"

#FSTAB
clear && echo "" 
echo -e ""
echo -e "\t\t\t| Archivo FSTAB |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
genfstab -U /mnt > /mnt/etc/fstab
arch-chroot /mnt /bin/bash -c "cat /etc/fstab"
sleep 4

# Usuarios
clear && echo "" 
echo -e ""
echo -e "\t\t\t| Agregando usuario y /root |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
echo "$hostname" > /mnt/etc/hostname
echo "127.0.1.1 $hostname.localdomain $hostname" > /mnt/etc/hosts
clear
echo "Hostname: $(cat /mnt/etc/hostname)"
echo ""
echo "Hosts: $(cat /mnt/etc/hosts)"
echo ""
#arch-chroot /mnt /bin/sh -c "echo root:$rootpasswd | chpasswd"
arch-chroot /mnt /bin/bash -c "(echo $rootpasswd ; echo $rootpasswd) | passwd root"
arch-chroot /mnt /bin/bash -c "useradd -m -g users -s /bin/bash $user"
arch-chroot /mnt /bin/bash -c "(echo $userpasswd ; echo $userpasswd) | passwd $user"

#arch-chroot /mnt /bin/bash -c "echo $user:$userpasswd | chpasswd"
sed -i "80i $user ALL=(ALL) NOPASSWD: ALL"  /mnt/etc/sudoers
arch-chroot /mnt /bin/bash -c "hwclock -w"
sleep 2
arch-chroot /mnt /bin/bash -c "systemctl enable dhcpcd NetworkManager"
clear


# Idioma
clear && echo "" 
echo -e ""
echo -e "\t\t\t| Actualizando Idioma del Sistema |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
echo "${locale} UTF-8" > /mnt/etc/locale.gen
arch-chroot /mnt /bin/bash -c "locale-gen" 
echo "LANG=$locale" > /mnt/etc/locale.conf && cat /mnt/etc/locale.conf 
echo "KEYMAP=$keymap" > /mnt/etc/vconsole.conf && cat /mnt/etc/vconsole.conf 

arch-chroot /mnt /bin/bash -c "export $(cat /mnt/etc/locale.conf)" 
export $(cat /mnt/etc/locale.conf)
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario export $(cat /etc/locale.conf)"
export $(cat /mnt/etc/locale.conf)
sleep 3


## DIRECTORIOS
clear && echo "" 
echo -e ""
echo -e "\t\t\t| Actualizando lista de Directoros |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
arch-chroot /mnt /bin/bash -c "xdg-user-dirs-update"
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario xdg-user-dirs-update"
echo ""
arch-chroot /mnt /bin/bash -c "ls -l /root/"
echo ""
echo ""
arch-chroot /mnt /bin/bash -c "ls -l /home/$nombre_usuario/"
echo ""
sleep 5
clear


#Zona Horaria
if [ "$zonadefaultNo" == "true" ]; then
ln -sf $timezonedir${timezone} /mnt/etc/localtime
    fi

if [ "$zonadefaultYes" == "true" ]; then
ln -sf /usr/share/zoneinfo/$zonahorariaok /mnt/etc/localtime
    fi
clear

clear && echo "" 
echo -e ""
echo -e "\t\t\t| INICIO DE INSTALACIÓN |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
sleep 3

if [ "$selecLinuxStable" == "true" ]; then
cp pacman.conf /mnt/etc/pacman.conf
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Sy alsi yay-bin --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S linux linux-headers linux-firmware mkinitcpio --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -S pacman-mirrorlist cryptsetup lvm2 logrotate nano hddtemp unzip zip --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S less ntp usb_modeswitch usbutils which mtools exfat-utils --noconfirm --needed"
    fi

if [ "$selec8168" == "true" ]; then
arch-chroot /mnt /bin/bash -c "pacman -S r8168 --noconfirm"
echo blacklist r8169 > /mnt/etc/modprobe.d/blacklist.conf
cat /mnt/etc/modprobe.d/blacklist.conf
arch-chroot /mnt /bin/bash -c 'modprobe r8168'
sleep 3
fi

if [ "$selecLinuxHard" == "true" ]; then
cp pacman.conf /mnt/etc/pacman.conf
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Sy alsi yay-bin --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S linux-hardened linux-hardened-headers linux-firmware mkinitcpio --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -S pacman-mirrorlist cryptsetup lvm2 logrotate nano hddtemp unzip zip --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S less ntp usb_modeswitch usbutils which mtools exfat-utils --noconfirm --needed"
    fi

if [ "$selecLinuxLts" == "true" ]; then
cp pacman.conf /mnt/etc/pacman.conf
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Sy alsi yay-bin --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S linux-lts linux-lts-headers linux-firmware mkinitcpio --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -S pacman-mirrorlist cryptsetup lvm2 logrotate nano hddtemp unzip zip --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S less ntp usb_modeswitch usbutils which mtools exfat-utils --noconfirm --needed"
    fi

if [ "$selec8168lts" == "true" ]; then
arch-chroot /mnt /bin/bash -c "pacman -Sy r8168-lts --noconfirm"
echo blacklist r8169 > /mnt/etc/modprobe.d/blacklist.conf
cat /mnt/etc/modprobe.d/blacklist.conf
arch-chroot /mnt /bin/bash -c 'modprobe r8168'
sleep 3
    fi
    

if [ "$selecLinuxZen" == "true" ]; then
cp pacman.conf /mnt/etc/pacman.conf
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Sy alsi yay-bin --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S linux-zen linux-zen-headers linux-firmware mkinitcpio --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -S pacman-mirrorlist cryptsetup lvm2 logrotate nano hddtemp unzip zip --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "pacman -S less ntp usb_modeswitch usbutils which mtools exfat-utils --noconfirm --needed"
    fi

if [ "$microdriverS" == "true" ]; then
microdriver
sleep 3
fi

if [ "$wifidriverS" == "true" ]; then
wifidriver
sleep 3
fi

if [ "$wifidriverdmksS" == "true" ]; then
wifidriverdmks
sleep 3
fi

if [ "$touchdriverS" == "true" ]; then
touchdriver
sleep 3
fi

if [ "$blutudriverS" == "true" ]; then
blutudriver
sleep 3
fi





# REPO_CRISTO FUERA
cp pacman-chroot.conf /mnt/etc/pacman.conf
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm" 
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm" 

clear


######
#GRUB
######
uefi=$( parted $disk print | grep -ic gpt )

if [ $uefi == 1 ] && [ -d /sys/firmware/efi ]; then
clear
titulo_progreso="| SU SISTEMA ES UEFI |"
barra_progreso
arch-chroot /mnt /bin/bash -c "pacman -S grub efibootmgr os-prober --noconfirm"
clear
echo ""
echo '>>> Su disco es GPT | UEFI es el sistema Moderno <<<'
cat /tmp/partitions | grep gpt 
echo '' 
echo 'Instalando EFI System >> bootx64.efi' 
arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --removable' 
echo '' 
echo 'Instalando UEFI System >> grubx64.efi' 
arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=Arch'
######
sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
sed -i '7d' /mnt/etc/default/grub
######
echo ''
arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
echo '' 
echo 'ls -l /mnt/boot' 
ls -l /mnt/boot 
echo '' 
echo 'Lea bien que no tenga ningún error marcado' 
echo '> Confirme tener las IMG de linux para el arranque' 
echo '> Confirme tener la carpeta de GRUB para el arranque' 
mensaje_install
sleep 3
clear

else
clear
titulo_progreso="|  SISTEMA BIOS LEGACY Y DISCO DOS/MBR  |"
barra_progreso
arch-chroot /mnt /bin/bash -c "pacman -S grub os-prober --noconfirm"
clear
echo "" 
echo '>>> Su disco es DOS MBR | BIOS Legacy es un sistema antiguo <<<' 
echo "" 
cat /tmp/partitions | grep dos 
echo '' 
arch-chroot /mnt /bin/bash -c "grub-install --target=i386-pc $disk"
########
sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
sed -i '7d' /mnt/etc/default/grub
########
echo '' 
arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
echo '' 
echo 'ls -l /mnt/boot' 
ls -l /mnt/boot 
echo '' 
echo 'Lea bien que no tenga ningún error marcado' 
echo '> Confirme tener las IMG de linux para el arranque' 
echo '> Confirme tener la carpeta de GRUB para el arranque'
mensaje_install
sleep 3
clear
fi
# FIN GRUB





#echo ""
#echo ""
#arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm" 
echo ""
echo ""
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario alsi -l"
#arch-chroot /mnt /bin/bash -c "alsi -l"
echo ""
echo ""
#arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario inxi -Gx"
#arch-chroot /mnt /bin/bash -c "inxi -Gx"
echo ""
echo ""
sleep 5







clear
echo -e "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
echo ""
echo -e '\033[38;2;255;0;02m'
echo " █████╗ ██████╗  ██████╗██████╗ ██╗███████╗";
echo "██╔══██╗██╔══██╗██╔════╝██╔══██╗██║██╔════╝";
echo "███████║██████╔╝██║     ██████╔╝██║███████╗";
echo "██╔══██║██╔══██╗██║     ██╔══██╗██║╚════██║";
echo "██║  ██║██║  ██║╚██████╗██║  ██║██║███████║";
echo "╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚══════╝";
echo "                                           ";
echo -e '\033[m'
echo ""
echo ""
sleep 2
clear

# REPO_CRISTO FUERA
cp pacman-chroot.conf /mnt/etc/pacman.conf
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm" 
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -Syu --noeditmenu --noconfirm"



if [ "$seleccionDE" == "true" ]; then

titulo_progreso="Instalando Xorg"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $XORG --noeditmenu --noconfirm --needed"
mensaje_install
clear
titulo_progreso="Instalando DE/WM/DM"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $DE --noeditmenu --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $DM --noeditmenu --noconfirm --needed"
clear
echo -e ""
echo -e "\t\t\t\tActivando Servicio Display Manager"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
arch-chroot /mnt /bin/bash -c "systemctl enable $(cat DMservice)"
mensaje_install

fi

if [ "$seleccionWM" == "true" ]; then

titulo_progreso="Instalando Xorg"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $XORG --noeditmenu --noconfirm --needed"
mensaje_install
clear
titulo_progreso="Instalando DE/WM/DM"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $WM --noeditmenu --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $DM --noeditmenu --noconfirm --needed"
clear
echo -e ""
echo -e "\t\t\t\tActivando Servicio Display Manager"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
arch-chroot /mnt /bin/bash -c "systemctl enable $(cat DMservice)"
mensaje_install

fi



if [ "$seleccionXORG" == "true" ]; then

titulo_progreso="Instalando Xorg"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $XORG --noeditmenu --noconfirm --needed"
mensaje_install


fi


titulo_progreso="Instalando Driver de Vídeo"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $GPU --noeditmenu --noconfirm --needed"
if [ "$VMbox" == "true" ]; then
kernel=$(arch-chroot /mnt uname -a | tail -c -6)
if [ "$kernel" == "Linux" ]; then
    arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S virtualbox-guest-utils xf86-video-vmware virtualbox-host-modules-arch mesa mesa-libgl --noeditmenu --noconfirm --needed"
    GPUvirt="vboxservice"
    echo $GPUvirt | awk -F " " '{print $1}' > GPUvirt                            
else
    arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S virtualbox-guest-dkms virtualbox-host-dkms mesa mesa-libgl --noeditmenu --noconfirm --needed"
    GPUvirt="systemd-modules-load"
    echo $GPUvirt | awk -F " " '{print $1}' > GPUvirt
fi
fi
mensaje_install



if [ "$lirisesion" == "true" ]; then

arch-chroot /mnt /bin/bash -c "systemctl --user enable liri.service"
arch-chroot /mnt /bin/bash -c "systemctl enable liri.service"
arch-chroot /mnt /bin/bash -c "systemctl --user isolate liri.target"

fi



if [ "$programasextrasNO" == "true" ]; then
  clear
  mensaje_install
fi


if [ "$programasextrasSI" == "true" ]; then

if [ "$TERMINAL_condicion" == "true" ]; then
titulo_progreso="Instalando Terminal Seleccionada"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $TERMI --noeditmenu --noconfirm --needed"
mensaje_install
    fi


titulo_progreso="Instalando Utilidades del Sistema"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $UTIL --noeditmenu --noconfirm --needed"
mensaje_install


titulo_progreso="Instalando Sistema de Audio"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $AUDIO --noeditmenu --noconfirm --needed"
mensaje_install 


titulo_progreso="Instalando Tipografias"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S gnome-font-viewer ttf-opensans ttf-hack ttf-font-awesome awesome-terminal-fonts noto-fonts noto-fonts-emoji nerd-fonts-hack ttf-liberation ttf-liberation gnu-free-fonts --noeditmenu --noconfirm --needed"
# ttf-dejavu ttf-bitstream-vera ttf-droid ttf-croscore ttf-ibm-plex 

mensaje_install
#adobe-source-han-sans-jp-fonts
#adobe-source-han-sans-cn-fonts




if [ "$tor_condicion" == "true" ]; then
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "_"
echo -e ""
echo -e "\t\t\t         Actualizando Keys para Tor browser          "
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
arch-chroot /mnt /bin/bash -c "gpg --recv-keys EF6E286DDA85EA2A4BA7DE684E2C6E8793298290"
clear
    fi


if [ "$WEB_condicion" == "true" ]; then
titulo_progreso="Instalando navegador Web"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $WEB --noeditmenu --noconfirm --needed"
mensaje_install
    fi


if [ "$spotify_condicion" == "true" ]; then
clear
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "_"
echo -e ""
echo -e "\t\t\t         Actualizando Keys de Spotify          "
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
arch-chroot /mnt /bin/bash -c "gpg --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90"
arch-chroot /mnt /bin/bash -c "gpg --recv-keys 2EBF997C15BDA244B6EBF5D84773BD5E130D1D45"
clear
    fi


if [ "$REPRO_condicion" == "true" ]; then
titulo_progreso="Instalando Reproductor de Música/Vídeo"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $REPRO --noeditmenu --noconfirm --needed"
mensaje_install
    fi



if [ "$OFFICE_condicion" == "true" ]; then
titulo_progreso="Instalando Ofimatica"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $OFFICE --noeditmenu --noconfirm --needed"
mensaje_install
    fi


if [ "$AP_condicion" == "true" ]; then
titulo_progreso="Instalando Administrador de Procesos"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $AP --noeditmenu --noconfirm --needed"
mensaje_install
    fi


if [ "$RS_condicion" == "true" ]; then
titulo_progreso="Instalando Social Media"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $RS --noeditmenu --noconfirm --needed"
mensaje_install
    fi


if [ "$AUR_condicion" == "true" ]; then
titulo_progreso="Instalando AUR Helper"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $AUR --noeditmenu --noconfirm --needed"
mensaje_install
    fi


if [ "$AUR_pamac" == "true" ]; then
clear
echo ""
echo "###############################################################################"
echo "###                  Author    :   Erik Dubois                             ####"
echo "###                  Ver Iconos en Pamac                                   ####"
echo "###############################################################################"
sleep 2
# https://aur.archlinux.org/packages/pamac-aur/
echo "Fix to show icons and applications in pamac-aur"
echo "Downgrading is another solution - see forum for that one"

arch-chroot /mnt /bin/bash -c "zcat /usr/share/app-info/xmls/community.xml.gz | sed 's|<em>||g;s|<\/em>||g;' | gzip > '/tmp/new.xml.gz'"
arch-chroot /mnt /bin/bash -c "cp /tmp/new.xml.gz /usr/share/app-info/xmls/community.xml.gz"
arch-chroot /mnt /bin/bash -c "pacman -S appstream --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "appstreamcli refresh-cache --force"
clear
#arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S pamac-zsh-completions --noeditmenu --noconfirm --needed"
#arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S pamac-tray-icon-plasma --noeditmenu --noconfirm --needed"
#arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S archlinux-appstream-data-pamac --noeditmenu --noconfirm --needed"
#yay -S archlinux-appstream-data-pamac --noeditmenu --noconfirm --needed

mensaje_install
sleep 8
    fi

#FIN DE PROGRAMAS SI EXTRAS
fi



#    AUR_condicion=true
# mkdir /home/$nombre_usuario/.config/  

if [ "$GPUHYBR" == "true" ]; then
arch-chroot /mnt /bin/bash -c "systemctl enable optimus-manager.service"
arch-chroot /mnt /bin/bash -c "optimus-manager --switch auto"
arch-chroot /mnt /bin/bash -c "optimus-manager --set-startup intel"
    fi
    

if [ "$VMbox" == "true" ]; then
arch-chroot /mnt /bin/bash -c "modprobe -a vboxguest vboxsf vboxvideo vboxdrv"
arch-chroot /mnt /bin/bash -c "VBoxClient-all"
arch-chroot /mnt /bin/bash -c "systemctl enable $(cat GPUvirt)"
    fi

    
if [ "$VMqemu" == "true" ]; then
arch-chroot /mnt /bin/bash -c "systemctl enable $(cat GPUvirt)"
    fi



# TEMAS

if [ "$xfce4tema" == "true" ]; then
#TITULO EN BARRAS
titulo_progreso="Instalando Tema de XFCE4"
barra_progreso
#
arch-chroot /mnt /bin/bash -c "mkdir /home/$nombre_usuario/.config"
#
arch-chroot /mnt /bin/bash -c "wget https://raw.githubusercontent.com/CodigoCristo/config/master/xfce4.zip"
arch-chroot /mnt /bin/bash -c "unzip xfce4.zip"
arch-chroot /mnt /bin/bash -c "cp -rf xfce4/config/* /home/$nombre_usuario/.config/"
#
arch-chroot /mnt /bin/bash -c "cp -rf xfce4/config/fondo-arch.png /usr/share/backgrounds/xfce/xfce-stripes.png"
arch-chroot /mnt /bin/bash -c "cp -rf xfce4/config/5336864_orig.png /usr/usb.png"
arch-chroot /mnt /bin/bash -c "cp -rf xfce4/config/logo2.png /usr/logo-arch.png"
arch-chroot /mnt /bin/bash -c "cp -rf xfce4/config/logo2.png /home/$nombre_usuario/.face"
arch-chroot /mnt /bin/bash -c "cp -rf xfce4/config/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf"
#
arch-chroot /mnt /bin/bash -c "rm -R xfce4/"
arch-chroot /mnt /bin/bash -c "rm -R xfce4.zip"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.config/"
sleep 5
    fi


if [ "$i3tema1" == "true" ]; then
#TITULO EN BARRAS
titulo_progreso="Instalando Tema de i3WM"
barra_progreso

arch-chroot /mnt /bin/bash -c "mkdir /home/$nombre_usuario/.config"

arch-chroot /mnt /bin/bash -c "wget https://raw.githubusercontent.com/CodigoCristo/config/master/i3-1.zip"
arch-chroot /mnt /bin/bash -c "unzip i3-1.zip"
arch-chroot /mnt /bin/bash -c "cp -rf i3-1/config/* /home/$nombre_usuario/.config/"
arch-chroot /mnt /bin/bash -c "rm -R i3-1/"
arch-chroot /mnt /bin/bash -c "rm -R i3-1.zip"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.config/"
sleep 5
    fi

if [ "$i3tema2" == "true" ]; then
#TITULO EN BARRAS
titulo_progreso="Instalando Tema de i3WM"
barra_progreso

arch-chroot /mnt /bin/bash -c "mkdir /home/$nombre_usuario/.config"

arch-chroot /mnt /bin/bash -c "wget https://raw.githubusercontent.com/CodigoCristo/config/master/i3-2.zip"
arch-chroot /mnt /bin/bash -c "unzip i3-2.zip"
arch-chroot /mnt /bin/bash -c "cp -rf i3-2/config/* /home/$nombre_usuario/.config/"
arch-chroot /mnt /bin/bash -c "rm -R i3-2/"
arch-chroot /mnt /bin/bash -c "rm -R i3-2.zip"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.config/"
sleep 5
    fi

 

if [ "$plasmatema" == "true" ]; then
#TITULO EN BARRAS
titulo_progreso="Instalando Tema de KDE Plasma"
barra_progreso

arch-chroot /mnt /bin/bash -c "mkdir /home/$nombre_usuario/.config"
arch-chroot /mnt /bin/bash -c "mkdir /home/$nombre_usuario/.local"
arch-chroot /mnt /bin/bash -c "mkdir /home/$nombre_usuario/.kde4"

arch-chroot /mnt /bin/bash -c "wget https://raw.githubusercontent.com/CodigoCristo/config/master/kde.zip"
arch-chroot /mnt /bin/bash -c "unzip kde.zip"
arch-chroot /mnt /bin/bash -c "cp -rf kde/config/* /home/$nombre_usuario/.config/"
arch-chroot /mnt /bin/bash -c "cp -rf kde/local/* /home/$nombre_usuario/.local/"
arch-chroot /mnt /bin/bash -c "cp -rf kde/kde4/* /home/$nombre_usuario/.kde4/"
arch-chroot /mnt /bin/bash -c "rm -R kde/"
arch-chroot /mnt /bin/bash -c "rm -R kde.zip"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.config/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.local/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.kde4/"
sleep 3
    fi



if [ "$qtile_config" == "true" ]; then
#TITULO EN BARRAS
titulo_progreso="Configurando Qtile"
barra_progreso

arch-chroot /mnt /bin/bash -c "mkdir -p /home/$nombre_usuario/.config/qtile/"
arch-chroot /mnt /bin/bash -c "cp /usr/share/doc/qtile/default_config.py /home/$nombre_usuario/.config/qtile/config.py"
arch-chroot /mnt /bin/bash -c "python2 -m py_compile /home/$nombre_usuario/.config/qtile/config.py"
echo -e ""
echo -e ""
echo -e "\t> Copiando archivo /.config/qtile/config.py"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
sleep 3
echo -e ""
echo -e "\t> Ejecutando: python2 -m py_compile /.config/qtile/config.py"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
sleep 3

arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/"
arch-chroot /mnt /bin/bash -c "chmod 777 $nombre_usuario:users /home/$nombre_usuario/.config/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.config/qtile/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.config/qtile/config.py"
sleep 5
    fi


    if [ "$awesome_config" == "true" ]; then
#TITULO EN BARRAS
titulo_progreso="Configurando Awesome"
barra_progreso

arch-chroot /mnt /bin/bash -c "mkdir -p /home/$nombre_usuario/.config/awesome/"
arch-chroot /mnt /bin/bash -c "cp /etc/xdg/awesome/rc.lua /home/$nombre_usuario/.config/awesome/"

arch-chroot /mnt /bin/bash -c "chmod 777 $nombre_usuario:users /home/$nombre_usuario/.config/"
arch-chroot /mnt /bin/bash -c "chmod 777 $nombre_usuario:users /home/$nombre_usuario/.config/awesome/rc.lua"
    fi

           

#TEMA BSPWM
if [ "$bspwmtema" == "true" ]; then

clear
#TITULO EN BARRAS
titulo_progreso="Configurando BSPWM"
barra_progreso
arch-chroot /mnt /bin/bash -c "git clone https://github.com/darch7/bspwmbydarch-Arcris.git"
arch-chroot /mnt /bin/bash -c "pacman -Rns i3-wm --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Sy pacman-contrib --noconfirm"

arch-chroot /mnt /bin/bash -c "cp -R bspwmbydarch-Arcris/config/*     /home/$nombre_usuario/.config/"
arch-chroot /mnt /bin/bash -c "cp -R bspwmbydarch-Arcris/.local       /home/$nombre_usuario/"
arch-chroot /mnt /bin/bash -c "cp -R bspwmbydarch-Arcris/home/.*      /home/$nombre_usuario/" 
arch-chroot /mnt /bin/bash -c "chmod +x /home/$nombre_usuario/.local/bin/scripts"

arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.config/"
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.local/"


arch-chroot /mnt /bin/bash -c "cp -R bspwmbydarch-Arcris/root/fzf/*           /usr/share/fzf"
arch-chroot /mnt /bin/bash -c "cp -R bspwmbydarch-Arcris/root/gtk/iconos/*    /usr/share/icons"
arch-chroot /mnt /bin/bash -c "cp -R bspwmbydarch-Arcris/root/gtk/temas/*     /usr/share/themes"
arch-chroot /mnt /bin/bash -c "cp -R bspwmbydarch-Arcris/root/wall/*          /usr/share/"

arch-chroot /mnt /bin/bash -c "rm -R /home/$nombre_usuario/compilar" 
arch-chroot /mnt /bin/bash -c "rm -R /home/$nombre_usuario/config" 
arch-chroot /mnt /bin/bash -c "rm -R /home/$nombre_usuario/root" 
arch-chroot /mnt /bin/bash -c "rm /home/$nombre_usuario/README.md" 

sleep 5

fi





if [ "$gnomebeta" == "true" ]; then

titulo_progreso="Instalando Gnome 40"
barra_progreso

arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S chaotic-mirrorlist chaotic-keyring --noeditmenu --noconfirm --needed"
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S chaotic-keyring --noeditmenu --noconfirm --needed"
cp pacmanchao.conf /mnt/etc/pacman.conf
arch-chroot /mnt /bin/bash -c "pacman -Sy --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Sy --noconfirm"

# [chaotic-aur]
# Include = /etc/pacman.d/chaotic-mirrorlist


arch-chroot /mnt /bin/bash -c "pacman -S gnome-control-center --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -S gnome-tweaks --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -S gnome-terminal --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -S gdm --noconfirm"

arch-chroot /mnt /bin/bash -c "systemctl enable gdm"

arch-chroot /mnt /bin/bash -c "pacman -S mutter-40alfa"
arch-chroot /mnt /bin/bash -c "pacman -S gnome-shell-40alfa"
arch-chroot /mnt /bin/bash -c "pacman -S libgweather-git"

arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -R chaotic-mirrorlist chaotic-keyring --noconfirm"
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -R chaotic-keyring --noconfirm"

cp pacman-chroot.conf /mnt/etc/pacman.conf

arch-chroot /mnt /bin/bash -c "pacman -Sy --noconfirm"
arch-chroot /mnt /bin/bash -c "pacman -Sy --noconfirm"

#arch-chroot /mnt /bin/bash -c "pacman -S chrome-gnome-shell --noconfirm"


mensaje_install
    fi


















if [ "$aurherlp" == "true" ]; then
titulo_progreso="Eliminando AUR Helper"
barra_progreso
arch-chroot /mnt /bin/bash -c "pacman -R $AUR_DELETE --noconfirm"
mensaje_install
    fi


# Ejemplo 
# variable=false
# variable=true
# if [ "$variable" == "true" ]; then
#    echo contenido_a_mostrar
#    fi

clear


titulo_progreso="Instalando Shell del Sistema"
barra_progreso
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario yay -S $SH --noeditmenu --noconfirm --needed"
mensaje_install
clear



echo ''
echo ''


echo $SH | awk -F " " '{print $1}' >> shell
SH=$(cat shell)
arch-chroot /mnt /bin/bash -c "chsh -s /bin/$SH"
arch-chroot /mnt /bin/bash -c "chsh -s /usr/bin/$SH $nombre_usuario"
arch-chroot /mnt /bin/bash -c "chsh -s /bin/$SH $nombre_usuario"
#arch-chroot /mnt /bin/bash -c "cp /root/bashrc /root/.bashrc"


cp .dialogrc /mnt/root
chmod +x /mnt/root/.dialogrc
cp .dialogrc /mnt/home/$nombre_usuario/.dialogrc
chmod +x /mnt/home/$nombre_usuario/.dialogrc

mkdir /mnt/etc/pacman.d/hooks/
cp mirrorupgrade.hook /mnt/etc/pacman.d/hooks/mirrorupgrade.hook 
chmod +x /mnt/etc/pacman.d/hooks/mirrorupgrade.hook

cp zshrc /mnt/home/$nombre_usuario/.zshrc
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.zshrc"
cp zshrc /mnt/root/.zshrc

cp .bashrc /mnt/home/$nombre_usuario/.bashrc
cp .bashrc-root /mnt/root/.bashrc
arch-chroot /mnt /bin/bash -c "chown -hR $nombre_usuario:users /home/$nombre_usuario/.bashrc"



rm shell
rm DMservice
rm GPUvirt
clear


arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm"
arch-chroot /mnt /bin/bash -c "ls -l /home/$nombre_usuario"
echo ''
echo ''


####################################################################
clear
arch-chroot /mnt /bin/bash -c "systemctl enable dhcpcd NetworkManager"
clear
arch-chroot /mnt /bin/bash -c "systemctl start dhcpcd NetworkManager"
clear
echo "noipv6rs" >> /mnt/etc/dhcpcd.conf
echo "noipv6" >> /mnt/etc/dhcpcd.conf

sed -i '80d' /mnt/etc/sudoers
sed -i "80i $nombre_usuario ALL=(ALL) ALL" /mnt/etc/sudoers
clear
####################################################################



#arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario localectl set-x11-keymap $keymap"
#sleep 3
clear
#Load the X11 keymap
cmd=(dialog --backtitle "Canal de Youtube: Codigo Cristo" --title "-| Definir teclado para X.org |-" --keep-tite --menu "\n" 10 0 10)

options=(latam      ""
         es         ""
         us         ""
         otros      "(+)")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        es) 
            clear
            keyboard="es"
            keymap="es"
            arch-chroot /mnt /bin/bash -c "localectl --no-convert set-x11-keymap es"
      arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario localectl --no-convert set-x11-keymap es"
      arch-chroot /mnt /bin/bash -c "setxkbmap -layout es"
      arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario setxkbmap -layout es"
      echo -e 'Section "InputClass"' > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'Identifier "system-keyboard"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'MatchIsKeyboard "on"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'Option "XkbLayout" "es"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'EndSection' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      cat /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      sleep 5
      clear
            ;;
            
        latam)
            clear
            keyboard="latam"
            keymap="latam"
            arch-chroot /mnt /bin/bash -c "localectl --no-convert set-x11-keymap latam"
      arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario localectl --no-convert set-x11-keymap  latam"
      arch-chroot /mnt /bin/bash -c "setxkbmap -layout latam"
      arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario setxkbmap -layout latam"
      echo -e 'Section "InputClass"' > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'Identifier "system-keyboard"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'MatchIsKeyboard "on"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'Option "XkbLayout" "latam"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'EndSection' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      cat /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      sleep 5
      clear
            ;;
            
        us)
            clear
            keyboard="us"
            keymap="us"
            arch-chroot /mnt /bin/bash -c "localectl --no-convert set-x11-keymap us"
      arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario localectl --no-convert set-x11-keymap us"
      arch-chroot /mnt /bin/bash -c "setxkbmap -layout us"
      arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario setxkbmap -layout us"
      echo -e 'Section "InputClass"' > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'Identifier "system-keyboard"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'MatchIsKeyboard "on"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'Option "XkbLayout" "us"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      echo -e 'EndSection' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      cat /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
      sleep 5
      clear
            ;;
            
        otros)
            clear
            selected1=0 
            while [ $selected1 == "0" ];do 
                locales="$(arch-chroot /mnt localectl list-x11-keymap-layouts | awk '$locales=$locales" Keyboard"')" && locales=$(echo "$locales") 
                keyboard=$(dialog --backtitle "Canal de Youtube: Codigo Cristo" --clear --title "-| Teclado en X.org |-" --menu "\n" 15 0 15   ${locales} 2>&1 > /dev/tty) 
                if [ $? == 0 ];then 
                    clear
                    keymap=$keyboard
                    arch-chroot /mnt /bin/bash -c "localectl --no-convert set-x11-keymap $keymap"
          arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario localectl --no-convert set-x11-keymap $keymap"
          arch-chroot /mnt /bin/bash -c "setxkbmap -layout $keymap"
          arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario setxkbmap -layout $keymap"
          echo -e 'Section "InputClass"' > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
          echo -e 'Identifier "system-keyboard"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
          echo -e 'MatchIsKeyboard "on"' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
          echo -e "Option "XkbLayout" "$keymap"" >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
          echo -e 'EndSection' >> /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
          cat /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
          sleep 5
          clear
                    selected1=1 
                else 
                    dialog --backtitle "Canal de Youtube: Codigo Cristo" --title "-| ERROR |-" --stdout --ok-label 'Siguiente' --msgbox "Ingrese correctamente el teclado para continuar" 5 55 
                fi
            done
            ;;
    esac
done
#FIN the X11 keymap
clear

# MENSAJE FINAL
dialog --backtitle "Canal de Youtube: Codigo Cristo" \
--title "-| CREDITOS |-" --ok-label '- ¡ Gracias Totales ! -' --nocancel \
--column-separator "|" --msgbox "\n                    + Creador: Codigo Cristo +\n \
\n+ Aportaciones de la Comunidad: \n \
\n> Miqueas Martinez | @Miqueas2020 \
\n> Wilsson Martee   | @Bourne_Again \
\n> Alex             | @nahuelwexd \
\n> MXHECTORVEGA     | @mxhectorvega \
\n> Cargando...      | @konrc \
\n> Eduard Tolosa    | @edu4rdt " 16 73

clear



#nombre_usuario=$(cat /mnt/etc/passwd | grep '/home' | cut -d: -f1) 
#sed -i "80i $nombre_usuario ALL=(ALL) NOPASSWD: ALL" /mnt/etc/sudoers


#mensaje_install
#sleep 2
#clear
#echo ''
#arch-chroot /mnt /bin/bash -c "alsi -l"



cp pacman-chroot.conf /mnt/etc/pacman.conf



# cp pacman-chroot.conf /etc/pacman.conf
clear
echo ''
echo ''
arch-chroot /mnt /bin/bash -c "sudo -u $nombre_usuario alsi -l"
echo ''
echo https://t.me/ArchLinuxCristo 
echo ''
echo ''
echo ""
printf "\n| La computadora se reiniciara para finalizar |\n| Cuando este apagada la computadora retire la USB o CD |\n\n"

#INICIO PROGRESS BARR
function ProgressBar {
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*6)/10
    let _left=60-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")
# 1.2.1.1 Progreso : [########################################] 100%
printf "\r > Cargando : |${_fill// /▇}${_empty// /-}| ${_progress}%%"

}
# Variables
_start=1

_end=100

for number in $(seq ${_start} ${_end})
do
    sleep 0.1
    ProgressBar ${number} ${_end}
done
#FIN PROGRESS BARR

swapdisco=$( fdisk -l | grep "/dev/\|swap" | grep swap | awk -F ' ' '{print $1}' )
umount -R /mnt
swapoff ${swapdisco}
swapoff -a
swapon -a
clear

reboot

else

# MENSAJE 
dialog --backtitle "$titulo" \
--title "-| Error |-" \
--msgbox "\n> No selecciono todas las opciones disponibles \
\n> Esto puede generar errores por falta de información \n \
\n> Vuelva a seleccionar en orden toda la lista que ofrece el Script Arcris <" 10 80

main

fi


;;
## FIN DE INSTALL

"11")
rm -r arcris
clear && echo "" 
echo -e ""
echo -e "\t\t\t| Visita Nuestra Comunidad - https://t.me/ArchLinuxCristo - by: Arcris |"
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
echo "" && sleep 3 && exit
;;

    esac
done

}

main