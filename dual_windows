#!/bin/bash


titulo="| Instalación de ArchLinux en Español - https://t.me/ArchLinuxCristo |"

#dialog --backtitle "$titulo" --title "-| INTERNET |-" --ok-label 'Siguiente' --msgbox "\n| Primero necesitamos saber si hay conexión a Internet |" 7 60

if ping -c 3 www.google.com &> /dev/null; then
  clear
    dialog --title "-|  Revisando Conexión  |-" --backtitle "$titulo" \
    --ok-label 'Siguiente' --prgbox "ping -c 3 archlinux.org && echo && echo Si Hay Internet!" 15 100 

else
     dialog --title "-|  Conexión a RED  |-" --backtitle "$titulo" \
   --prgbox "\n\nping -c 3 archlinux.org && echo && echo No hay conexión a Internet" 6 100 
  dialog --backtitle "$titulo" --title "-| Error de RED |-" --msgbox "No hay conexión a Internet" 5 60
  dialog --backtitle "$titulo" --title "-| Conexión WiFi |-" --yesno "¿ Tienes red wifi ?" 5 45 
case $? in 
  0)  wifi-menu
    wifinet=$(netctl list | awk -F " " '{print $2}');;
  1)  dialog --backtitle "$titulo" --title "-| Ethernet |-" --msgbox "\nPruebe conectando bien su cable de Ethernet\nIntentalo nuevamente..." 8 50
      exit;;
esac
fi



#Desmontamos todo disco y swapoff
swapdisco=$( fdisk -l | grep "/dev/\|swap" | grep swap | awk -F ' ' '{print $1}' )
umount -R /mnt
swapoff ${swapdisco}
swapoff -a
swapon -a


cmd=(dialog --backtitle "$titulo" --title "-| Distribución del teclado |-" --keep-tite --menu "\n" 10 50 10)

options=(la-latin1  "LatinoAmericano"
         es     "Español"
         us     "Ingles"
         otros    "(+)Teclados")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        es)
            loadkeys es
      keyboard="es"
      loadkeys=$keyboard 
      keymap=$keyboard  
            ;;
            
        la-latin1)
            loadkeys la-latin1
      keyboard="la-latin1"
      loadkeys=$keyboard 
      keymap=$keyboard 
            ;;
            
        us)
            loadkeys us
      keyboard="us"
      loadkeys=$keyboard 
      keymap=$keyboard  
            ;;
            
        otros)
            selected=0 
      while [ $selected == "0" ];do 
        locales="$(localectl list-keymaps | awk '$locales=$locales" Keyboard"')" && locales=$(echo "$locales") 
        keyboard=$(dialog --backtitle "$titulo" --clear --title "-| Distribución del teclado: |-" --menu "\n" 15 50 15   ${locales} 2>&1 > /dev/tty) 
        if [ $? == 0 ];then 
          loadkeys $keyboard 
          keymap=$keyboard 
          selected=1 
        else 
          dialog --backtitle "$titulo" --title "-| ERROR |-" --stdout --ok-label 'Siguiente' --msgbox "Ingrese una distribución del teclado para continuar" 5 55 
        fi
      done
            ;;
    esac
done


dialog --backtitle "$titulo" --title "-| Mensaje |-" --infobox "\n> UEFI trabaja con discos en GPT \n\n> UEFI su partición boot es formateada en FAT32 \n\n> BIOS LEGACY trabaja con discos en DOS/MBR\n\n> BIOS LEGACY su partición boot es formateada en EXT4\n( La partición boot en linux es opcional )" 12 60
sleep 5



part="$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}')" 
disk=$(dialog --backtitle "$titulo" --clear --title "| Selección de Disco |"  --ok-label 'Seleccionar' --no-cancel --menu "Elige el disco para Linux" 10 50 0 ${part} 2>&1 >/dev/tty)

fdisk -l $disk > /tmp/partitions


#SISTEMA UEFI O BIOS
parted $disk print | grep gpt > uefi2.txt
echo "Partition Table: gpt" > uefi3.txt
uefi=$( parted $disk print | grep -ic gpt )

#UEFI WINDOWS
if [ $uefi == 1 ] && [ -d /sys/firmware/efi ]
then

dialog --backtitle "|  SISTEMA UEFI Y DISCO GPT  |" --title "|  SISTEMA UEFI |"  --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && cat /tmp/partitions | grep gpt && echo "Su disco SI es compatible para continuar" && echo "" && cat /tmp/partitions | grep /dev/ )" 18 150


partitioner=$(dialog --backtitle "$titulo" --clear --title "-| Particionado de Disco |-" --ok-label 'Seleccionar' --no-cancel --menu ">\n> Crear particiones correctamente\n>" 9 0 0\
    "cfdisk" "Un particionador casi grafico" \
    "fdisk" "Un particionador de linea de comandos" \
    "parted" "Un particionador de linea de comandos" 2>&1 > /dev/tty)
$partitioner $disk

clear
partprobe
fdisk -l "$disk" > /tmp/partitions

partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1,$5}')"
p="$(echo "$partitions")"
#--title "| Elige la partición de Administrador |"
part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear \
  --menu "Selecciona la partición para Root: [ / ]" 15 60 0 ${p} 2>&1 > /dev/tty)
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Verificando estado de Disco |-" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
rootfs=$part


p=$(echo "$p" | grep -v $part)



partitioning(){
  fs="$(ls /bin/* | grep mkfs | awk '{if (NR!=1) {print}}' | sed 's/^.\{10\}//g' | awk '{print substr($0, 0, length($0)-0)}' | awk '$fs=$fs" Type"' |  awk '{if (NR!=1) {print}}' | grep -v cramfs | grep -v hfsplus | grep -v  bfs | grep -v msdos | grep -v minix)"
  format=$(dialog --backtitle "$titulo" --clear --title '-| FORMATO DE PARTICIÓN |-' \
          --ok-label 'Seleccionar' --cancel-label 'No formatear' --menu "\nElige el tipo de sistema de archivos\n\nEXT4 >> Para Linux\nFAT >> Para FAT32 para la partición UEFI\nNTFS >> Para Windows\n\n$(fdisk -l $disk | grep dos || fdisk -l $disk | grep gpt)" 15 50 0 ${fs} 2>&1 > /dev/tty)      

  case $format in
    ext2) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT2 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext2 -F $part" 20 80;;
      ext3) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT3 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext3 -F $part" 20 80;;
      ext4) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT4 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext4 -F $part" 20 80;;
      reiserfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en ReiserFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.reiserfs -f -f $part" 20 80;;
      vfat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en FAT 32 | Uso General para particiones UEFI... |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.vfat -F32 $part" 7 80;;
      fat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en FAT 32 | Uso General para particiones UEFI... |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.fat -F32 $part" 7 80;;
      exfat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en ExFAT |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.exfat $part" 20 80;;
      ntfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en NTFS - Windows |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ntfs -Q $part" 20 80;;
      f2fs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en F2FS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && modprobe f2fs && mkfs.f2fs $part" 20 80;;
      jfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en JFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.jfs -q $part" 20 80;;
      xfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en XFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.xfs -f $part" 20 80;;
      nilfs2) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en NilFS2 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.nilfs2 -f $part" 20 80;;
      udf) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en UDF |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.udf -F $part" 20 80;;
      btrfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en BTRFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.btrfs -f $part" 20 80;;
  esac
}

partitioning
mount "$rootfs" /mnt


cmd=(dialog --backtitle "$titulo" --separate-output --ok-label 'Montar y formatear selección' --cancel-label 'No tengo más particiones' \--checklist "Selecciona otros puntos de montajes:\n\
[SPACE] para marcar * \n\
[ENTER] para continuar." 10 80 0)
options=(
  "/home" "Archivos de usuario" off
  "/tmp" "Archivos temporales" off
  "/usr" "Datos estáticos" off
  "/var" "Datos de variables" off
  "/srv" "Datos de los servicios prestados por este sistema" off
  "/opt" "Aplicaciones de terceros o privativos" off
  "swap" "Memoria virtual RAM" off
  )
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
  case $choice in        
    "/home")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: home |" 0 55 0 ${p} 2>&1 > /dev/tty )
      homefs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      homedir="home"
      mkdir -p /mnt/home
      mount "$homefs" /mnt/home
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/tmp")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: tmp |" 0 55 0 ${p} 2>&1 > /dev/tty )
      tmpfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      tmpdir="tmp"
      mkdir -p /mnt/tmp
      mount "$tmpfs" /mnt/tmp
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/usr")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: usr |" 0 55 0 ${p} 2>&1 > /dev/tty )
      usrfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      usrdir="usr"
      mkdir -p /mnt/usr
      mount "$usrfs" /mnt/usr
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/var")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: var |" 0 55 0 ${p} 2>&1 > /dev/tty )
      varfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      vardir="var"
      mkdir -p /mnt/var
      mount "$varfs" /mnt/var
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/srv")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: srv |" 0 55 0 ${p} 2>&1 > /dev/tty )
      srvfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      srvdir="srv"
      mkdir -p /mnt/srv
      mount "$srvfs" /mnt/srv
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/opt")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: opt |" 0 55 0 ${p} 2>&1 > /dev/tty )
      optfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      optdir="opt"
      mkdir -p /mnt/opt
      mount "$optfs" /mnt/opt
      p=$(echo "$p" | grep -v "$part")
      ;;
    "swap")
#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: swap |" 0 55 0 ${p} 2>&1 > /dev/tty)
      dialog --title "| Formateando Swap Linux |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkswap $part && swapon $part" 10 100
      swap="$part"
      p=$(echo "$p" | grep -v "$part")
  esac
done






#WINDOWS
part="$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}')" 
disk=$(dialog --backtitle "$titulo" --clear --title "| Selección de Disco |"  --ok-label 'Seleccionar' --no-cancel --menu "\nSelecciona el disco de Windows\n " 10 50 0 ${part} 2>&1 >/dev/tty)
fdisk -l $disk > /tmp/partitions

partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1,$5}')"
p="$(echo "$partitions")"




part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --cancel-label 'No tengo' --clear --title "| Partición EFI System |" \
  --menu "\nSelecciona la partición de arranque EFI\n\n$(fdisk -l $disk | grep EFI)\n " 12 80 0 ${p} 2>&1 > /dev/tty)
#Variablepara EFI WINDOWS
efiwin_osfs=$part
mkdir -p /mnt/efi
clear
mount "$efiwin_osfs" /mnt/efi
clear
p=$(echo "$p" | grep -v "$part")




part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --cancel-label 'No tengo' --clear --title "| Disco C:\\ |" \
  --menu "\nElige la partición donde esta el Disco C:\\\nLa ruta donde estara es: /media/windows en NTFS\n " 12 80 0 ${p} 2>&1 > /dev/tty)
#VariableparadatosDISCO C
datoscwin_osfs=$part
mkdir -p /mnt/media
clear
mkdir -p /mnt/media/windows
clear
mount "$datoscwin_osfs" /mnt/media/windows
clear
p=$(echo "$p" | grep -v "$part")



clear
partprobe
clear



clear
zonahorariaok=$(curl https://ipapi.co/timezone)
timedatectl set-timezone $zonahorariaok
ntpd -qg | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Zona Horaria en LiveCD, Espere... |" 25 80; sleep 3
hwclock --systohc
timedatectl status | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Hora Local - Espere... |" 13 65; sleep 5
clear
pacman -Sy archlinux-keyring --noconfirm | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Claves Actualizadas del LiveCD, Espere... |" 25 100; sleep 3
cp pacman.conf /etc/pacman.conf

pacman -Sy reflector --noconfirm | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Instalando paquetes en el LiveCD, espere... |" 25 80; sleep 3
reflector --latest 10 --sort rate --save /etc/pacman.d/mirrorlist
clear
for i in $(seq 1 100)
do
    sleep 0.04 
    echo $i
done | dialog --backtitle "$titulo" --title '| Actualizando MirrorLists |' --gauge "\nActualizando MirrorList en el LiveCD..." 7 60 0

cat /etc/pacman.d/mirrorlist | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "Mirrors List del LiveCD > Actualizadas, espere..." 25 2000; sleep 5





kernel_var=0 
while [ "$kernel_var" = "0" ] ; do

  kernel_select=`dialog --title "| KERNEL LINUX |" --backtitle "$titulo" \
    --stdout --ok-label "Seleccionar" --no-cancel --menu "Elige que kernel necesitas: \nLinux Stable es la mejor opción para iniciar\nLas otras opciones tienen un estilo diferente para instalar Drivers\nLas otras modificaciones del kernel trabajan con Drivers Libres" 14 0 2000 linux-stable "Kernel en su versión estable y módulos de Vanilla Linux" linux-hardened "Kernel enfocado en Seguridad" linux-lts "Kernel con soporte de larga duración" linux-zen "Kernel del esfuerzo colaborativo de varios hackers"`
   
  if [ $kernel_select == linux-stable ]; then

##################################################################################

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Instalando Sistema Base - Linux Stable |-" \
--stdout --ok-label "Siguiente" --prgbox 'pacstrap /mnt base base-devel reflector && \
reflector --latest 10 --sort rate --save /mnt/etc/pacman.d/mirrorlist && \
cat /mnt/etc/pacman.d/mirrorlist && \
cp pacman.conf /mnt/etc/pacman.conf && \
arch-chroot /mnt pacman -Sy linux linux-headers linux-firmware mkinitcpio \
cryptsetup lvm2 logrotate nano  \
dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager \
iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion \
e2fsprogs less ntp usb_modeswitch usbutils which ntfs-3g mtools exfat-utils cifs-utils \
hddtemp alsi inxi-git unzip zip yay-bin --noconfirm' 25 80

#alsa-utils alsa-plugins alsa-oss alsa-firmware pamixer
##################################################################################

r8168=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'RTL8111/8168/8411' ")
    if [[ $r8168  = *RTL8111/8168/8411* || $r8168 = *Rtl8111/8168/8411* || $r8168 = *rtl8111/8168/8411* ]]
    then      
    dialog --backtitle "RTL8111/8168/8411" --title "| Driver Ethernet 8168 |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy r8168 --noconfirm && echo blacklist r8169 > /mnt/etc/modprobe.d/blacklist.conf && cat /mnt/etc/modprobe.d/blacklist.conf" 25 100
    clear
    arch-chroot /mnt /bin/bash -c "modprobe r8168"
    arch-chroot /mnt /bin/bash -c "systemctl enable ifplugd@enp4s0.service"
    else
    echo ""
    fi
    

dialog --backtitle "$titulo" --title "| Microcode |" --yesno "\n¿Actualizaciones para el microcódigo del procesador?" 7 58 
case $? in 
  0) microcode=$(lspci -k | grep 'Host bridge: Intel')
    lspci -k | grep 'Host bridge:'  > procesador
    if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
    then      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy intel-ucode --noconfirm" 25 80

    else
      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy amd-ucode --noconfirm" 25 80
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para WiFi |-" --defaultno  --yesno "\n¿Tienes Tarjeta de Wifi?" 7 45 
case $? in 
  0) broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
    if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
    then      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy broadcom-wl wireless-regdb wpa_supplicant wireless_tools --noconfirm && arch-chroot /mnt /bin/bash -c 'modprobe wl' && arch-chroot /mnt /bin/bash -c 'rmmod b43' && arch-chroot /mnt /bin/bash -c 'rmmod ssb' && echo listo" 25 100
    else
      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm" 25 80
        
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para Touchpad |-" --defaultno --yesno "\n¿Tienes Touchpad?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap  /mnt xf86-input-synaptics xf86-input-libinput xorg-xinput" 25 80;;
  1) 
esac
dialog --backtitle "$titulo" --title "-| Driver para Bluetooth |-" --defaultno --yesno "\n¿Tienes Bluetooth?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap /mnt bluez bluez-utils pulseaudio-bluetooth blueman" 25 80
    arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
    clear;;
  1) 
esac
  kernel_var=1


#####hardened
  elif [ $kernel_select == linux-hardened ]; then

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Instalando Sistema Base - Linux Hardened |-" \
--stdout --ok-label "Siguiente" --prgbox 'pacstrap /mnt base base-devel reflector && \
reflector --latest 10 --sort rate --save /mnt/etc/pacman.d/mirrorlist && \
cat /mnt/etc/pacman.d/mirrorlist && \
cp pacman.conf /mnt/etc/pacman.conf && \
arch-chroot /mnt pacman -Sy linux-hardened linux-hardened-headers linux-firmware mkinitcpio \
cryptsetup lvm2 logrotate nano  \
dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager \
iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion \
e2fsprogs less ntp usb_modeswitch usbutils which ntfs-3g mtools exfat-utils cifs-utils \
hddtemp alsi inxi-git unzip zip yay-bin --noconfirm' 25 80

dialog --backtitle "$titulo" --title "| Microcode |" --yesno "\n¿Actualizaciones para el microcódigo del procesador?" 7 58 
case $? in 
  0) microcode=$(lspci -k | grep 'Host bridge: Intel')
    lspci -k | grep 'Host bridge:'  > procesador
    if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
    then      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy intel-ucode --noconfirm" 25 80

    else
      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy amd-ucode --noconfirm" 25 80
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para WiFi |-" --defaultno  --yesno "\n¿Tienes Tarjeta de Wifi?" 7 45 
case $? in 
  0) broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
    if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
    then      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy broadcom-wl-dkms wireless-regdb wpa_supplicant wireless_tools --noconfirm && arch-chroot /mnt /bin/bash -c 'modprobe wl' && arch-chroot /mnt /bin/bash -c 'rmmod b43' && arch-chroot /mnt /bin/bash -c 'rmmod ssb' && echo listo" 25 100
    else
      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm" 25 80
        
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para Touchpad |-" --defaultno --yesno "\n¿Tienes Touchpad?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap  /mnt xf86-input-synaptics xf86-input-libinput xorg-xinput" 25 80;;
  1) 
esac
dialog --backtitle "$titulo" --title "-| Driver para Bluetooth |-" --defaultno --yesno "\n¿Tienes Bluetooth?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap /mnt bluez bluez-utils pulseaudio-bluetooth blueman" 25 80
    arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
    clear;;
  1) 
esac
  kernel_var=1



######LTS
  elif [ $kernel_select == linux-lts ]; then
##################################################################################

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Instalando Sistema Base - Linux LTS |-" \
--stdout --ok-label "Siguiente" --prgbox 'pacstrap /mnt base base-devel reflector && \
reflector --latest 10 --sort rate --save /mnt/etc/pacman.d/mirrorlist && \
cat /mnt/etc/pacman.d/mirrorlist && \
cp pacman.conf /mnt/etc/pacman.conf && \
arch-chroot /mnt pacman -Sy linux-lts linux-lts-headers linux-firmware mkinitcpio \
cryptsetup lvm2 logrotate nano  \
dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager \
iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion \
e2fsprogs less ntp usb_modeswitch usbutils which ntfs-3g mtools exfat-utils cifs-utils \
hddtemp alsi inxi-git unzip zip yay-bin --noconfirm' 25 80

#alsa-utils alsa-plugins alsa-oss alsa-firmware pamixer
##################################################################################

r8168=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'RTL8111/8168/8411' ")
    if [[ $r8168  = *RTL8111/8168/8411* || $r8168 = *Rtl8111/8168/8411* || $r8168 = *rtl8111/8168/8411* ]]
    then      
    dialog --backtitle "RTL8111/8168/8411" --title "| Driver Ethernet 8168 |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy r8168 --noconfirm && echo blacklist r8169 > /mnt/etc/modprobe.d/blacklist.conf && cat /mnt/etc/modprobe.d/blacklist.conf" 25 100
    clear
    arch-chroot /mnt /bin/bash -c "modprobe r8168"
    arch-chroot /mnt /bin/bash -c "systemctl enable ifplugd@enp4s0.service"
    else
    echo ""
    fi
    

dialog --backtitle "$titulo" --title "| Microcode |" --yesno "\n¿Actualizaciones para el microcódigo del procesador?" 7 58 
case $? in 
  0) microcode=$(lspci -k | grep 'Host bridge: Intel')
    lspci -k | grep 'Host bridge:'  > procesador
    if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
    then      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy intel-ucode --noconfirm" 25 80

    else
      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy amd-ucode --noconfirm" 25 80
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para WiFi |-" --defaultno  --yesno "\n¿Tienes Tarjeta de Wifi?" 7 45 
case $? in 
  0) broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
    if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
    then      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy broadcom-wl-dkms wireless-regdb wpa_supplicant wireless_tools --noconfirm && arch-chroot /mnt /bin/bash -c 'modprobe wl' && arch-chroot /mnt /bin/bash -c 'rmmod b43' && arch-chroot /mnt /bin/bash -c 'rmmod ssb' && echo listo" 25 100
    else
      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm" 25 80
        
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para Touchpad |-" --defaultno --yesno "\n¿Tienes Touchpad?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap  /mnt xf86-input-synaptics xf86-input-libinput xorg-xinput" 25 80;;
  1) 
esac
dialog --backtitle "$titulo" --title "-| Driver para Bluetooth |-" --defaultno --yesno "\n¿Tienes Bluetooth?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap /mnt bluez bluez-utils pulseaudio-bluetooth blueman" 25 80
    arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
    clear;;
  1) 
esac
  kernel_var=1  


###### ZEN
  elif [ $kernel_select == linux-zen ]; then
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Instalando Sistema Base - Linux ZEN |-" \
--stdout --ok-label "Siguiente" --prgbox 'pacstrap /mnt base base-devel reflector && \
reflector --latest 10 --sort rate --save /mnt/etc/pacman.d/mirrorlist && \
cat /mnt/etc/pacman.d/mirrorlist && \
cp pacman.conf /mnt/etc/pacman.conf && \
arch-chroot /mnt pacman -Sy linux-zen linux-zen-headers linux-firmware mkinitcpio \
cryptsetup lvm2 logrotate nano  \
dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager \
iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion \
e2fsprogs less ntp usb_modeswitch usbutils which ntfs-3g mtools exfat-utils cifs-utils \
hddtemp alsi inxi-git unzip zip yay-bin --noconfirm' 25 80

dialog --backtitle "$titulo" --title "| Microcode |" --yesno "\n¿Actualizaciones para el microcódigo del procesador?" 7 58 
case $? in 
  0) microcode=$(lspci -k | grep 'Host bridge: Intel')
    lspci -k | grep 'Host bridge:'  > procesador
    if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
    then      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy intel-ucode --noconfirm" 25 80

    else
      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy amd-ucode --noconfirm" 25 80
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para WiFi |-" --defaultno  --yesno "\n¿Tienes Tarjeta de Wifi?" 7 45 
case $? in 
  0) broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
    if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
    then      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy broadcom-wl-dkms wireless-regdb wpa_supplicant wireless_tools --noconfirm && arch-chroot /mnt /bin/bash -c 'modprobe wl' && arch-chroot /mnt /bin/bash -c 'rmmod b43' && arch-chroot /mnt /bin/bash -c 'rmmod ssb' && echo listo" 25 100
    else
      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm" 25 80
        
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para Touchpad |-" --defaultno --yesno "\n¿Tienes Touchpad?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap  /mnt xf86-input-synaptics xf86-input-libinput xorg-xinput" 25 80;;
  1) 
esac
dialog --backtitle "$titulo" --title "-| Driver para Bluetooth |-" --defaultno --yesno "\n¿Tienes Bluetooth?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap /mnt bluez bluez-utils pulseaudio-bluetooth blueman" 25 80
    arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
    clear;;
  1) 
esac
  kernel_var=1
  
  
  fi
done


#FSTAB
rm /mnt/etc/fstab 
genfstab -U -p /mnt > /mnt/etc/fstab 
dialog --backtitle "-| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |-" --title "| Archivo FSTAB |"   --stdout --ok-label 'Siguiente' --msgbox "$(cat /mnt/etc/fstab)" 20 1000

locales="$(cat /mnt/etc/locale.gen | grep .UTF-8 | sed '1,4d' | sed 's/\(.\{1\}\)//')"
locale=$(dialog --backtitle "$titulo" --clear --title "| Selecciona tu país |" \
  --menu "\nEjemplos:\nes_PE = Perú\nes_AR = Argentina\nes_MX = Mexico" 25 0 20 ${locales} 2>&1 > /dev/tty)
sed -i "/${locale}/ s/# *//" /mnt/etc/locale.gen


locales="$(cat /mnt/etc/locale.gen | grep .UTF-8 | sed '/#/d')"
locale=$(dialog --backtitle "$titulo" --clear --title "| Selecciona tu país |" \
  --menu "Confirma tu idioma y país" 0 0 0 ${locales} 2>&1 > /dev/tty)


echo "LANG=$locale" > /mnt/etc/locale.conf && cat /mnt/etc/locale.conf | dialog --backtitle "-| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |-" --progressbox "Idioma del Sistema > Actualizando" 10 50; sleep 3

arch-chroot /mnt /bin/bash -c "locale-gen" | dialog --backtitle "-| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |-" --progressbox "Idioma del Sistema > Actualizando" 10 50; sleep 2

arch-chroot /mnt /bin/bash -c "export $(cat /mnt/etc/locale.conf)" 

echo "KEYMAP=$keymap" > /mnt/etc/vconsole.conf && cat /mnt/etc/vconsole.conf | dialog --backtitle "-| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |-" --progressbox "Idioma del Sistema > Actualizando" 10 50; sleep 3

#ZONA HORARIA
# URL="https://ipapi.co/timezone"
# wget "$URL" 2>&1 | \
# for i_conta_zona in $(seq 1 100)
# do
#    sleep 0.025 
#    echo $i_conta_zona
# done |  \
# dialog  --backtitle "$titulo" --title "| ZONA HORARIA |" --gauge "Gracias https://ipapi.co/timezone" 6 60

dialog --backtitle "$titulo" --title "| ZONA HORARIA |" --defaultno --yesno "\n       >>> $zonahorariaok <<<\n\n       ¿Deseas modificarlo?" 8 40 


if [ "$?" = "0" ]; then

selected=0 
timezonedir=/usr/share/zoneinfo
while [ "$selected" = "0" ] 
do

  clear
  check=$(ls -l $timezonedir | grep -v .tab | awk '/drwx/' | awk -F " " '{print $9}' | awk '{if (NR!=1) {print}}' | head -1)
  if [[ $check != America ]]; then 
    echo "../ UP" >timezones 
  fi

  ls -l $timezonedir | grep -v .tab | awk '/drwx/' | awk -F " " '{print $9}' | awk '{print $0"/"}' | awk '$fs=$fs" Time"' | awk '{if (NR!=1) {print}}'>>timezones 
  
  ls -l $timezonedir | grep -v .tab | awk '/-rw-/' | awk -F " " '{print $9}' | awk '$fs=$fs" Time"' | awk '{if (NR!=1) {print}}'>>timezones
  timezones=$(cat timezones) 
  rm timezones 
  timezone=$(dialog --backtitle "| Instalación de ArchLinux |" --clear --title "Tu Zona Horaria es $(cat timezone): " \
      --menu "Ingresa la zona horaria" 20 0 20 ${timezones} 2>&1 >/dev/tty) 
  clear
  if [ "$?" = "0" ] 
  then
    if [[ $timezone == *"/"* ]]; then 
      timezonedir=$timezonedir/$timezone
    else 
      ln -sf $timezonedir${timezone} /mnt/etc/localtime
      selected=1
    fi
  fi
done

else

#zone="$(cat timezone)"
ln -sf /usr/share/zoneinfo/$zonahorariaok /mnt/etc/localtime

fi



dialog --backtitle "$titulo" \
--title "| REGLAS EN PERFILES NUEVOS |" \
--msgbox '\n> No se permite iniciar nombre en Mayúsculas \n> Ni con números o Caracteres especiales\n> Máximo de 8 caracteres\n> En su CLAVE no use la letra “ñ”\n> Ni letras con tilde\n> Por ejemplo: è, ü, etc...\n> Ni otros caracteres especiales\n> ~!@#$%^&*_-+=|\(){}[]:;<;>;,.?/\n\n     >>  Ya que pueden causar errores  <<' 15 50


#nombre de pc (hostname)
hostname=$(dialog --backtitle "$titulo" --title "| Hostname |" --inputbox "|  Nombre del computador  |" 8 40 2>&1 > /dev/tty)
echo "$hostname" > /mnt/etc/hostname
echo "$hostname" > hostname
echo "127.0.1.1 $(cat hostname).localdomain $(cat hostname)" > /mnt/etc/hosts
rm hostname

#Clave para root
while [ $rootpasswd != $rootpasswd2 ]
do 
    rootpasswd=$(dialog --backtitle "$titulo" --title "|  Clave de Root  |" --insecure --passwordbox "|  Ingrese contraseña de root  |" 8 40 2>&1 > /dev/tty)
    rootpasswd2=$(dialog --backtitle "$titulo" --title "|  Clave de Root |" --insecure --passwordbox "|  Confirme contraseña de root  |" 8 40 2>&1 > /dev/tty)
    if [ $rootpasswd != $rootpasswd2 ];then 
     dialog --backtitle "$titulo" --title "| Clave incorrecta |" --msgbox 'Las contraseñas no coinciden\n      Intente nuevamente...' 6 50
  else 
    clear
  fi
done

dialog --backtitle "$titulo" --title "| Clave Correcta |" --msgbox '\nContraseña Conrrecta!' 8 40
arch-chroot /mnt /bin/sh -c "echo root:$rootpasswd | chpasswd"



#Agregando usuario
username=$(dialog --backtitle "$titulo" --title "|  Creación de usuario  |" \
           --form "\nIngresa tu Usuario Nuevo\n\nDebe iniciar en letra y en minúscula\nNada de caracteres especiales\n " 0 0 0 \
           " Usuario Nuevo:" 1 1 "user" 1 17 25 30 2>&1 > /dev/tty)

user=$(echo "$username" | sed -n 1p)
arch-chroot /mnt /bin/sh -c "useradd -m -g users -s /bin/bash $user"
while [ $userpasswd != $userpasswd2 ]
do 
    userpasswd=$(dialog --backtitle "$titulo" --title "|  Contraseña de $user  |" --insecure --passwordbox "Contraseña de $user" 8 40 2>&1 > /dev/tty)
    userpasswd2=$(dialog --backtitle "$titulo" --title "|  Contraseña de $user  |" --insecure --passwordbox "Confirma tu clave de $user" 8 40 2>&1 > /dev/tty)
    if [ $userpasswd != $userpasswd2 ];then 
     dialog --backtitle "$titulo" --title " Clave incorrecta " --msgbox 'Las contraseñas no coinciden\n      Intente nuevamente...' 6 50
  else 
    clear
  fi
done
dialog --backtitle "$titulo" --title "| Clave Correcta |" --msgbox '\nContraseña Conrrecta!' 8 40
arch-chroot /mnt /bin/bash -c "echo $user:$userpasswd | chpasswd"
#sed -i '/%wheel ALL=(ALL) ALL/s/^#//g' /mnt/etc/sudoers
arch-chroot /mnt /bin/bash -c "hwclock -w"


#activando servicios dhcpcd NetworkManager sshd
#Actualiza Servicios y Mirrors
arch-chroot /mnt /bin/bash -c "systemctl enable dhcpcd NetworkManager"
clear

#  if [[ -n $wifinet ]]; then
#  #Copia Red
#  wlan=$(echo /proc/net/dev*/w*)
#  lan=${wlan##*/}
#  wifinet=$(netctl list | awk -F " " '{print $2}')
#  numeronetctl=$(echo $lan | wc -c)
#  wifinetnuevo=$(netctl list | awk -F " " '{print $2}' | tail -c +${numeronetctl} | tail -c +2)
#
#  cp /etc/netctl/$wifinet /mnt/etc/netctl/$wifinetnuevo
#  arch-chroot /mnt /bin/bash -c "netctl enable $wifinetnuevo"
#  clear
#  fi
#Copia Red



## GRUB
uefi=$( parted $disk print | grep -ic gpt )

dialog --backtitle "| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |" --title "|  SISTEMA UEFI Y DISCO GPT  |" --infobox "\n           | SU SISTEMA ES UEFI |" 5 50; sleep 5
dialog --backtitle "|  SISTEMA UEFI Y DISCO GPT  |" --title "| Instalando GRUB - UEFI |" --stdout --ok-label "Siguiente" --prgbox "arch-chroot /mnt pacman -Sy grub efibootmgr os-prober dosfstools ntfs-3g mtools --noconfirm" 22 80
dialog --backtitle "|  SISTEMA UEFI Y DISCO GPT  |" --title "| Instalando GRUB - UEFI |" --stdout --ok-label "Siguiente" --prgbox "echo "" && echo '>>> Su disco es GPT | UEFI es el sistema Moderno <<<' && cat /tmp/partitions | grep gpt && echo '' && echo 'Instalando >> bootx64.efi' && arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --removable' && echo '' && echo 'Instalando >> grubx64.efi' && arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=Arch' " 20 80
  sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
  sed -i '7d' /mnt/etc/default/grub
dialog --backtitle "|  SISTEMA UEFI Y DISCO GPT  |" --title "| Instalando GRUB - UEFI |" --stdout --ok-label "Siguiente" --prgbox "echo '' && arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg && echo '' && echo 'ls -l /mnt/boot' && ls -l /mnt/boot && echo '' && echo 'Lea bien que no tenga ningún error marcado' && echo '> Confirme tener las IMG de linux para el arranque' && echo '> Confirme tener la carpeta de GRUB para el arranque' " 25 80
# FIN GRUB


clear
arch-chroot /mnt /bin/bash -c "pacman -Sy xdg-user-dirs --noconfirm" | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Creando Directorios... |" 25 80; sleep 3
clear
arch-chroot /mnt /bin/bash -c "xdg-user-dirs-update --force"
export $(cat /mnt/etc/locale.conf)

cp pacman-chroot.conf /mnt/etc/pacman.conf
echo ""
echo ""
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm" && echo "" && echo ""
arch-chroot /mnt /bin/bash -c "alsi"
echo ""
echo ""
arch-chroot /mnt /bin/bash -c "inxi -Gx"
echo ""
echo ""

#INICIO PROGRESS BARR
function ProgressBar {
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*6)/10
    let _left=60-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")
# 1.2.1.1 Progreso : [########################################] 100%
printf "\r > Cargando : |${_fill// /▇}${_empty// /-}| ${_progress}%%"

}
# Variables
_start=1

_end=100

for number in $(seq ${_start} ${_end})
do
    sleep 0.06
    ProgressBar ${number} ${_end}
done
#FIN PROGRESS BARR

nombre_usuario=$(cat /mnt/etc/passwd | grep '/home' | cut -d: -f1) 
sed -i "80i $nombre_usuario ALL=(ALL) NOPASSWD: ALL" /mnt/etc/sudoers

echo ""
printf "\n| La computadora se reiniciara para finalizar |\n| Cuando este apagada la computadora retire la USB o CD |\n\n"
sleep 5

#Copia el script posterior a la instalación en el disco duro
# cp pacman.conf /mnt/etc/pacman.conf
# cp pacman-chroot.conf /mnt/root
# chmod +x /mnt/root/pacman-chroot.conf

cp chroot /mnt/root
chmod +x /mnt/root/chroot
cp zshrc /mnt/root
chmod +x /mnt/root/zshrc
cp .bashrc /mnt/root/bashrc
chmod +x /mnt/root/bashrc

cp .dialogrc /mnt/root
chmod +x /mnt/root/.dialogrc
cp .dialogrc /mnt/root
chmod +x /mnt/root/.dialogrc

mkdir /mnt/etc/pacman.d/hooks/
cp mirrorupgrade.hook /mnt/etc/pacman.d/hooks/mirrorupgrade.hook 
chmod +x /mnt/etc/pacman.d/hooks/mirrorupgrade.hook

sed -i "s/selectedkeymap/${keymap}/g" /mnt/root/chroot

#Prepare el sistema para iniciar directamente en la raíz y ejecute el script posterior a la instalación
mkdir /mnt/etc/systemd/system/getty@tty1.service.d
echo -e "[Service]\nExecStart=\nExecStart=-/sbin/agetty --autologin root --noclear %I 38400 linux" > /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
echo "sh chroot" >> /mnt/root/.bashrc
echo -e "if [ -f ~/.bashrc ]; then\n\tsource ~/.bashrc\nfi" >> /mnt/root/.bash_profile

swapdisco=$( fdisk -l | grep "/dev/\|swap" | grep swap | awk -F ' ' '{print $1}' )
umount -R /mnt
swapoff ${swapdisco}
swapoff -a
swapon -a

reboot






#UEFI - DOS MBR INCORRECTO
elif [ $uefi == 0 ] && [ -d /sys/firmware/efi ]
then
dialog --backtitle "|  SISTEMA UEFI Y DISCO DOS MBR  |" --title "|  SISTEMA UEFI TRABAJA CON DISCOS GPT |"   --stdout --ok-label 'Reiniciar' --msgbox "\nUsted inicio la USB en sistema UEFI y su disco es DOS MBR \
\n\nReinicie su sistema e ingrese en modo BIOS LEGACY \
\n\nSi convierte su disco a GPT a DOS MBR perderá \nToda su información de Windows Instalado\n\nRecomendación: Reinicie e inicie CD o USB en BIOS LEGACY" 13 65
reboot




#BIOS LEGACY
elif [ $uefi == 0 ]
then
  

dialog --backtitle "|  SISTEMA BIOS LEGACY Y DISCO MBR  |" --title "|  SISTEMA BIOS LEGACY |"  --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && cat /tmp/partitions | grep dos && echo "Su disco si es compatible para continuar" && echo "" && cat /tmp/partitions | grep /dev/ )" 15 150


partitioner=$(dialog --backtitle "$titulo" --clear --title "-| Particionado de Disco |-" --ok-label 'Seleccionar' --no-cancel --menu ">\n> Crear particiones correctamente\n>" 9 0 0\
    "cfdisk" "Un particionador casi grafico" \
    "fdisk" "Un particionador de linea de comandos" \
    "parted" "Un particionador de linea de comandos" 2>&1 > /dev/tty)
$partitioner $disk

fdisk -l "$disk" > /tmp/partitions

partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1,$5}')"
p="$(echo "$partitions")"
#--title "| Elige la partición de Administrador |"
part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear \
  --menu "Selecciona la partición para Root: [ / ]" 15 60 0 ${p} 2>&1 > /dev/tty)
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Verificando estado de Disco |-" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
rootfs=$part


p=$(echo "$p" | grep -v $part)



partitioning(){
  fs="$(ls /bin/* | grep mkfs | awk '{if (NR!=1) {print}}' | sed 's/^.\{10\}//g' | awk '{print substr($0, 0, length($0)-0)}' | awk '$fs=$fs" Type"' |  awk '{if (NR!=1) {print}}' | grep -v cramfs | grep -v hfsplus | grep -v  bfs | grep -v msdos | grep -v minix)"
  format=$(dialog --backtitle "$titulo" --clear --title '-| FORMATO DE PARTICIÓN |-' \
          --ok-label 'Seleccionar' --cancel-label 'No formatear' --menu "\nElige el tipo de sistema de archivos\n\nEXT4 >> Para Linux\nFAT >> Para FAT32 para la partición UEFI\nNTFS >> Para Windows\n\n$(fdisk -l $disk | grep dos || fdisk -l $disk | grep gpt)" 15 50 0 ${fs} 2>&1 > /dev/tty)      

  case $format in
    ext2) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT2 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext2 -F $part" 20 80;;
      ext3) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT3 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext3 -F $part" 20 80;;
      ext4) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT4 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext4 -F $part" 20 80;;
      reiserfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en ReiserFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.reiserfs -f -f $part" 20 80;;
      vfat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en FAT 32 | Uso General para particiones UEFI... |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.vfat -F32 $part" 7 80;;
      fat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en FAT 32 | Uso General para particiones UEFI... |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.fat -F32 $part" 7 80;;
      exfat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en ExFAT |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.exfat $part" 20 80;;
      ntfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en NTFS - Windows |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ntfs -Q $part" 20 80;;
      f2fs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en F2FS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && modprobe f2fs && mkfs.f2fs $part" 20 80;;
      jfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en JFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.jfs -q $part" 20 80;;
      xfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en XFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.xfs -f $part" 20 80;;
      nilfs2) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en NilFS2 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.nilfs2 -f $part" 20 80;;
      udf) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en UDF |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.udf -F $part" 20 80;;
      btrfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en BTRFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.btrfs -f $part" 20 80;;
  esac
}

partitioning
mount "$rootfs" /mnt


cmd=(dialog --backtitle "$titulo" --separate-output --ok-label 'Montar y formatear selección' --cancel-label 'No tengo más particiones' \--checklist "Selecciona otros puntos de montajes:\n\
[SPACE] para marcar * \n\
[ENTER] para continuar." 10 80 0)
options=(
  "/home" "Archivos de usuario" off
  "/tmp" "Archivos temporales" off
  "/usr" "Datos estáticos" off
  "/var" "Datos de variables" off
  "/srv" "Datos de los servicios prestados por este sistema" off
  "/opt" "Aplicaciones de terceros o privativos" off
  "swap" "Memoria virtual RAM" off
  )
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
  case $choice in        
    "/home")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: home |" 0 55 0 ${p} 2>&1 > /dev/tty )
      homefs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      homedir="home"
      mkdir -p /mnt/home
      mount "$homefs" /mnt/home
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/tmp")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: tmp |" 0 55 0 ${p} 2>&1 > /dev/tty )
      tmpfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      tmpdir="tmp"
      mkdir -p /mnt/tmp
      mount "$tmpfs" /mnt/tmp
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/usr")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: usr |" 0 55 0 ${p} 2>&1 > /dev/tty )
      usrfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      usrdir="usr"
      mkdir -p /mnt/usr
      mount "$usrfs" /mnt/usr
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/var")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: var |" 0 55 0 ${p} 2>&1 > /dev/tty )
      varfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      vardir="var"
      mkdir -p /mnt/var
      mount "$varfs" /mnt/var
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/srv")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: srv |" 0 55 0 ${p} 2>&1 > /dev/tty )
      srvfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      srvdir="srv"
      mkdir -p /mnt/srv
      mount "$srvfs" /mnt/srv
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/opt")

#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: opt |" 0 55 0 ${p} 2>&1 > /dev/tty )
      optfs="$part"
      dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      optdir="opt"
      mkdir -p /mnt/opt
      mount "$optfs" /mnt/opt
      p=$(echo "$p" | grep -v "$part")
      ;;
    "swap")
#     dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: swap |" 0 55 0 ${p} 2>&1 > /dev/tty)
      dialog --title "| Formateando Swap Linux |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkswap $part && swapon $part" 10 100
      swap="$part"
      p=$(echo "$p" | grep -v "$part")
  esac
done



#WINDOWS
part="$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}')" 
disk=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --clear --title "| Selección de Disco |"  --ok-label 'Seleccionar' --no-cancel --menu "\nSelecciona el disco de Windows\n " 10 50 0 ${part} 2>&1 >/dev/tty)
fdisk -l $disk > /tmp/partitions

partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1,$5}')"
p="$(echo "$partitions")"


part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --cancel-label 'No tengo' --clear --title "| Partición Boot Windows |" \
  --menu "\nSelecciona la partición de arranque \n\n$(fdisk -l $disk | grep '100M\|499M\|500M\|549M' )\n " 12 80 0 ${p} 2>&1 > /dev/tty)
boot_osfs=$part
mkdir -p /mnt/mnt
clear
mkdir -p /mnt/mnt/bootwin
clear
mount "$boot_osfs" /mnt/mnt/bootwin
clear
p=$(echo "$p" | grep -v "$part")



part=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --ok-label 'Seleccionar' --cancel-label 'No tengo' --clear --title "| Disco C:\\ |" \
  --menu "\nElige la partición donde esta el Disco C:\\\nLa ruta donde estara es: /media/windows en NTFS\n " 10 80 0 ${p} 2>&1 > /dev/tty)
datosc_osfs=$part
mkdir -p /mnt/media
clear
mkdir -p /mnt/media/windows
clear
mount "$datosc_osfs" /mnt/media/windows
clear
p=$(echo "$p" | grep -v "$part")



clear
partprobe
clear




clear
zonahorariaok=$(curl https://ipapi.co/timezone)
timedatectl set-timezone $zonahorariaok
ntpd -qg | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Zona Horaria en LiveCD, Espere... |" 25 80; sleep 3
hwclock --systohc
timedatectl status | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Hora Local - Espere... |" 13 65; sleep 5
clear
pacman -Sy archlinux-keyring --noconfirm | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Claves Actualizadas del LiveCD, Espere... |" 25 100; sleep 3
cp pacman.conf /etc/pacman.conf

pacman -Sy reflector --noconfirm | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Instalando paquetes en el LiveCD, espere... |" 25 80; sleep 3
reflector --latest 10 --sort rate --save /etc/pacman.d/mirrorlist
clear
for i in $(seq 1 100)
do
    sleep 0.04 
    echo $i
done | dialog --backtitle "$titulo" --title '| Actualizando MirrorLists |' --gauge "\nActualizando MirrorList en el LiveCD..." 7 60 0

cat /etc/pacman.d/mirrorlist | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "Mirrors List del LiveCD > Actualizadas, espere..." 25 2000; sleep 5





kernel_var=0 
while [ "$kernel_var" = "0" ] ; do

  kernel_select=`dialog --title "| KERNEL LINUX |" --backtitle "$titulo" \
    --stdout --ok-label "Seleccionar" --no-cancel --menu "Elige que kernel necesitas: \nLinux Stable es la mejor opción para iniciar\nLas otras opciones tienen un estilo diferente para instalar Drivers\nLas otras modificaciones del kernel trabajan con Drivers Libres" 14 0 2000 linux-stable "Kernel en su versión estable y módulos de Vanilla Linux" linux-hardened "Kernel enfocado en Seguridad" linux-lts "Kernel con soporte de larga duración" linux-zen "Kernel del esfuerzo colaborativo de varios hackers"`
   
  if [ $kernel_select == linux-stable ]; then

##################################################################################

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Instalando Sistema Base - Linux Stable |-" \
--stdout --ok-label "Siguiente" --prgbox 'pacstrap /mnt base base-devel reflector && \
reflector --latest 10 --sort rate --save /mnt/etc/pacman.d/mirrorlist && \
cat /mnt/etc/pacman.d/mirrorlist && \
cp pacman.conf /mnt/etc/pacman.conf && \
arch-chroot /mnt pacman -Sy linux linux-headers linux-firmware mkinitcpio \
cryptsetup lvm2 logrotate nano  \
dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager \
iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion \
e2fsprogs less ntp usb_modeswitch usbutils which ntfs-3g mtools exfat-utils cifs-utils \
hddtemp alsi inxi-git unzip zip yay-bin --noconfirm' 25 80

#alsa-utils alsa-plugins alsa-oss alsa-firmware pamixer
##################################################################################

r8168=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'RTL8111/8168/8411' ")
    if [[ $r8168  = *RTL8111/8168/8411* || $r8168 = *Rtl8111/8168/8411* || $r8168 = *rtl8111/8168/8411* ]]
    then      
    dialog --backtitle "RTL8111/8168/8411" --title "| Driver Ethernet 8168 |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy r8168 --noconfirm && echo blacklist r8169 > /mnt/etc/modprobe.d/blacklist.conf && cat /mnt/etc/modprobe.d/blacklist.conf" 25 100
    clear
    arch-chroot /mnt /bin/bash -c "modprobe r8168"
    arch-chroot /mnt /bin/bash -c "systemctl enable ifplugd@enp4s0.service"
    else
    echo ""
    fi
    

dialog --backtitle "$titulo" --title "| Microcode |" --yesno "\n¿Actualizaciones para el microcódigo del procesador?" 7 58 
case $? in 
  0) microcode=$(lspci -k | grep 'Host bridge: Intel')
    lspci -k | grep 'Host bridge:'  > procesador
    if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
    then      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy intel-ucode --noconfirm" 25 80

    else
      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy amd-ucode --noconfirm" 25 80
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para WiFi |-" --defaultno  --yesno "\n¿Tienes Tarjeta de Wifi?" 7 45 
case $? in 
  0) broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
    if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
    then      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy broadcom-wl wireless-regdb wpa_supplicant wireless_tools --noconfirm && arch-chroot /mnt /bin/bash -c 'modprobe wl' && arch-chroot /mnt /bin/bash -c 'rmmod b43' && arch-chroot /mnt /bin/bash -c 'rmmod ssb' && echo listo" 25 100
    else
      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm" 25 80
        
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para Touchpad |-" --defaultno --yesno "\n¿Tienes Touchpad?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap  /mnt xf86-input-synaptics xf86-input-libinput xorg-xinput" 25 80;;
  1) 
esac
dialog --backtitle "$titulo" --title "-| Driver para Bluetooth |-" --defaultno --yesno "\n¿Tienes Bluetooth?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap /mnt bluez bluez-utils pulseaudio-bluetooth blueman" 25 80
    arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
    clear;;
  1) 
esac
  kernel_var=1


#####hardened
  elif [ $kernel_select == linux-hardened ]; then

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Instalando Sistema Base - Linux Hardened |-" \
--stdout --ok-label "Siguiente" --prgbox 'pacstrap /mnt base base-devel reflector && \
reflector --latest 10 --sort rate --save /mnt/etc/pacman.d/mirrorlist && \
cat /mnt/etc/pacman.d/mirrorlist && \
cp pacman.conf /mnt/etc/pacman.conf && \
arch-chroot /mnt pacman -Sy linux-hardened linux-hardened-headers linux-firmware mkinitcpio \
cryptsetup lvm2 logrotate nano  \
dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager \
iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion \
e2fsprogs less ntp usb_modeswitch usbutils which ntfs-3g mtools exfat-utils cifs-utils \
hddtemp alsi inxi-git unzip zip yay-bin --noconfirm' 25 80

dialog --backtitle "$titulo" --title "| Microcode |" --yesno "\n¿Actualizaciones para el microcódigo del procesador?" 7 58 
case $? in 
  0) microcode=$(lspci -k | grep 'Host bridge: Intel')
    lspci -k | grep 'Host bridge:'  > procesador
    if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
    then      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy intel-ucode --noconfirm" 25 80

    else
      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy amd-ucode --noconfirm" 25 80
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para WiFi |-" --defaultno  --yesno "\n¿Tienes Tarjeta de Wifi?" 7 45 
case $? in 
  0) broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
    if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
    then      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy broadcom-wl-dkms wireless-regdb wpa_supplicant wireless_tools --noconfirm && arch-chroot /mnt /bin/bash -c 'modprobe wl' && arch-chroot /mnt /bin/bash -c 'rmmod b43' && arch-chroot /mnt /bin/bash -c 'rmmod ssb' && echo listo" 25 100
    else
      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm" 25 80
        
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para Touchpad |-" --defaultno --yesno "\n¿Tienes Touchpad?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap  /mnt xf86-input-synaptics xf86-input-libinput xorg-xinput" 25 80;;
  1) 
esac
dialog --backtitle "$titulo" --title "-| Driver para Bluetooth |-" --defaultno --yesno "\n¿Tienes Bluetooth?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap /mnt bluez bluez-utils pulseaudio-bluetooth blueman" 25 80
    arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
    clear;;
  1) 
esac
  kernel_var=1



######LTS
  elif [ $kernel_select == linux-lts ]; then
##################################################################################

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Instalando Sistema Base - Linux LTS |-" \
--stdout --ok-label "Siguiente" --prgbox 'pacstrap /mnt base base-devel reflector && \
reflector --latest 10 --sort rate --save /mnt/etc/pacman.d/mirrorlist && \
cat /mnt/etc/pacman.d/mirrorlist && \
cp pacman.conf /mnt/etc/pacman.conf && \
arch-chroot /mnt pacman -Sy linux-lts linux-lts-headers linux-firmware mkinitcpio \
cryptsetup lvm2 logrotate nano  \
dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager \
iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion \
e2fsprogs less ntp usb_modeswitch usbutils which ntfs-3g mtools exfat-utils cifs-utils \
hddtemp alsi inxi-git unzip zip yay-bin --noconfirm' 25 80

#alsa-utils alsa-plugins alsa-oss alsa-firmware pamixer
##################################################################################

r8168=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'RTL8111/8168/8411' ")
    if [[ $r8168  = *RTL8111/8168/8411* || $r8168 = *Rtl8111/8168/8411* || $r8168 = *rtl8111/8168/8411* ]]
    then      
    dialog --backtitle "RTL8111/8168/8411" --title "| Driver Ethernet 8168 |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy r8168 --noconfirm && echo blacklist r8169 > /mnt/etc/modprobe.d/blacklist.conf && cat /mnt/etc/modprobe.d/blacklist.conf" 25 100
    clear
    arch-chroot /mnt /bin/bash -c "modprobe r8168"
    arch-chroot /mnt /bin/bash -c "systemctl enable ifplugd@enp4s0.service"
    else
    echo ""
    fi
    

dialog --backtitle "$titulo" --title "| Microcode |" --yesno "\n¿Actualizaciones para el microcódigo del procesador?" 7 58 
case $? in 
  0) microcode=$(lspci -k | grep 'Host bridge: Intel')
    lspci -k | grep 'Host bridge:'  > procesador
    if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
    then      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy intel-ucode --noconfirm" 25 80

    else
      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy amd-ucode --noconfirm" 25 80
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para WiFi |-" --defaultno  --yesno "\n¿Tienes Tarjeta de Wifi?" 7 45 
case $? in 
  0) broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
    if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
    then      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy broadcom-wl-dkms wireless-regdb wpa_supplicant wireless_tools --noconfirm && arch-chroot /mnt /bin/bash -c 'modprobe wl' && arch-chroot /mnt /bin/bash -c 'rmmod b43' && arch-chroot /mnt /bin/bash -c 'rmmod ssb' && echo listo" 25 100
    else
      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm" 25 80
        
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para Touchpad |-" --defaultno --yesno "\n¿Tienes Touchpad?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap  /mnt xf86-input-synaptics xf86-input-libinput xorg-xinput" 25 80;;
  1) 
esac
dialog --backtitle "$titulo" --title "-| Driver para Bluetooth |-" --defaultno --yesno "\n¿Tienes Bluetooth?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap /mnt bluez bluez-utils pulseaudio-bluetooth blueman" 25 80
    arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
    clear;;
  1) 
esac
  kernel_var=1  


###### ZEN
  elif [ $kernel_select == linux-zen ]; then
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Instalando Sistema Base - Linux ZEN |-" \
--stdout --ok-label "Siguiente" --prgbox 'pacstrap /mnt base base-devel reflector && \
reflector --latest 10 --sort rate --save /mnt/etc/pacman.d/mirrorlist && \
cat /mnt/etc/pacman.d/mirrorlist && \
cp pacman.conf /mnt/etc/pacman.conf && \
arch-chroot /mnt pacman -Sy linux-zen linux-zen-headers linux-firmware mkinitcpio \
cryptsetup lvm2 logrotate nano  \
dnsmasq ethtool ndisc6 inetutils wvdial gptfdisk dhcp dhcpcd dhclient ppp netctl networkmanager \
iwd net-tools ifplugd dialog neofetch git wget lsb-release accountsservice bash-completion \
e2fsprogs less ntp usb_modeswitch usbutils which ntfs-3g mtools exfat-utils cifs-utils \
hddtemp alsi inxi-git unzip zip yay-bin --noconfirm' 25 80

dialog --backtitle "$titulo" --title "| Microcode |" --yesno "\n¿Actualizaciones para el microcódigo del procesador?" 7 58 
case $? in 
  0) microcode=$(lspci -k | grep 'Host bridge: Intel')
    lspci -k | grep 'Host bridge:'  > procesador
    if [[ $microcode  = *Intel* || $microcode = *intel* || $microcode = *INTEL* ]]
    then      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy intel-ucode --noconfirm" 25 80

    else
      
    dialog --backtitle "$(cat procesador)" --title "| Microcode |" --stdout --ok-label "Siguiente" \
        --prgbox "arch-chroot /mnt pacman -Sy amd-ucode --noconfirm" 25 80
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para WiFi |-" --defaultno  --yesno "\n¿Tienes Tarjeta de Wifi?" 7 45 
case $? in 
  0) broadcom=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'Network controller: Broadcom' ")
    if [[ $broadcom  = *Broadcom* || $broadcom = *broadcom* || $broadcom = *BROADCOM* ]]
    then      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy broadcom-wl-dkms wireless-regdb wpa_supplicant wireless_tools --noconfirm && arch-chroot /mnt /bin/bash -c 'modprobe wl' && arch-chroot /mnt /bin/bash -c 'rmmod b43' && arch-chroot /mnt /bin/bash -c 'rmmod ssb' && echo listo" 25 100
    else
      
    dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "arch-chroot /mnt pacman -Sy iw wireless_tools wpa_supplicant dialog wireless-regdb --noconfirm" 25 80
        
    fi;;
  1) 
esac

dialog --backtitle "$titulo" --title "-| Driver para Touchpad |-" --defaultno --yesno "\n¿Tienes Touchpad?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap  /mnt xf86-input-synaptics xf86-input-libinput xorg-xinput" 25 80;;
  1) 
esac
dialog --backtitle "$titulo" --title "-| Driver para Bluetooth |-" --defaultno --yesno "\n¿Tienes Bluetooth?" 7 45 
case $? in 
  0) dialog --backtitle "$titulo" --title "| Instalando Sistema Base - Linux Stable |" --stdout --ok-label "Siguiente" \
    --prgbox "pacstrap /mnt bluez bluez-utils pulseaudio-bluetooth blueman" 25 80
    arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth.service"
    clear;;
  1) 
esac
  kernel_var=1
  
  
  fi
done


#FSTAB
rm /mnt/etc/fstab 
genfstab -U -p /mnt > /mnt/etc/fstab 
dialog --backtitle "-| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |-" --title "| Archivo FSTAB |"   --stdout --ok-label 'Siguiente' --msgbox "$(cat /mnt/etc/fstab)" 20 1000

locales="$(cat /mnt/etc/locale.gen | grep .UTF-8 | sed '1,4d' | sed 's/\(.\{1\}\)//')"
locale=$(dialog --backtitle "$titulo" --clear --title "| Selecciona tu país |" \
  --menu "\nEjemplos:\nes_PE = Perú\nes_AR = Argentina\nes_MX = Mexico" 25 0 20 ${locales} 2>&1 > /dev/tty)
sed -i "/${locale}/ s/# *//" /mnt/etc/locale.gen


locales="$(cat /mnt/etc/locale.gen | grep .UTF-8 | sed '/#/d')"
locale=$(dialog --backtitle "$titulo" --clear --title "| Selecciona tu país |" \
  --menu "Confirma tu idioma y país" 0 0 0 ${locales} 2>&1 > /dev/tty)


echo "LANG=$locale" > /mnt/etc/locale.conf && cat /mnt/etc/locale.conf | dialog --backtitle "-| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |-" --progressbox "Idioma del Sistema > Actualizando" 10 50; sleep 3

arch-chroot /mnt /bin/bash -c "locale-gen" | dialog --backtitle "-| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |-" --progressbox "Idioma del Sistema > Actualizando" 10 50; sleep 2

arch-chroot /mnt /bin/bash -c "export $(cat /mnt/etc/locale.conf)" 

echo "KEYMAP=$keymap" > /mnt/etc/vconsole.conf && cat /mnt/etc/vconsole.conf | dialog --backtitle "-| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |-" --progressbox "Idioma del Sistema > Actualizando" 10 50; sleep 3

#ZONA HORARIA
# URL="https://ipapi.co/timezone"
# wget "$URL" 2>&1 | \
# for i_conta_zona in $(seq 1 100)
# do
#    sleep 0.025 
#    echo $i_conta_zona
# done |  \
# dialog  --backtitle "$titulo" --title "| ZONA HORARIA |" --gauge "Gracias https://ipapi.co/timezone" 6 60

dialog --backtitle "$titulo" --title "| ZONA HORARIA |" --defaultno --yesno "\n       >>> $zonahorariaok <<<\n\n       ¿Deseas modificarlo?" 8 40 


if [ "$?" = "0" ]; then

selected=0 
timezonedir=/usr/share/zoneinfo
while [ "$selected" = "0" ] 
do

  clear
  check=$(ls -l $timezonedir | grep -v .tab | awk '/drwx/' | awk -F " " '{print $9}' | awk '{if (NR!=1) {print}}' | head -1)
  if [[ $check != America ]]; then 
    echo "../ UP" >timezones 
  fi

  ls -l $timezonedir | grep -v .tab | awk '/drwx/' | awk -F " " '{print $9}' | awk '{print $0"/"}' | awk '$fs=$fs" Time"' | awk '{if (NR!=1) {print}}'>>timezones 
  
  ls -l $timezonedir | grep -v .tab | awk '/-rw-/' | awk -F " " '{print $9}' | awk '$fs=$fs" Time"' | awk '{if (NR!=1) {print}}'>>timezones
  timezones=$(cat timezones) 
  rm timezones 
  timezone=$(dialog --backtitle "| Instalación de ArchLinux |" --clear --title "Tu Zona Horaria es $(cat timezone): " \
      --menu "Ingresa la zona horaria" 20 0 20 ${timezones} 2>&1 >/dev/tty) 
  clear
  if [ "$?" = "0" ] 
  then
    if [[ $timezone == *"/"* ]]; then 
      timezonedir=$timezonedir/$timezone
    else 
      ln -sf $timezonedir${timezone} /mnt/etc/localtime
      selected=1
    fi
  fi
done

else

#zone="$(cat timezone)"
ln -sf /usr/share/zoneinfo/$zonahorariaok /mnt/etc/localtime

fi



dialog --backtitle "$titulo" \
--title "| REGLAS EN PERFILES NUEVOS |" \
--msgbox '\n> No se permite iniciar nombre en Mayúsculas \n> Ni con números o Caracteres especiales\n> Máximo de 8 caracteres\n> En su CLAVE no use la letra “ñ”\n> Ni letras con tilde\n> Por ejemplo: è, ü, etc...\n> Ni otros caracteres especiales\n> ~!@#$%^&*_-+=|\(){}[]:;<;>;,.?/\n\n     >>  Ya que pueden causar errores  <<' 15 50


#nombre de pc (hostname)
hostname=$(dialog --backtitle "$titulo" --title "| Hostname |" --inputbox "|  Nombre del computador  |" 8 40 2>&1 > /dev/tty)
echo "$hostname" > /mnt/etc/hostname
echo "$hostname" > hostname
echo "127.0.1.1 $(cat hostname).localdomain $(cat hostname)" > /mnt/etc/hosts
rm hostname

#Clave para root
while [ $rootpasswd != $rootpasswd2 ]
do 
    rootpasswd=$(dialog --backtitle "$titulo" --title "|  Clave de Root  |" --insecure --passwordbox "|  Ingrese contraseña de root  |" 8 40 2>&1 > /dev/tty)
    rootpasswd2=$(dialog --backtitle "$titulo" --title "|  Clave de Root |" --insecure --passwordbox "|  Confirme contraseña de root  |" 8 40 2>&1 > /dev/tty)
    if [ $rootpasswd != $rootpasswd2 ];then 
     dialog --backtitle "$titulo" --title "| Clave incorrecta |" --msgbox 'Las contraseñas no coinciden\n      Intente nuevamente...' 6 50
  else 
    clear
  fi
done

dialog --backtitle "$titulo" --title "| Clave Correcta |" --msgbox '\nContraseña Conrrecta!' 8 40
arch-chroot /mnt /bin/sh -c "echo root:$rootpasswd | chpasswd"



#Agregando usuario
username=$(dialog --backtitle "$titulo" --title "|  Creación de usuario  |" \
           --form "\nIngresa tu Usuario Nuevo\n\nDebe iniciar en letra y en minúscula\nNada de caracteres especiales\n " 0 0 0 \
           " Usuario Nuevo:" 1 1 "user" 1 17 25 30 2>&1 > /dev/tty)

user=$(echo "$username" | sed -n 1p)
arch-chroot /mnt /bin/sh -c "useradd -m -g users -s /bin/bash $user"
while [ $userpasswd != $userpasswd2 ]
do 
    userpasswd=$(dialog --backtitle "$titulo" --title "|  Contraseña de $user  |" --insecure --passwordbox "Contraseña de $user" 8 40 2>&1 > /dev/tty)
    userpasswd2=$(dialog --backtitle "$titulo" --title "|  Contraseña de $user  |" --insecure --passwordbox "Confirma tu clave de $user" 8 40 2>&1 > /dev/tty)
    if [ $userpasswd != $userpasswd2 ];then 
     dialog --backtitle "$titulo" --title " Clave incorrecta " --msgbox 'Las contraseñas no coinciden\n      Intente nuevamente...' 6 50
  else 
    clear
  fi
done
dialog --backtitle "$titulo" --title "| Clave Correcta |" --msgbox '\nContraseña Conrrecta!' 8 40
arch-chroot /mnt /bin/bash -c "echo $user:$userpasswd | chpasswd"
#sed -i '/%wheel ALL=(ALL) ALL/s/^#//g' /mnt/etc/sudoers
arch-chroot /mnt /bin/bash -c "hwclock -w"


#activando servicios dhcpcd NetworkManager sshd
#Actualiza Servicios y Mirrors
arch-chroot /mnt /bin/bash -c "systemctl enable dhcpcd NetworkManager"
clear

#  if [[ -n $wifinet ]]; then
#  #Copia Red
#  wlan=$(echo /proc/net/dev*/w*)
#  lan=${wlan##*/}
#  wifinet=$(netctl list | awk -F " " '{print $2}')
#  numeronetctl=$(echo $lan | wc -c)
#  wifinetnuevo=$(netctl list | awk -F " " '{print $2}' | tail -c +${numeronetctl} | tail -c +2)
#
#  cp /etc/netctl/$wifinet /mnt/etc/netctl/$wifinetnuevo
#  arch-chroot /mnt /bin/bash -c "netctl enable $wifinetnuevo"
#  clear
#  fi
#Copia Red





#GRUB-BIOS
uefi=$( parted $disk print | grep -ic gpt )

dialog --backtitle "| Instalación de ArchLinux - https://t.me/ArchLinuxCristo |" --title "|  SISTEMA BIOS LEGACY Y DISCO DOS/MBR  |" --infobox "\n        | SU SISTEMA ES BIOS LEGACY |" 5 50; sleep 5
dialog --backtitle "|  SISTEMA BIOS LEGACY Y DISCO DOS/MBR  |" --title "| Instalando GRUB - BIOS LEGACY |" --stdout --ok-label "Siguiente" --prgbox "arch-chroot /mnt pacman -Sy grub os-prober --noconfirm " 22 80

part="$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}')" 
disk_grub=$(dialog --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --clear --title "| Instalando GRUB - BIOS LEGACY |"  --ok-label 'Seleccionar' --no-cancel --menu "\nSelecciona el disco donde se esta instalado Linux" 0 60 0 ${part} 2>&1 >/dev/tty)

dialog --backtitle "|  SISTEMA BIOS LEGACY Y DISCO DOS/MBR  |" --title "| Instalando GRUB - BIOS LEGACY |" --stdout --ok-label "Siguiente" --prgbox "echo "" && echo '>>> Su disco es DOS MBR | BIOS Legacy es un sistema antiguo <<<' && echo "" && cat /tmp/partitions | grep dos && echo '' && arch-chroot /mnt grub-install --target=i386-pc $disk_grub" 15 80
  sed -i "6iGRUB_CMDLINE_LINUX_DEFAULT="loglevel=3"" /mnt/etc/default/grub
  sed -i '7d' /mnt/etc/default/grub
dialog --backtitle "|  SISTEMA BIOS LEGACY Y DISCO DOS/MBR  |" --title "| Instalando GRUB - BIOS LEGACY |" --stdout --ok-label "Siguiente" --prgbox "echo '' && arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg && echo '' && echo 'ls -l /mnt/boot' && ls -l /mnt/boot && echo '' && echo 'Lea bien que no tenga ningún error marcado' && echo '> Confirme tener las IMG de linux para el arranque' && echo '> Confirme tener la carpeta de GRUB para el arranque' " 25 80
#FIN GRUB


clear
arch-chroot /mnt /bin/bash -c "pacman -Sy xdg-user-dirs --noconfirm" | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Creando Directorios... |" 25 80; sleep 3
clear
arch-chroot /mnt /bin/bash -c "xdg-user-dirs-update --force"
export $(cat /mnt/etc/locale.conf)

cp pacman-chroot.conf /mnt/etc/pacman.conf
echo ""
echo ""
arch-chroot /mnt /bin/bash -c "pacman -Syu --noconfirm" && echo "" && echo ""
arch-chroot /mnt /bin/bash -c "alsi"
echo ""
echo ""
arch-chroot /mnt /bin/bash -c "inxi -Gx"
echo ""
echo ""

#INICIO PROGRESS BARR
function ProgressBar {
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*6)/10
    let _left=60-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")
# 1.2.1.1 Progreso : [########################################] 100%
printf "\r > Cargando : |${_fill// /▇}${_empty// /-}| ${_progress}%%"

}
# Variables
_start=1

_end=100

for number in $(seq ${_start} ${_end})
do
    sleep 0.06
    ProgressBar ${number} ${_end}
done
#FIN PROGRESS BARR

nombre_usuario=$(cat /mnt/etc/passwd | grep '/home' | cut -d: -f1) 
sed -i "80i $nombre_usuario ALL=(ALL) NOPASSWD: ALL" /mnt/etc/sudoers

echo ""
printf "\n| La computadora se reiniciara para finalizar |\n| Cuando este apagada la computadora retire la USB o CD |\n\n"
sleep 5

#Copia el script posterior a la instalación en el disco duro
# cp pacman.conf /mnt/etc/pacman.conf
# cp pacman-chroot.conf /mnt/root
# chmod +x /mnt/root/pacman-chroot.conf

cp chroot /mnt/root
chmod +x /mnt/root/chroot
cp zshrc /mnt/root
chmod +x /mnt/root/zshrc
cp .bashrc /mnt/root/bashrc
chmod +x /mnt/root/bashrc

cp .dialogrc /mnt/root
chmod +x /mnt/root/.dialogrc
cp .dialogrc /mnt/root
chmod +x /mnt/root/.dialogrc

mkdir /mnt/etc/pacman.d/hooks/
cp mirrorupgrade.hook /mnt/etc/pacman.d/hooks/mirrorupgrade.hook 
chmod +x /mnt/etc/pacman.d/hooks/mirrorupgrade.hook

sed -i "s/selectedkeymap/${keymap}/g" /mnt/root/chroot

#Prepare el sistema para iniciar directamente en la raíz y ejecute el script posterior a la instalación
mkdir /mnt/etc/systemd/system/getty@tty1.service.d
echo -e "[Service]\nExecStart=\nExecStart=-/sbin/agetty --autologin root --noclear %I 38400 linux" > /mnt/etc/systemd/system/getty@tty1.service.d/override.conf
echo "sh chroot" >> /mnt/root/.bashrc
echo -e "if [ -f ~/.bashrc ]; then\n\tsource ~/.bashrc\nfi" >> /mnt/root/.bash_profile

swapdisco=$( fdisk -l | grep "/dev/\|swap" | grep swap | awk -F ' ' '{print $1}' )
umount -R /mnt
swapoff ${swapdisco}
swapoff -a
swapon -a

reboot






elif [ -d /sys/firmware/efi ]
then
dialog --backtitle "|  SISTEMA BIOS LEGACY Y DISCO GPT  |" --title "|  SISTEMA BIOS LEGACY TRABAJA CON DISCOS DOS MBR |"   --stdout --ok-label 'Reiniciar' --msgbox "\nUsted inicio la USB en sistema BIOS LEGACY y su disco es GPT \
\n\nReinicie su sistema e ingrese en modo UEFI \
\n\nSi convierte su disco a DOS MBR a GPT perderá \nToda su información de Windows Instalado\n\nRecomendación: Reinicie e inicie CD o USB en BIOS LEGACY" 13 65
reboot

else  
echo ""
fi
