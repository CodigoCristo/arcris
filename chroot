#!/bin/bash

#Colores
clear
red='\033[38;2;255;0;02m'
echo ""
echo ""
echo -e $red ">-------------------------------------------------------------------------<";
echo -e $red ">                                                                         <";
echo -e $red ">                                                                         <";
echo -e $red ">                      ██   █▄▄▄▄ ▄█▄    █▄▄▄▄ ▄█    ▄▄▄▄▄                <";
echo -e $red ">                      █ █  █  ▄▀ █▀ ▀▄  █  ▄▀ ██   █     ▀▄              <";
echo -e $red ">                      █▄▄█ █▀▀▌  █   ▀  █▀▀▌  ██ ▄  ▀▀▀▀▄                <";
echo -e $red ">                      █  █ █  █  █▄  ▄▀ █  █  ▐█  ▀▄▄▄▄▀                 <";
echo -e $red ">                         █   █   ▀███▀    █    ▐                         <";
echo -e $red ">                        █   ▀            ▀                               <";
echo -e $red ">                       ▀                                                 <";
echo -e $red ">                                                                         <";
function ProgressBar {
# Process data
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*6)/10
    let _left=60-$_done
# Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:                           
# 1.2.1.1 Progress : [########################################] 100%
printf "\r > Cargando : |${_fill// /▇}${_empty// /-}| ${_progress}%%"

}

# Variables
_start=1

# This accounts as the "totalState" variable for the ProgressBar function
_end=100

# Proof of concept
for number in $(seq ${_start} ${_end})
do
    sleep 0.06
    ProgressBar ${number} ${_end}
done

echo -e '\033[m'




titulo="| Instalación de ArchLinux - by: ArcriS |"

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "| INTERNET |" --msgbox "\n| Primero necesitamos saber si hay conexión a Internet |" 7 60

if ping -c 2 www.google.com &> /dev/null; then
    
   dialog --title "|  Conexión a RED  |" --backtitle "$titulo" \
   --prgbox "ping -c 3 archlinux.org && echo && echo Si Hay Internet!" 17 100
    wifinet1=$(netctl list | awk -F " " '{print $1}')
    wifinet2=$(netctl list | awk -F " " '{print $2}')

else
        
    dialog --backtitle "$titulo" --title "| Error de RED |" --ok-label 'Siguiente' --msgbox "\nNo hay conexión de Internet\n" 7 35
    wifinet=$(netctl list | awk -F " " '{print $1}')
    netctl disable $wifinet
    wifinet=$(netctl list | awk -F " " '{print $2}')
    netctl disable $wifinet
    clear
    systemctl disable netctl
    systemctl disable netctl-auto@$(ls /sys/class/net | grep "^w").service
    systemctl enable dhcpcd NetworkManager
    systemctl start dhcpcd NetworkManager
    clear
    
    #--title "| Conexión WiFi |"
    dialog --backtitle "$titulo"  --yesno "\n¿Tienes Wi-Fi?\n" 7 20

case $? in
   0)       wifi_var=0 
            wlan=$(echo /proc/net/dev*/w*)
            lan=${wlan##*/}
            
            nombre_red="$(iw dev $lan scan | grep SSID: | awk -F " " '{print $2}' | head -1)"
            clave_red=" Clave"
            dialog --title "| LISTA DE REDES WIFI SSID: |" --backtitle "$titulo" --ok-label "Conectar" --no-cancel \
              --stdout --form "$(iw dev $lan scan | grep SSID:)" 15 50 0 \
              "Nombre de Red :  " 0 0 "$nombre_red" 1 20 20 0 \
              "Contraseña    :  " 2 1 "$clave_red" 2 20 20 0 > output.txt
            nombre_red=$(cat output.txt | head -1)
            clave_red=$(cat output.txt | head -2 | tail -1)
            
            
            DIALOG=${DIALOG=dialog}
            
            COUNT=10
            (
            while test $COUNT != 110
            do
            echo $COUNT
            nmcli dev wifi connect $(cat output.txt | head -1) password $(cat output.txt | head -2 | tail -1)
            systemctl enable dhcpcd NetworkManager
            systemctl start dhcpcd NetworkManager
            COUNT=`expr $COUNT + 50`
            sleep 1
            done
            ) |
            $DIALOG --title "| Conectando a Red Wifi |" --gauge "\n\nConectándose, espere..." 10 50 0
            

            dialog --backtitle "$titulo" --title "| Estado de Conexión |" \
            --stdout --ok-label "Siguiente" --prgbox "echo '' && nmcli dev status && echo '' && echo '' && echo 'Nombre de Red: $nombre_red' && echo 'Clave de Red: $clave_red'" 18 68 ; wifi_var=1
            
            rm output.txt
            
            dialog --title "|  Conexión a RED  |" --backtitle "$titulo" \
            --prgbox "ping -c 3 archlinux.org && echo && echo Si Hay Internet!" 17 100
        ;;   

   1)   
        systemctl disable netctl
        systemctl disable netctl-auto@$(ls /sys/class/net | grep "^w").service
        systemctl enable dhcpcd NetworkManager
        systemctl start dhcpcd NetworkManager
        clear
        dialog --backtitle "$titulo" --title "| Ethernet |" --msgbox "\nSe Activo correctamente Network Manager para Ethernet\nRevisando PING para confirmar internet..." 8 60
        dialog --title "|  Conexión a RED  |" --backtitle "$titulo" \
        --prgbox "ping -c 3 archlinux.org && echo && echo Si Hay Internet!" 17 100
        
        ;;
        
   255) dialog --backtitle "$titulo" --title "| Ethernet |" --msgbox "\nPresiono [ESC] - Salir del Script" 7 40
        exit
        
        ;;
        
esac
fi

nombre_usuario=$(cat /etc/passwd | grep '/home' | cut -d: -f1)
#Para que el sudo no pida clave

cd /home/$nombre_usuario

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "| Instalando AUR helper |" --stdout --ok-label "Siguiente" --prgbox "git clone https://aur.archlinux.org/yay-bin.git && \
chown -R $nombre_usuario:users /home/$nombre_usuario && \
chown -R $nombre_usuario:users /home/$nombre_usuario/yay-bin && \
chown -R $nombre_usuario:users /home/$nombre_usuario/yay-bin/PKGBUILD && \
cd /home/$nombre_usuario/yay-bin && \
sudo -u $nombre_usuario makepkg -smp PKGBUILD --noconfirm && \
pacman -U *.pkg.tar.xz --noconfirm && \
rm -Rf /home/$nombre_usuario/yay-bin && \
cd && yay" 25 100
            
# yay -S gotop-git --noeditmenu --noconfirm --removemake

XORG=$"xorg xorg-apps xorg-xinit xorg-twm xterm"

#Inicio de Video
VM=false
    ####################################################################
      
    case $(systemd-detect-virt) in
        oracle)
            virt="vbox"
            VM=true
        ;;
        vmware)
            virt="vmware"
            VM=true
        ;;
        qemu)
            virt="qemu"
            VM=true
        ;;
        kvm)
            virt="kvm"
            VM=true
        ;;
        microsoft)
            virt="hyper-v"
            VM=true
        ;;
        xen)
            virt="xen"
            VM=true
        ;;
    esac
    
    ####################################################################
kernel=$(uname -a | tail -c -6)

if [ "$VM" == "true" ]; then
    
            inxi -Gx | dialog --no-collapse --cr-wrap --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --progressbox "-| Driver de Vídeo |-" 15 100; sleep 5
            case "$virt" in
                
                vbox)   if [ "$kernel" == "Linux" ]; then
                            GPU="virtualbox-guest-utils virtualbox-guest-modules-arch xf86-video-vmware"
                            GPUvirt="vboxservice"
                            echo $GPUvirt | awk -F " " '{print $1}' > GPUvirt                            
                            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VirtualBox\nInstalar: VirtualBox Guest" 8 80
                        else
                            GPU="virtualbox-guest-utils virtualbox-guest-dkms"
                            GPUvirt="systemd-modules-load"
                            echo $GPUvirt | awk -F " " '{print $1}' > GPUvirt
                            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VirtualBox\nInstalar: VirtualBox Guest-dkms" 8 80
                        fi
                ;;
                vmware) GPU="xf86-video-vmware xf86-input-vmmouse open-vm-tools net-tools gtkmm mesa mesa-libgl"
                        dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VMware\nInstalar: xf86-video-vmware" 8 80
                ;;
                
                hyper-v) GPU="xf86-video-fbdev mesa-libgl"                         
                ;;
                
                *)      GPU="xf86-video-fbdev mesa-libgl"
                ;;
                
            esac

            
else

dialog --title "-| Driver de Vídeo |-" --yesno "\n¿ Desea instalar de manera automatica su driver de vídeo ? \nPresione Si - Automatico \nPresione No - Manera Manual" 9 62
case $? in
   0) inxi -Gx | dialog --no-collapse --cr-wrap --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" \
--progressbox "-| Driver de Vídeo, lea su información, espere... |-" 15 100; sleep 7

if (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
    
GPU='xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver \
lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd \
lib32-ocl-icd opencl-headers'

dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            

        elif (lspci | grep VGA | grep "Radeon R\|R2/R3/R4/R5" &>/dev/null); then
            
GPU='xf86-video-amdgpu mesa lib32-mesa vulkan-radeon \
lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau \
lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers'
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80

        elif (lspci | grep VGA | grep "ATI\|AMD/ATI" &>/dev/null); then
                    
GPU='xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver \
lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers'
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80

        elif (lspci | grep VGA | grep "Intel" &>/dev/null); then
            
GPU='xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver \
libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers'
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
                
        else
            
GPU='xf86-video-vesa mesa lib32-mesa'
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            
        fi
;;
   1) inxi -Gx | dialog --no-collapse --cr-wrap --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" \
--progressbox "-| Driver de Vídeo, lea su información, espere... |-" 15 100; sleep 7

cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Driver de Vídeo |-"  --column-separator "|" --no-tags --ok-label '< Seleccionar >' \
    --nocancel --menu "Seleciona el driver correcto:" 13 76 16)

options=(1 "Nvidia 440xx|(Privativo)"
         2 "Nvidia 390xx|(Privativo)"
         3 "Nvidia|(Open (Open Source)Source)"
         4 "AMD - Radeon|(Open Source)"
         5 "AMD - ATI|(Open Source)"
         6 "INTEL|(Open Source)")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1)
            GPU='nvidia nvidia-settings nvidia-utils lib32-nvidia-utils libva-utils \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers'
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            ;;
        2)
            GPU='nvidia-390xx nvidia-390xx-settings nvidia-390xx-utils \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx libxnvctrl-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers'
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            ;;
        3)
            GPU='xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver \
            lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
            libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers'
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            ;;
        4)
            GPU='xf86-video-amdgpu mesa lib32-mesa vulkan-radeon \
            lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau \
            lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
            opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers'
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            ;;
        5)
            GPU='xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver \
            lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
            libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers'
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            ;;
            
        6)
            GPU='xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver \
            libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
            intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers'
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            ;;
    esac
done
;;


   255) echo "Presiono la tecla [ESC]"
;;
esac

#Final de VIDEO      
fi

    ####################################################################
    
titulo="| Instalación de ArchLinux - by: ArcriS |"


cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Selecciona tu (DE) o (WM) a instalar" 9 50 9)

options=(1 "Entorno de escritorio | (DE)"
         2 "Gestor de ventanas | (WM)")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1) #INICIO (DE)           
cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Selecciona tu escritorio a instalar - (DE)" 19 60 19)

options=(1 " > | xfce4 | Xfce desktop| <"
         2 " > | plasma | KDE Plasma desktop| <"
         3 " > | deepin | Deepin desktop| <"
         4 " > | gnome | GNOME Classic desktop| <"
         5 " > | gnome-flashback | GNOME 2 desktop| <"
         6 " > | cinnamon | Cinnamon desktop| <"
         7 " > | budgie-desktop | Budgie desktop| <"
         8 " > | enlightenment | Enlightenment desktop| <"
         9 " > | lxde-gtk3| The Lightweight X11 desktop| <"
         10 " > | lxde | The Lightweight X11 GTK2| <"
         11 " > | lxqt | LXDE-Qt y Razor-qt projects| <"
         12 " > | mate | Mate GTK3 desktop| <"
         13 " > | liri | Desktop| <"
         14 " > | lumina | Desktop| <"
         15 " > | Pantheon | Desktop| <")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        
###########SELECCION (DE)
        1) #XFCE4
cmd=(dialog --keep-tite --backtitle "$titulo" \
--no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Decide en instalar o personalizar las opciones\n\n \
xfce4 xfce4-goodies network-manager-applet alacarte \n\nSelecciona una opción para XFCE4 \n" 14 60 19)

options=(1 "Predeterminado || Una mejor experiencia con tema"
         2 "Escritorio vacio || Sin tema con paquetes extras"
         3 "Personalizar || Especificar Paquetes básicos")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        
        1)  DE="xfce4 xfce4-goodies network-manager-applet alacarte papirus-icon-theme deepin-icon-theme sierra-gtk-theme-git gnu-free-fonts ttf-hack ttf-inconsolata gnome-font-viewer"
dialog  --title "-| Instalando |-" --stdout --ok-label "Siguiente" --prgbox "git clone https://github.com/CodigoCristo/config.git" 27 100
unzip config/xfce4.zip | dialog --no-collapse --cr-wrap --progressbox "| Instalando XFCE4, espere... |" 25 80; sleep 2
chmod +777 xfce4
cp -rf xfce4/.config/* /root/.config/
mkdir /home/$nombre_usuario/.config/
chown -hR $nombre_usuario:users /home/$nombre_usuario/.config
cp -rf xfce4/.config/* /home/$nombre_usuario/.config/
DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
echo $DM | awk -F " " '{print $1}' > DMservice
            ;;
            
        2)  DE="xfce4 xfce4-goodies network-manager-applet alacarte ttf-hack ttf-inconsolata gnome-font-viewer"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo $DM | awk -F " " '{print $1}' > DMservice
            ;;
            
        3)  cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --checklist "Seleeciona paquetes extras del escritorio XFCE4\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 19)
            options=(1 "xfce4-goodies || Programas extras de xfce4" off    # any option can be set to default to "on"
                     2 "network-manager-applet || Gestionar conexiones de red" off
                     3 "alacarte || Editar entradas" off)
            choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
            for choice in $choices
            do
                case $choice in
                    1)
                        xfce4_2="xfce4-goodies"
                        ;;
                    2)
                        xfce4_3="network-manager-applet"
                        ;;
                    3)
                        xfce4_4="alacarte"
                        ;;
                esac
            done
            xfce4="xfce4 gnu-free-fonts ttf-hack ttf-inconsolata gnome-font-viewer"
            DE="$xfce4 $xfce4_2 $xfce4_3 $xfce4_4"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo $DM | awk -F " " '{print $1}' > DMservice
            ;;
    esac
done
######FINAL XFCE4
            ;;

        2)  #KDE
            cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --checklist "Seleeciona paquetes del escritorio KDE\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 19)
            options=(1 "kde-applications || Programas extras de KDE" off 
                     2 "appmenu-gtk || Global Menu GTK2/GTK3" off
                     3 "bluedevil || Bluetooth" off
                     4 "print-manager || Impresoras" off)
            choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
            clear
            for choice in $choices
            do
                case $choice in
                    1)
                        KDE2="kde-applications"
                        ;;
                    2)
                        KDE3="appmenu-gtk-module libdbusmenu-glib libdbusmenu-gtk3 libdbusmenu-gtk2"
                        ;;
                    3)
                        KDE4="bluedevil"
                        ;;
                    4)
                        KDE5="print-manager cups"
                        ;;
                esac
            done

            KDE="plasma kdebase gnu-free-fonts ttf-hack ttf-inconsolata gnome-font-viewer discover packagekit-qt5 colord-kde kscreen powerdevil kdegraphics-thumbnailers ffmpegthumbs user-manager kdeconnect sshfs ttf-liberation ttf-dejavu qt5ct"

            DE="$KDE $KDE2 $KDE3 $KDE4 $KDE5"            
            DM="sddm libxcb qt5-virtualkeyboard"
            echo sddm > DMservice
            ;;
######FINAL KDE PLASMA

        3) #DEEPIN
            cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --checklist "Seleeciona paquetes del escritorio Deepin\n[ ESPACIO ] - Para marcar o desmarcar *" 15 100 19)
            options=(1 "> deepin-extra |> Una mejor experiencia" off 
                     2 "> deepin-topbar |> Barra Superior Style Gnome" off
                     3 "> deepin-dock-plugin-arch-update" off
                     4 "> deepin-dock-plugin-cmdu-git" off
                     5 "> deepin-dock-plugin-netspeedandsysteminfo" off
                     6 "> deepin-dock-plugin-pineappledatetime-git" off
                     7 "> deepin-dock-plugin-weather-git" off)
            choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
            clear
            for choice in $choices
            do
                case $choice in
                    1)
                        deepin1="deepin-extra"
                        ;;
                    2)
                        deepin2="deepin-topbar"
                        ;;
                    3)
                        deepin3="deepin-dock-plugin-arch-update"
                        ;;
                    4)
                        deepin4="deepin-dock-plugin-cmdu-git"
                        ;;
                    5)
                        deepin5="deepin-dock-plugin-netspeedandsysteminfo"
                        ;;
                    6)
                        deepin6="deepin-dock-plugin-pineappledatetime-git"
                        ;;
                    7)
                        deepin7="deepin-dock-plugin-weather-git"
                        ;;
                esac
            done

            deepin="deepin gnu-free-fonts ttf-hack ttf-inconsolata gnome-font-viewer ffmpegthumbs"
            DE="$deepin $deepin1 $deepin2 $deepin3 $deepin4 $deepin5 $deepin6 $deepin7"

            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo lightdm > DMservice
            
            ;;
######FINAL DEEPIN

        4)  #INICIO GNOME
            DE="gnome gnome-extra gnome-shell"
            DM="gdm"
            echo gdm > DMservice
            ;;
        
        5)  #INICIO GNOME flashback
            DE="gnome-flashback gnome-applets sensors-applet gnome-shell"
            DM="gdm"
            echo gdm > DMservice
            ;;
            
        6) #INICIO cinnamon
            DE="cinnamon cinnamon-translations xed xviewer xreader xplayer pix"
            DM="gdm"
            echo -e "exec cinnamon-session" > /home/$nombre_usuario/.xinitrc
            echo gdm > DMservice
            ;;

        7) #INICIO budgie-desktop
            DE="budgie-desktop gnome gnome-shell gnome-control-center dconf-editor"
            DM="gdm"
            echo -e "export XDG_CURRENT_DESKTOP=Budgie:GNOME\nexec budgie-desktop" > /home/$nombre_usuario/.xinitrc
            echo gdm > DMservice
            ;;

        8)  DE="enlightenment entrance-git terminology network-manager-applet eluminance-git ephoto stalonetray"
            echo -e "exec enlightenment_start" > /home/$nombre_usuario/.xinitrc
            echo entrance > DMservice
            ;;
            
        9) #INICIO lxde-gtk3
            DE="lxde-gtk3 lxde-common lxsession openbox lxmed"
            DM="lxdm-gtk3"
            echo -e "exec startlxde" > /home/$nombre_usuario/.xinitrc
            echo lxdm > DMservice
            ;;
            
        10) #INICIO lxde
            DE="lxde lxde-common lxsession openbox lxmed"
            DM="lxdm"
            echo -e "exec startlxde" > /home/$nombre_usuario/.xinitrc
            echo lxdm > DMservice
            ;;
            
        11) #INICIO lxqt
            DE="lxqt breeze-icons oxygen-icons lxqt-connman-applet slock xdg-utils-slock"
            DM="sddm sddm-config-editor-git qt5-virtualkeyboard libxcb"
            echo -e "exec startlxqt" > /home/$nombre_usuario/.xinitrc
            echo sddm > DMservice
            ;;
        
        12) #INICIO mate
            DE="mate mate-extra mate-media mate-menu brisk-menu marco mate-themes libcanberra-pulse mate-panel mate-session-manager mate-screensaver mate-applet-dock mate-applet-streamer mate-power-manager network-manager-applet system-config-printer eom engrampa"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "exec mate-session" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;
        
        13) #INICIO Liri
            DE="liri-git-meta network-manager-applet"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "exec liri-session" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;
        14) #INICIO lumina
            DE="lumina-desktop-git network-manager-applet"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "exec start-lumina-desktop" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;
        15) #INICIO Pantheon
            DE="pantheon-session-git pantheon-terminal network-manager-applet wingpanel-git plank pantheon-default-settings-git pantheon-polkit-agent-git pantheon-files"
            DM="lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings light-locker accountsservice"
            echo -e "exec cerbere" > /home/$nombre_usuario/.xinitrc
            echo lightdm > DMservice
            ;;

    esac
done
#FIN ESCRITORIO
            ;;
        2) #INICIO (WM)
cmd=(dialog --keep-tite --backtitle "$titulo" \
--no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Selecciona tu gestor de ventana a instalar - (WM)" 19 55 16)

options=(1 "> i3wm | Window manager <"
         2 "> 2bwm | Window manager <"
         3 "> cwm | Window manager <" 
         4 "> fluxbox | Window manager <"
         5 "> openbox | Window manager <"
         6 "> blackbox | Window manager <"
         7 "> Bspwm | Window manager <"
         8 "> awesome | Window manager <"
         9 "> dwm | Window manager <"
         10 "> catwm | Window manager <"
         11 "> qtile | Window manager <"
         12 "> xmonad | Window manager <")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1)
            WM="i3 i3-gaps dmenu ranger"
            ;;
        2)
            echo "Second Option"
            ;;
        3)
            echo "Third Option"
            ;;
        4)
            echo "Fourth Option"
            ;;
    esac
done
#FINAL (WM)
            ;;
    esac
done

#AUDIO
cmd=(dialog --no-collapse --cr-wrap --title "-| Audio del Sistema |-" --backtitle "$titulo" \
--no-tags --ok-label '< Siguiente >' --nocancel --menu "\nPulseAudio es para el usuario tradicional \
\nJack Audio es para Profesionales sin latencia \
\nAlsa Audio es para terminal sin Interfaz Gráfica\n " 14 70 20)
options=(1 "Pulseaudio + Códecs de audio"   
         2 "Jack2      + Códecs de audio"
         3 "ALSA       + Códecs de audio")
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            AUDIO1="pulseaudio pulseaudio-alsa pavucontrol pamixer pulseeffects \
            pulseaudio-equalizer lib32-alsa-plugins lib32-libpulse pulseaudio-equalizer-ladspa \
            libcanberra-pulse libcanberra-gstreamer"
            #https://wiki.archlinux.org/index.php/PulseAudio
            ;;
        2)
            AUDIO2="realtime-privileges jack2 lib32-jack2 a2jmidid libffado python-dbus waf pro-audio lv2-plugins ladspa-plugins dssi-plugins vst-plugins"
            #https://wiki.archlinux.org/index.php/Professional_audio
            ;;
        3)
            AUDIO3="alsa-utils alsa-plugins alsa-oss alsa-firmware pamixer"
            #https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture
            ;;
                   
    esac
done
AUDIO=" $AUDIO1 $AUDIO2 $AUDIO3 "

#FIN_AUDIO



#UTILIDADES
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "Utilidades para tu sistema\n[ ESPACIO ] - Para marcar o desmarcar *" 15 70 20)
options=(1 "Lectura y formateo de discos incluido Android" on    # any option can be set to default to "on"
         2 "Compresión y Descompresión de archivos" off
         3 "Códecs de video, lectura de todos los formatos de vídeo" off
         4 "Gufw firewall de red" off
         5 "gnome-disk-utility - Administrador de Discos" off
         6 "gparted - Administrador de Discos" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            UTIL1="android-file-transfer android-tools android-udev msmtp libmtp \
                libcddb gvfs gvfs-afc gvfs-smb gvfs-gphoto2 gvfs-mtp gvfs-goa gvfs-nfs gvfs-google gst-libav \
                dosfstools jfsutils f2fs-tools btrfs-progs exfat-utils ntfs-3g \
                reiserfsprogs udftools xfsprogs nilfs-utils polkit gpart mtools cifs-utils"
            ;;
        2)
            UTIL2="ark xarchiver unarchiver binutils gzip lha lrzip lzip lz4 p7zip tar xz \
                bzip2 p7zip lbzip2 arj lzop cpio unrar unzip zstd zip lzip unarj zstd"
            ;;
        3)
            UTIL3="ffmpeg aom libde265 x265 x264 libmpeg2 xvidcore libtheora libvpx \
                schroedinger sdl gstreamer gst-plugins-bad gst-plugins-base gst-plugins-base-libs \
                gst-plugins-good gst-plugins-ugly xine-lib libdvdcss libdvdread dvd+rw-tools lame \
                jasper openjpeg libmng vcdimager"
            ;;
        4)
            UTIL4="gufw"
            ;;
            
        5)
            UTIL5="gnome-disk-utility"
            ;;
               
        6)
            UTIL6="gparted"
            ;;   
    esac
done
UTIL=" $UTIL1 $UTIL2 $UTIL3 $UTIL4 $UTIL5 $UTIL6 "
#FINAL DE UTILIDADES

#REPRODUCTOR
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' \
--title "-| Reproductores Video y Audio |-" --checklist "\n[ ESPACIO ] - Para marcar o desmarcar *" 19 100 19)
options=(   1 "vlc" on
            2 "mpv" off
            3 "mplayer" off
            4 "nuclear-player-bin" off            
            5 "elisa" off
            6 "spotify" off
            7 "clementine" off
            8 "audacious" off
            9 "xplayer" off
            10 "rhythmbox" off
            11 "moc" off
            12 "cmus" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            REPRO1="vlc"
            ;;
        2)
            REPRO2="mpv"
            ;;
        3)
            REPRO3="mplayer"
            ;;
        4)
            REPRO4="nuclear-player-bin"
            ;;
        5)
            REPRO5="elisa"
            ;;
        6)
            REPRO6="spotify"
            gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90
            gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 2EBF997C15BDA244B6EBF5D84773BD5E130D1D45
            ;;
        7)
            REPRO7="clementine"
            ;;
        8)
            REPRO8="audacious"
            ;;
        9)
            REPRO9="xplayer"
            ;;
        10)
            REPRO10="rhythmbox"
            ;;
        11)
            REPRO11="moc"
            ;;
        12)
            REPRO12="cmus"
            ;;
    esac
done
REPRO=" $REPRO1 $REPRO3 $REPRO4 $REPRO5 $REPRO6 $REPRO7 $REPRO8 $REPRO9 $REPRO10 $REPRO11 $REPRO12 "

# FIN REPRODUCTOR

#NAVEGADORES
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "Seleeciona tu navegador web\n[ ESPACIO ] - Para marcar o desmarcar *" 19 100 19)
options=(1 "Firefox | Open source" on    # any option can be set to default to "on"
         2 "Chromium | Open source" off
         3 "Brave | Open source" off
         4 "Google Chrome | Proprietary browser" off         
         5 "Opera | Proprietary browser" off
         6 "Vivaldi | Proprietary browser" off
         7 "Falkon | Open source" off
         8 "Qutebrowser | Open source" off
         9 "elinks | Console browser" off
         11 "lynx | Console browser" off
         11 "w3m | Console browser" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            WEB1="firefox"
            ;;
        2)
            WEB2="chromium"
            ;;
        3)
            WEB3="brave-bin"
            ;;
        4)
            WEB4="google-chrome"
            ;;
        5)
            WEB5="opera"
            ;;
        6)
            WEB6="vivaldi"
            ;;
        7)
            WEB8="falkon"
            ;;
        8)
            WEB9="qutebrowser"
            ;;
        9)
            WEB10="elinks"
            ;;
        10)
            WEB11="lynx"
            ;;
        11)
            WEB12="w3m"
            ;;
    esac
done
WEB=" $WEB1 $WEB3 $WEB4 $WEB5 $WEB6 $WEB7 $WEB8 $WEB9 $WEB10 $WEB11 "
# FIN NAVEGADORES

#TIPOGRAFIAS
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "Seleeciona tu Tipografía para tu sistema\n[ ESPACIO ] - Para marcar o desmarcar *" 20 80 20)
options=(1 "gnu-free-fonts" on    # any option can be set to default to "on"
         2 "ttf-hack" on
         3 "ttf-inconsolata" on
         4 "ttf-opensans" on         
         5 "ttf-ubuntu-font-family" off
         6 "ttf-tahoma" off
         7 "nerd-fonts-complete" off
         8 "ttf-google-sans" off
         9 "cantarell-fonts" off
         10 "ttf-linux-libertine" off
         11 "ttf-ms-fonts" off
         12 "ttf-envy-code-r" off
         13 "noto-fonts" off
         14 "nerd-fonts-dejavu-complete" off
         15 "bdf-unifont" off
         16 "system-san-francisco-font-git" off
         17 "adobe-source-sans-pro-fonts" off
         18 "adobe-source-serif-pro-fonts" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            FONT1="gnu-free-fonts"
            ;;
        2)
            FONT2="ttf-hack"
            ;;
        3)
            FONT3="ttf-inconsolata"
            ;;
        4)
            FONT4="ttf-opensans"
            ;;
        5)
            FONT5="ttf-ubuntu-font-family"
            ;;
        6)
            FONT6="ttf-tahoma"
            ;;
        7)
            FONT7="nerd-fonts-complete"
            ;;
        8)
            FONT8="ttf-google-sans"
            ;;
        9)
            FONT9="cantarell-fonts"
            ;;
        10)
            FONT10="ttf-linux-libertine"
            ;;
        11)
            FONT11="ttf-ms-fonts"
            ;;
        12)
            FONT12="ttf-envy-code-r"
            ;;
        13)
            FONT13="noto-fonts"
            ;;
        14)
            FONT14="nerd-fonts-dejavu-complete"
            ;;
        15)
            FONT15="bdf-unifont"
            ;;
        16)
            FONT16="system-san-francisco-font-git"
            ;;
        17)
            FONT17="adobe-source-sans-pro-fonts"
            ;;
        18)
            FONT18="adobe-source-serif-pro-fonts"
            ;;
            
    esac
done
FONT=" gnome-font-viewer $FONT1 $FONT2 $FONT3 $FONT4 $FONT5 $FONT6 $FONT7 $FONT8 $FONT9 $FONT10 $FONT11 $FONT12 $FONT13 $FONT14 $FONT15 $FONT16 $FONT17 $FONT18 "
# FIN TIPOGRAFIAS

#OFFICE
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "Suite de Ofimática\n[ ESPACIO ] - Para marcar o desmarcar *" 13 100 13)
options=(    1 "LibreOffice | libreoffice-still" on
             2 "LibreOffice | libreoffice-fresh" off
             3 "WPS Office | wps-office" off
             4 "OnlyOffice | onlyoffice-bin" off
             5 "OpenOffice | openoffice" off
             6 "SoftMaker Office | freeoffice " off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            OFFICE1="libreoffice-still libreoffice-still-es"
            ;;
        2)
            OFFICE2="libreoffice-fresh libreoffice-fresh-es"
            ;;
        3)
            OFFICE3="wps-office ttf-wps-fonts wps-office-mui-es-es"
            ;;
        4)
            OFFICE4="onlyoffice-bin"
            ;;
        5)
            OFFICE5="openoffice openoffice-extension-languagetool"
            ;;
        6)
            OFFICE6="freeoffice"
            ;;
    esac
done
OFFICE=" $OFFICE1 $OFFICE3 $OFFICE4 $OFFICE5 $OFFICE6 "
# FIN OFFICE



#Administrador de Procesos
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  --title "-| Administrador de Procesos |-" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --checklist "\n[ ESPACIO ] - Para marcar o desmarcar *\n " 15 70 20)
options=(1 "gnome-system-monitor" on
         2 "htop" on
         3 "gotop" off
         4 "gtop" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            AP1="gnome-system-monitor"
            ;;
        2)
            AP2="htop"
            ;;
        3)
            AP3="gotop"
            ;;
        4)
            AP4="gtop"
            ;;
            
    esac
done
AP=" $AP1 $AP2 $AP3 $AP4 "
#FINAL DE Administrador de Procesos


#Redes Sociales
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  --title "-| Redes Sociales |-" \
--no-tags --ok-label '< Siguiente >' --column-separator "|" --cancel-label '< No deseo esto >' --checklist "\n[ ESPACIO ] - Para marcar o desmarcar *\n " 15 70 20)
options=(1 "Telegram | telegram-desktop" on
         2 "IGdm | App de chat de Instagram" off
         3 "Whatsapp | whatsapp-nativefier-dark" off
         4 "Facebook Messenger | caprine" off
         5 "Netflix | netflix-qdesktop" off
         6 "Skype | skypeforlinux-preview-bin" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            RS1="telegram-desktop aspell-es"
            ;;
        2)
            RS2="igdm-bin aspell-es"
            ;;
        3)
            RS3="whatsapp-nativefier-dark aspell-es"
            ;;
        4)
            RS4="caprine aspell-es"
            ;;    
        5)
            RS5="netflix-qdesktop aspell-es"
            ;;            
        6)
            RS6="skypeforlinux-preview-bin aspell-es"
            ;;
            
    esac
done
RS=" $RS1 $RS2 $RS3 $RS4 $RS5 $RS6 "
#FINAL DE Redes Sociales

nombre_usuario=$(cat /etc/passwd | grep '/home' | cut -d: -f1)
#SH
cmd=(dialog --no-collapse --cr-wrap --title "-| SHELL del Sistema |-" --backtitle "$titulo" \
--no-tags --ok-label '< Siguiente >' --nocancel --menu "\nSeleccione\n " 15 70 20)
options=(1 "zsh"   
         2 "bash"
         3 "dash"
         4 "fish"
         5 "mksh"
         6 "tcsh")
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            SH="zsh zsh-completions zsh-syntax-highlighting"
            cp /root/zshrc /home/$nombre_usuario/.zshrc
            ;;

        2)
            SH="bash bash-completion autojump command-not-found";;
            
        3)
            SH="dash";;
            
        4)
            SH="fish";;
            
        5)
            SH="mksh";;
            
        6)
            SH="tcsh";;
                                                
    esac
done
#FIN_SH

dialog --title "-| AUR Helper |-" --backtitle "$titulo" --yesno "\n¿Desea un asistente para hacer descargas en Arch User Repository?" 7 70

case $? in
   0) #AUR
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo"  --title "-| AUR Helper |-" \
--no-tags --ok-label '< Siguiente >' --column-separator "|" --cancel-label '< No deseo esto >' --checklist "\n[ ESPACIO ] - Para marcar o desmarcar *\n " 20 80 20)
options=(1 "yay | Terminal" on
         2 "trizen | Terminal" off
         3 "pikaur | Terminal" off
         4 "aurman | Terminal" off
         5 "pakku | Terminal" off
         6 "Pamac | Graphical" on
         7 "Octopi | Graphical" off
         8 "Cylon | Graphical" off
         9 "Argon | Graphical" off
         10 "Pakku GUI | Graphical" off)

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            AUR1="yay"
            ;;
        2)
            AUR2="trizen"
            ;;
        3)
            AUR3="pikaur"
            ;;
        4)
            AUR4="aurman"
            ;;    
        5)
            AUR5="pakku"
            ;;            
        6)
            AUR6="pamac-aur pamac-tray-appindicator pamac-zsh-completions"
            ;;
        7)
            AUR7="octopi"
            ;; 
        8)
            AUR8="cylon"
            ;;
        9)
            AUR9="argon"
            ;; 
        10)
            AUR10="pakku-gui"
            ;; 

    esac
done
AUR=" $AUR1 $AUR2 $AUR3 $AUR4 $AUR5 $AUR6 $AUR7 $AUR8 $AUR9 $AUR10 "
#FINAL DE AUR
;;
   1) AUR_DELETE="yay-bin";;

   255) echo "[ESC] key pressed.";;
esac

#Load the X11 keymap
cmd=(dialog --backtitle "$titulo" --title "-| Distribución del teclado para Xorg |-" --keep-tite --menu "\n" 10 0 10)

options=(latam      "LatinoAmericano"
         es         "Español"
         us         "Ingles"
         otros      "(+)Teclados")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        es)
            keyboard="es"
                    keymap=$keyboard  
            ;;
            
        latam)
            keyboard="latam"
                    keymap=$keyboard 
            ;;
            
        us)
            keyboard="us"
                    keymap=$keyboard  
            ;;
            
        otros)
            selected=0 
            while [ $selected == "0" ];do 
                locales="$(localectl list-keymaps | awk '$locales=$locales" Keyboard"')" && locales=$(echo "$locales") 
                keyboard=$(dialog --backtitle "$titulo" --clear --title "-| Distribución del teclado: |-" --menu "\n" 15 0 15   ${locales} 2>&1 > /dev/tty) 
                if [ $? == 0 ];then 
                    keymap=$keyboard 
                    selected=1 
                else 
                    dialog --backtitle "$titulo" --title "-| ERROR |-" --stdout --ok-label 'Siguiente' --msgbox "Ingrese una distribución del teclado para continuar" 5 55 
                fi
            done
            ;;
    esac
done
#FIN the X11 keymap

clear
pacman -Sy archlinux-keyring --noconfirm | dialog --no-collapse --cr-wrap --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" --progressbox "| Claves Actualizadas, Espere... |" 27 100; sleep 3

sed -i '100d' /etc/pacman.conf
sed -i '99d' /etc/pacman.conf
sed -i '98d' /etc/pacman.conf

nombre_usuario=$(cat /etc/passwd | grep '/home' | cut -d: -f1)


dialog  --backtitle "$titulo" --title "-| Instalando |-" --stdout --ok-label "Siguiente" --prgbox "pacman -Syu && \
sudo -u $nombre_usuario yay -Sy $XORG --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $GPU --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $DE --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $DM --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $WM --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $WEB --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $FONT --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $UTIL --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $AUDIO --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $OFFICE --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $REPRO --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $SH --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $AP --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $RS --noeditmenu --noconfirm && \
sudo -u $nombre_usuario yay -Sy $AUR --noeditmenu --noconfirm && \
systemctl enable $(cat DMservice) $(cat GPUvirt) && \
pacman -R $AUR_DELETE --noconfirm" 27 100

localectl set-x11-keymap $keymap

echo $SH | awk -F " " '{print $1}' >> shell
SH=$(cat shell)
chsh -s /bin/$SH
chsh -s /usr/bin/$SH $nombre_usuario
chsh -s /bin/$SH $nombre_usuario
rm shell

clear

sed -i '80d' /etc/sudoers
sed -i "80i $nombre_usuario ALL=(ALL) ALL" /etc/sudoers
cp pacman-chroot.conf /etc/pacman.conf
clear
pacman -Syu --noconfirm
alsi
sleep 5
clear

####################################################################
if [[ -n $wifinet1 || -n $wifinet2 ]]; then
wifinet1=$(netctl list | awk -F " " '{print $1}')
netctl disable $wifinet1
clear
wifinet2=$(netctl list | awk -F " " '{print $2}')
netctl disable $wifinet2
systemctl disable netctl
fi
clear
systemctl enable dhcpcd NetworkManager
clear
systemctl start dhcpcd NetworkManager
clear
####################################################################

#Deshabilitar el inicio de sesión automático root tn tty1
rm -R /etc/systemd/system/getty@tty1.service.d
sed -i 's/sh chroot//g' /root/.bashrc
rm /root/.bash_profile
rm chroot
reboot
#Eliminar los scripts y reinic
