#!/bin/bash

#Load the X11 keymap

localectl --no-convert set-x11-keymap selectedkeymap

#Colores
clear
red='\033[38;2;255;0;02m'
echo ""
echo ""
echo -e $red ">-------------------------------------------------------------------------<";
echo -e $red ">                                                                         <";
echo -e $red ">                                                                         <";
echo -e $red ">                      ██   █▄▄▄▄ ▄█▄    █▄▄▄▄ ▄█    ▄▄▄▄▄                <";
echo -e $red ">                      █ █  █  ▄▀ █▀ ▀▄  █  ▄▀ ██   █     ▀▄              <";
echo -e $red ">                      █▄▄█ █▀▀▌  █   ▀  █▀▀▌  ██ ▄  ▀▀▀▀▄                <";
echo -e $red ">                      █  █ █  █  █▄  ▄▀ █  █  ▐█  ▀▄▄▄▄▀                 <";
echo -e $red ">                         █   █   ▀███▀    █    ▐                         <";
echo -e $red ">                        █   ▀            ▀                               <";
echo -e $red ">                       ▀                                                 <";
echo -e $red ">                                                                         <";
function ProgressBar {
# Process data
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*6)/10
    let _left=60-$_done
# Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:                           
# 1.2.1.1 Progress : [########################################] 100%
printf "\r > Cargando : |${_fill// /▇}${_empty// /-}| ${_progress}%%"

}

# Variables
_start=1

# This accounts as the "totalState" variable for the ProgressBar function
_end=100

# Proof of concept
for number in $(seq ${_start} ${_end})
do
    sleep 0.06
    ProgressBar ${number} ${_end}
done

echo -e '\033[m'




titulo="| Instalación de ArchLinux - by: ArcriS |"

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "| INTERNET |" --msgbox "\n| Primero necesitamos saber si hay conexión a Internet |" 7 60

if ping -c 2 www.google.com &> /dev/null; then
    
   dialog --title "|  Conexión a RED  |" --backtitle "$titulo" \
   --prgbox "ping -c 3 archlinux.org && echo && echo Si Hay Internet!" 17 100 

else
        
    dialog --backtitle "$titulo" --title "| Error de RED |" --ok-label 'Siguiente' --msgbox "\nNo hay conexión de Internet\n" 7 35
    wifinet=$(netctl list | awk -F " " '{print $1}')
    netctl disable $wifinet
    wifinet=$(netctl list | awk -F " " '{print $2}')
    netctl disable $wifinet
    clear
    systemctl disable netctl
    systemctl enable dhcpcd NetworkManager
    systemctl start dhcpcd NetworkManager
    
    #--title "| Conexión WiFi |"
    dialog --backtitle "$titulo"  --yesno "\n¿Tienes Wi-Fi?\n" 7 20

case $? in
   0)       wifi_var=0 
            wlan=$(echo /proc/net/dev*/w*)
            lan=${wlan##*/}
            
            nombre_red="$(iw dev $lan scan | grep SSID: | awk -F " " '{print $2}' | head -1)"
            clave_red=" Clave"
            dialog --title "| LISTA DE REDES WIFI SSID: |" --backtitle "$titulo" --ok-label "Conectar" --no-cancel \
              --stdout --form "$(iw dev $lan scan | grep SSID:)" 15 50 0 \
              "Nombre de Red :  " 0 0 "$nombre_red" 1 20 20 0 \
              "Contraseña    :  " 2 1 "$clave_red" 2 20 20 0 > output.txt
            nombre_red=$(cat output.txt | head -1)
            clave_red=$(cat output.txt | head -2 | tail -1)
            
            
            DIALOG=${DIALOG=dialog}
            
            COUNT=10
            (
            while test $COUNT != 110
            do
            echo $COUNT
            nmcli dev wifi connect $(cat output.txt | head -1) password $(cat output.txt | head -2 | tail -1)
            systemctl enable dhcpcd NetworkManager
            systemctl start dhcpcd NetworkManager
            COUNT=`expr $COUNT + 50`
            sleep 1
            done
            ) |
            $DIALOG --title "| Conectando a Red Wifi |" --gauge "\n\nConectándose, espere..." 10 50 0
            

            dialog --backtitle "$titulo" --title "| Estado de Conexión |" \
            --stdout --ok-label "Siguiente" --prgbox "echo '' && nmcli dev status && echo '' && echo '' && echo 'Nombre de Red: $nombre_red' && echo 'Clave de Red: $clave_red'" 18 68 ; wifi_var=1
            
            rm output.txt ;;   

   1)   dialog --backtitle "$titulo" --title "| Ethernet |" --msgbox "\nPruebe conectando bien su cable de Ethernet\nIntentalo nuvamente..." 8 50
        exit;;
        
   255) dialog --backtitle "$titulo" --title "| Ethernet |" --msgbox "\nPresiono [ESC] - Salir del Script" 7 40
        exit;;
        
esac
fi


nombre_usuario=$(cat /etc/passwd | grep '/home' | cut -d: -f1) 
#Para que el sudo no pida clave
sed -i "80i $nombre_usuario ALL=(ALL) NOPASSWD: ALL" /etc/sudoers


dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "| Instalando AUR helper |" --stdout --ok-label "Siguiente" --prgbox "cd /home/$nombre_usuario \
            && git clone https://aur.archlinux.org/yay-bin.git \
            && chown -R $nombre_usuario:users /home/$nombre_usuario/yay-bin \
            && chown -R $nombre_usuario:users /home/$nombre_usuario/yay-bin/PKGBUILD \
            && cd /home/$nombre_usuario/yay-bin \
            && sudo -u $nombre_usuario makepkg -smp PKGBUILD --noconfirm \
            && pacman -U *.pkg.tar.xz --noconfirm \
            && rm -Rf /home/$nombre_usuario/yay-bin \
            && cd" 25 100
            
# yay -S gotop-git --noeditmenu --noconfirm --removemake

XORG=$"xorg xorg-apps xorg-xinit xorg-twm xterm"

#Inicio de Video
VM=false
    ####################################################################
      
    case $(systemd-detect-virt) in
        oracle)
            virt="vbox"
            VM=true
        ;;
        vmware)
            virt="vmware"
            VM=true
        ;;
        qemu)
            virt="qemu"
            VM=true
        ;;
        kvm)
            virt="kvm"
            VM=true
        ;;
        microsoft)
            virt="hyper-v"
            VM=true
        ;;
        xen)
            virt="xen"
            VM=true
        ;;
    esac
    
    ####################################################################
kernel=$(uname -a | tail -c -6)
videotext=$(sudo lshw -class display | grep "product:\|vendor:")

if [ "$VM" == "true" ]; then
    
            dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Entendido>" --msgbox "$videotext" 10 100
            case "$virt" in
                
                vbox)   if [ "$kernel" == "Linux" ]; then
                            GPUvirt="yay -Sy virtualbox-guest-utils virtualbox-guest-modules-arch xf86-video-vmware --noeditmenu --noconfirm --removemake && \
                            systemctl enable vboxservice.service && \
                            modprobe -a vboxguest vboxsf vboxvideo && \
                            systemctl start vboxservice.service"
                            dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VirtualBox\nInstalar: VirtualBox Guest" 7 80
                        else
                            GPUvirt="yay -Sy virtualbox-guest-utils virtualbox-guest-dkms --noeditmenu --noconfirm --removemake && \
                            systemctl enable systemd-modules-load.service"
                            dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VirtualBox\nInstalar: VirtualBox Guest-dkms" 7 80
                        fi
                ;;
                vmware) GPUvirt="yay -Sy xf86-video-vmware xf86-input-vmmouse open-vm-tools net-tools gtkmm mesa mesa-libgl --noeditmenu --removemake --noconfirm "
                        dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VMware\nInstalar: xf86-video-vmware" 7 80
                ;;
                
                hyper-v) GPUvirt="yay -Sy xf86-video-fbdev mesa-libgl --noeditmenu --noconfirm --removemake"                         
                ;;
                
                *)      GPUvirt="yay -Sy xf86-video-fbdev mesa-libgl --noeditmenu --noconfirm --removemake"
                ;;
                
            esac

            
elif [ "$VM" == "none" ]; then

dialog --title "Driver de Vídeo" --yesno "¿Auto-Detectar el Hardware de Vídeo?" 7 60

case $? in
   0)  if (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
    
GPU="xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver \
lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd \
lib32-ocl-icd opencl-headers"

dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\n$GPU" 10 80
            

        elif (lspci | grep VGA | grep "Radeon R\|R2/R3/R4/R5" &>/dev/null); then
            
GPU="xf86-video-amdgpu mesa lib32-mesa vulkan-radeon \
lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau \
lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\n$GPU" 10 80

        elif (lspci | grep VGA | grep "ATI\|AMD" &>/dev/null); then
                    
GPU="xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver \
lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\n$GPU" 10 80

        elif (lspci | grep VGA | grep "Intel" &>/dev/null); then
            
GPU="xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver \
libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\n$GPU" 10 80
                
        else
            
GPU="xf86-video-vesa mesa lib32-mesa"
dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\n$GPU" 10 80
            
        fi
;;
   1) echo "Proximamente"
;;
   255) echo "Presiono la tecla [ESC]"
;;
esac

else            
GPU="xf86-video-vesa mesa lib32-mesa"
dialog --title "-| Tarjeta de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\n$GPU" 10 80
#Final de VIDEO      
fi

    ####################################################################
    
titulo="| Instalación de ArchLinux - by: ArcriS |"

#INICIO ESCRITORIO

cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Selecciona tu escritorio a instalar - (DE)" 19 60 19)

options=(1 " > | xfce4 | Xfce desktop| <"
         2 " > | plasma | KDE Plasma desktop| <'"
         3 " > | deepin | Deepin desktop| <"
         4 " > | gnome | GNOME Classic desktop| <"
         5 " > | gnome-flashback | GNOME 2 desktop| <"
         6 " > | cinnamon | Cinnamon desktop| <"
         7 " > | budgie-desktop | Budgie desktop| <"
         8 " > | enlightenment | Enlightenment desktop| <"
         9 " > | lxde-gtk3| The Lightweight X11 desktop| <"
         10 " > | lxde | The Lightweight X11 GTK2| <"
         11 " > | lxqt | LXDE-Qt y Razor-qt projects| <"
         12 " > | mate | Mate GTK3 desktop| <")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        
        1)
cmd=(dialog --keep-tite --backtitle "$titulo" \
--no-collapse --cr-wrap --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --menu "Decide en instalar o personalizar las opciones\n\n \
xfce4 xfce4-goodies network-manager-applet alacarte \n\nSelecciona una opción para XFCE4 \n" 14 60 19)

options=(1 "Predeterminado || Una mejor experiencia "
         2 "Personalizar || Especificar Paquetes básicos")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1)  DE="xfce4 xfce4-goodies network-manager-applet alacarte papirus-icon-theme deepin-icon-theme sierra-gtk-theme-git"
            ;;
        
        2) cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel --checklist "Seleeciona paquetes extras del escritorio XFCE4\n[ ESPACIO ] - Para Seleccionar" 12 70 19)
            options=(1 "xfce4-goodies || Programas extras de xfce4" off    # any option can be set to default to "on"
                     2 "network-manager-applet || Gestionar conexiones de red" off
                     3 "alacarte || Editar entradas" off)
            choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
            clear
            for choice in $choices
            do
                case $choice in
                    1)
                        xfce4_2="xfce4-goodies"
                        ;;
                    2)
                        xfce4_3="network-manager-applet"
                        ;;
                    3)
                        xfce4_4="alacarte"
                        ;;
                esac
            done
            xfce4="xfce4"
            DE="$xfce4 $xfce4_2 $xfce4_3 $xfce4_4"
            ;;
                        
    esac
done
            ;;
            
        2)
            echo "Second Option"
            ;;
        3)
            echo "Third Option"
            ;;
        4)
            echo "Fourth Option"
            ;;
    esac
done


#FIN ESCRITORIO

#INICIO DISPLAY MANAGER

cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --column-separator "|" --no-tags --ok-label '< Seleccionar >' --nocancel \
    --menu "Selecciona tu Display Manager a instalar - (DM)\n\nPor defecto es Lightdm" 13 55 19)

options=(1 " > | lightdm || Para Multiples Escritorios| <"
         2 " > | gdm || Para GNOME y derivadas| <"
         3 " > | lxdm || Para LXDE| <"
         4 " > | sddm || Para KDE y LXQt| <")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1)
            DM="lightdm"
            ;;
        2)
            DM="gdm"
            ;;
        3)
            DM="lxdm"
            ;;
        4)
            DM="sddm"
            ;;
    esac
done

#################################################

#FIN DISPLAY MANAGER


dialog  --title "-| Instalando |-" --stdout --ok-label "Siguiente" --prgbox "sudo -u $nombre_usuario yay -Sy $XORG --noeditmenu --noconfirm --removemake \
&& sudo -u $nombre_usuario $GPUvirt \
&& sudo -u $nombre_usuario yay -Sy $GPU $DE $DM --noeditmenu --noconfirm --removemake \
&& systemctl enable $DM \
&& sudo -u $nombre_usuario yay -Sy pulseaudio pavucontrol google-chrome gnu-free-fonts ttf-hack ttf-inconsolata gnome-font-viewer vlc gufw leafpad --noeditmenu --noconfirm --removemake" 27 100


wifinet=$(netctl list | awk -F " " '{print $1}')
netctl disable $wifinet
clear
wifinet=$(netctl list | awk -F " " '{print $2}')
netctl disable $wifinet
systemctl disable netctl
clear
systemctl enable dhcpcd NetworkManager
systemctl start dhcpcd NetworkManager
clear

sed -i '80d' /etc/sudoers
sed -i "80i $nombre_usuario ALL=(ALL) ALL" /etc/sudoers

pacman -Syu
alsi
#Deshabilitar el inicio de sesión automático root tn tty1

rm -R /etc/systemd/system/getty@tty1.service.d
sed -i 's/sh chroot//g' /root/.bashrc
rm /root/.bash_profile
rm chroot
reboot
#Eliminar los scripts y reinic